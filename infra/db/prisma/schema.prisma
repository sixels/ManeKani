// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subject {
  id         String  @id @default(uuid()) @db.Uuid
  category   String
  level      Int
  name       String
  value      String?
  valueImage String?
  slug       String
  priority   Int

  resources Json @default("[]")
  studyData Json @default("[]")

  dependsOn  Subject[] @relation("SubjectDependency")
  dependedBy Subject[] @relation("SubjectDependency")

  similarTo   Subject[] @relation("SubjectSimilarity")
  similarFrom Subject[] @relation("SubjectSimilarity")

  deck   Deck   @relation(fields: [deckId], references: [id], onDelete: Cascade)
  deckId String @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([category, slug, deckId])
}

model Deck {
  id          String @id @default(uuid()) @db.Uuid
  name        String
  description String

  // TODO: implement the rest of deck fields

  subjects Subject[]

  ownedBy User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([name, ownerId])
}

model User {
  id String @id

  username    String? @unique
  displayName String?

  isVerified Boolean @default(false)
  isComplete Boolean @default(false)

  decks  Deck[]
  tokens ApiToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model ApiToken {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now())
  usedAt    DateTime?

  name   String
  token  String @unique
  prefix String

  isActive Boolean @default(true)
  claims   Json

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  @@unique([name, ownerId])
}
