// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	ApiKeyScopes = "ApiKey.Scopes"
	LoginScopes  = "Login.Scopes"
)

// Defines values for TokenStatus.
const (
	TokenStatusActive TokenStatus = "active"
	TokenStatusFrozen TokenStatus = "frozen"
)

// CommonErrorResponse defines model for common.ErrorResponse.
type CommonErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// DeckCreateRequest defines model for deck.CreateRequest.
type DeckCreateRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DeckCreateResponse defines model for deck.CreateResponse.
type DeckCreateResponse = DeckModel

// DeckGetAllResponse defines model for deck.GetAllResponse.
type DeckGetAllResponse struct {
	Decks *[]struct {
		Description *string             `json:"description,omitempty"`
		Id          *openapi_types.UUID `json:"id,omitempty"`
		Name        *string             `json:"name,omitempty"`
		Owner       *string             `json:"owner,omitempty"`
	} `json:"decks,omitempty"`
}

// DeckGetResponse defines model for deck.GetResponse.
type DeckGetResponse = DeckModel

// DeckModel defines model for deck.Model.
type DeckModel struct {
	CreatedAt   *string             `json:"created_at,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Owner       *string             `json:"owner,omitempty"`
	Subjects    *[]string           `json:"subjects,omitempty"`
	UpdatedAt   *string             `json:"updated_at,omitempty"`
}

// SubjectCreateRequest defines model for subject.CreateRequest.
type SubjectCreateRequest struct {
	AdditionalStudyData *map[string]interface{} `json:"additional_study_data,omitempty"`
	Deck                openapi_types.UUID      `json:"deck"`
	Dependencies        *[]openapi_types.UUID   `json:"dependencies,omitempty"`
	Dependents          *[]openapi_types.UUID   `json:"dependents,omitempty"`
	Kind                string                  `json:"kind"`
	Level               int32                   `json:"level"`
	Name                string                  `json:"name"`
	Priority            uint8                   `json:"priority"`

	// Resource The subject resources
	Resource *[]openapi_types.File `json:"resource[],omitempty"`

	// ResourcesMeta Resources metadatas
	ResourcesMeta *[]map[string]string  `json:"resources_meta,omitempty"`
	Similars      *[]openapi_types.UUID `json:"similars,omitempty"`
	Slug          string                `json:"slug"`
	StudyData     *[]SubjectStudyData   `json:"study_data,omitempty"`
	Value         *string               `json:"value,omitempty"`

	// ValueImage The subject value image
	ValueImage *openapi_types.File `json:"value_image,omitempty"`
}

// SubjectCreateResponse defines model for subject.CreateResponse.
type SubjectCreateResponse = SubjectModel

// SubjectGetAllResponse defines model for subject.GetAllResponse.
type SubjectGetAllResponse = []struct {
	Deck         openapi_types.UUID   `json:"deck"`
	Dependencies []openapi_types.UUID `json:"dependencies"`
	Dependents   []openapi_types.UUID `json:"dependents"`
	Id           openapi_types.UUID   `json:"id"`
	Kind         string               `json:"kind"`
	Level        int32                `json:"level"`
	Name         string               `json:"name"`
	Owner        string               `json:"owner"`
	Priority     uint8                `json:"priority"`
	Similars     []openapi_types.UUID `json:"similars"`
	Slug         string               `json:"slug"`
	StudyData    []SubjectStudyData   `json:"study_data"`
	Value        *string              `json:"value,omitempty"`
	ValueImage   *string              `json:"value_image,omitempty"`
}

// SubjectGetResponse defines model for subject.GetResponse.
type SubjectGetResponse = SubjectModel

// SubjectModel defines model for subject.Model.
type SubjectModel struct {
	AdditionalStudyData *map[string]interface{} `json:"additional_study_data,omitempty"`
	CreatedAt           string                  `json:"created_at"`
	Deck                openapi_types.UUID      `json:"deck"`
	Dependencies        []openapi_types.UUID    `json:"dependencies"`
	Dependents          []openapi_types.UUID    `json:"dependents"`
	Id                  openapi_types.UUID      `json:"id"`
	Kind                string                  `json:"kind"`
	Level               int32                   `json:"level"`
	Name                string                  `json:"name"`
	Owner               string                  `json:"owner"`
	Priority            uint8                   `json:"priority"`
	Resources           []SubjectResource       `json:"resources"`
	Similars            []openapi_types.UUID    `json:"similars"`
	Slug                string                  `json:"slug"`
	StudyData           []SubjectStudyData      `json:"study_data"`
	UpdatedAt           string                  `json:"updated_at"`
	Value               *string                 `json:"value,omitempty"`
	ValueImage          *string                 `json:"value_image,omitempty"`
}

// SubjectResource defines model for subject.Resource.
type SubjectResource struct {
	Metadata *map[string]string `json:"metadata,omitempty"`
	Url      *string            `json:"url,omitempty"`
}

// SubjectStudyData defines model for subject.StudyData.
type SubjectStudyData struct {
	Items    []SubjectStudyItem `json:"items"`
	Kind     string             `json:"kind"`
	Mnemonic string             `json:"mnemonic"`
}

// SubjectStudyItem defines model for subject.StudyItem.
type SubjectStudyItem struct {
	Category      *string `json:"category,omitempty"`
	IsHidden      bool    `json:"is_hidden"`
	IsPrimary     bool    `json:"is_primary"`
	IsValidAnswer bool    `json:"is_valid_answer"`
	Resource      *string `json:"resource,omitempty"`
	Value         string  `json:"value"`
}

// SubjectUpdateRequest defines model for subject.UpdateRequest.
type SubjectUpdateRequest struct {
	AdditionalStudyData *map[string]interface{} `json:"additional_study_data,omitempty"`
	Dependencies        *[]openapi_types.UUID   `json:"dependencies,omitempty"`
	Dependents          *[]openapi_types.UUID   `json:"dependents,omitempty"`
	Kind                *string                 `json:"kind,omitempty"`
	Level               *int32                  `json:"level,omitempty"`
	Name                *string                 `json:"name,omitempty"`
	Priority            *uint8                  `json:"priority,omitempty"`
	Resources           *[]SubjectResource      `json:"resources,omitempty"`
	Similars            *[]openapi_types.UUID   `json:"similars,omitempty"`
	Slug                *string                 `json:"slug,omitempty"`
	StudyData           *[]SubjectStudyData     `json:"study_data,omitempty"`
	Value               *string                 `json:"value,omitempty"`
	ValueImage          *string                 `json:"value_image,omitempty"`
}

// SubjectUpdateResponse defines model for subject.UpdateResponse.
type SubjectUpdateResponse = SubjectModel

// TokenClaims defines model for token.Claims.
type TokenClaims struct {
	DeckCreate          *bool `json:"deck_create,omitempty"`
	DeckDelete          *bool `json:"deck_delete,omitempty"`
	DeckUpdate          *bool `json:"deck_update,omitempty"`
	ReviewCreate        *bool `json:"review_create,omitempty"`
	StudyMaterialCreate *bool `json:"study_material_create,omitempty"`
	StudyMaterialUpdate *bool `json:"study_material_update,omitempty"`
	SubjectCreate       *bool `json:"subject_create,omitempty"`
	SubjectDelete       *bool `json:"subject_delete,omitempty"`
	SubjectUpdate       *bool `json:"subject_update,omitempty"`
	UserDelete          *bool `json:"user_delete,omitempty"`
	UserUpdate          *bool `json:"user_update,omitempty"`
}

// TokenCreateRequest defines model for token.CreateRequest.
type TokenCreateRequest struct {
	Name        string       `json:"name"`
	Permissions *TokenClaims `json:"permissions,omitempty"`
}

// TokenCreateResponse defines model for token.CreateResponse.
type TokenCreateResponse struct {
	Claims *TokenClaims `json:"claims,omitempty"`
	Id     *string      `json:"id,omitempty"`
	Name   *string      `json:"name,omitempty"`
	Prefix *string      `json:"prefix,omitempty"`
	Status *TokenStatus `json:"status,omitempty"`
	UsedAt *string      `json:"used_at,omitempty"`
}

// TokenGetAllResponse defines model for token.GetAllResponse.
type TokenGetAllResponse struct {
	Claims *TokenClaims `json:"claims,omitempty"`
	Id     *string      `json:"id,omitempty"`
	Name   *string      `json:"name,omitempty"`
	Prefix *string      `json:"prefix,omitempty"`
	Status *TokenStatus `json:"status,omitempty"`
	UsedAt *string      `json:"used_at,omitempty"`
}

// TokenStatus defines model for token.Status.
type TokenStatus string

// GetDecksParams defines parameters for GetDecks.
type GetDecksParams struct {
	Ids      *string `form:"ids,omitempty" json:"ids,omitempty"`
	Subjects *string `form:"subjects,omitempty" json:"subjects,omitempty"`
	Owners   *string `form:"owners,omitempty" json:"owners,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Names    *string `form:"names,omitempty" json:"names,omitempty"`
}

// GetSubjectsParams defines parameters for GetSubjects.
type GetSubjectsParams struct {
	Decks  *string `form:"decks,omitempty" json:"decks,omitempty"`
	Ids    *string `form:"ids,omitempty" json:"ids,omitempty"`
	Kinds  *string `form:"kinds,omitempty" json:"kinds,omitempty"`
	Levels *string `form:"levels,omitempty" json:"levels,omitempty"`
	Owners *string `form:"owners,omitempty" json:"owners,omitempty"`
	Page   *int    `form:"page,omitempty" json:"page,omitempty"`
	Slugs  *string `form:"slugs,omitempty" json:"slugs,omitempty"`
}

// ValidateTokenParams defines parameters for ValidateToken.
type ValidateTokenParams struct {
	Authorization string `json:"Authorization"`
}

// CreateTokenJSONRequestBody defines body for CreateToken for application/json ContentType.
type CreateTokenJSONRequestBody = TokenCreateRequest

// CreateDeckJSONRequestBody defines body for CreateDeck for application/json ContentType.
type CreateDeckJSONRequestBody = DeckCreateRequest

// CreateSubjectMultipartRequestBody defines body for CreateSubject for multipart/form-data ContentType.
type CreateSubjectMultipartRequestBody = SubjectCreateRequest

// UpdateSubjectJSONRequestBody defines body for UpdateSubject for application/json ContentType.
type UpdateSubjectJSONRequestBody = SubjectUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all user's API tokens
	// (GET /api/tokens)
	GetTokens(c *gin.Context)
	// Create a new API token
	// (POST /api/tokens)
	CreateToken(c *gin.Context)
	// Delete an API token
	// (DELETE /api/tokens/{id})
	DeleteToken(c *gin.Context, id string)
	// Query all decks
	// (GET /api/v1/decks)
	GetDecks(c *gin.Context, params GetDecksParams)
	// Create a new deck
	// (POST /api/v1/decks)
	CreateDeck(c *gin.Context)
	// Query a deck
	// (GET /api/v1/decks/{id})
	GetDeck(c *gin.Context, id string)
	// Query all subjects
	// (GET /api/v1/subjects)
	GetSubjects(c *gin.Context, params GetSubjectsParams)
	// Create a new subject
	// (POST /api/v1/subjects)
	CreateSubject(c *gin.Context)
	// Delete a subject
	// (DELETE /api/v1/subjects/{id})
	DeleteSubject(c *gin.Context, id string)
	// Query a subject
	// (GET /api/v1/subjects/{id})
	GetSubject(c *gin.Context, id string)
	// Update a subject
	// (PATCH /api/v1/subjects/{id})
	UpdateSubject(c *gin.Context, id string)
	// Validate a token
	// (GET /auth/validate-token)
	ValidateToken(c *gin.Context, params ValidateTokenParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetTokens operation middleware
func (siw *ServerInterfaceWrapper) GetTokens(c *gin.Context) {

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTokens(c)
}

// CreateToken operation middleware
func (siw *ServerInterfaceWrapper) CreateToken(c *gin.Context) {

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateToken(c)
}

// DeleteToken operation middleware
func (siw *ServerInterfaceWrapper) DeleteToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteToken(c, id)
}

// GetDecks operation middleware
func (siw *ServerInterfaceWrapper) GetDecks(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDecksParams

	// ------------- Optional query parameter "ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids", c.Request.URL.Query(), &params.Ids)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "subjects" -------------

	err = runtime.BindQueryParameter("form", true, false, "subjects", c.Request.URL.Query(), &params.Subjects)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subjects: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "owners" -------------

	err = runtime.BindQueryParameter("form", true, false, "owners", c.Request.URL.Query(), &params.Owners)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter owners: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "names" -------------

	err = runtime.BindQueryParameter("form", true, false, "names", c.Request.URL.Query(), &params.Names)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter names: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDecks(c, params)
}

// CreateDeck operation middleware
func (siw *ServerInterfaceWrapper) CreateDeck(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{"deck:create"})

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDeck(c)
}

// GetDeck operation middleware
func (siw *ServerInterfaceWrapper) GetDeck(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDeck(c, id)
}

// GetSubjects operation middleware
func (siw *ServerInterfaceWrapper) GetSubjects(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubjectsParams

	// ------------- Optional query parameter "decks" -------------

	err = runtime.BindQueryParameter("form", true, false, "decks", c.Request.URL.Query(), &params.Decks)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter decks: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids", c.Request.URL.Query(), &params.Ids)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "kinds" -------------

	err = runtime.BindQueryParameter("form", true, false, "kinds", c.Request.URL.Query(), &params.Kinds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kinds: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "levels" -------------

	err = runtime.BindQueryParameter("form", true, false, "levels", c.Request.URL.Query(), &params.Levels)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter levels: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "owners" -------------

	err = runtime.BindQueryParameter("form", true, false, "owners", c.Request.URL.Query(), &params.Owners)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter owners: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "slugs" -------------

	err = runtime.BindQueryParameter("form", true, false, "slugs", c.Request.URL.Query(), &params.Slugs)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter slugs: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSubjects(c, params)
}

// CreateSubject operation middleware
func (siw *ServerInterfaceWrapper) CreateSubject(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{"subject:create"})

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSubject(c)
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{"subject:delete"})

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSubject(c, id)
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSubject(c, id)
}

// UpdateSubject operation middleware
func (siw *ServerInterfaceWrapper) UpdateSubject(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{"subject:update"})

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSubject(c, id)
}

// ValidateToken operation middleware
func (siw *ServerInterfaceWrapper) ValidateToken(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ValidateTokenParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %s", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateToken(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/tokens", wrapper.GetTokens)
	router.POST(options.BaseURL+"/api/tokens", wrapper.CreateToken)
	router.DELETE(options.BaseURL+"/api/tokens/:id", wrapper.DeleteToken)
	router.GET(options.BaseURL+"/api/v1/decks", wrapper.GetDecks)
	router.POST(options.BaseURL+"/api/v1/decks", wrapper.CreateDeck)
	router.GET(options.BaseURL+"/api/v1/decks/:id", wrapper.GetDeck)
	router.GET(options.BaseURL+"/api/v1/subjects", wrapper.GetSubjects)
	router.POST(options.BaseURL+"/api/v1/subjects", wrapper.CreateSubject)
	router.DELETE(options.BaseURL+"/api/v1/subjects/:id", wrapper.DeleteSubject)
	router.GET(options.BaseURL+"/api/v1/subjects/:id", wrapper.GetSubject)
	router.PATCH(options.BaseURL+"/api/v1/subjects/:id", wrapper.UpdateSubject)
	router.GET(options.BaseURL+"/auth/validate-token", wrapper.ValidateToken)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AbEhoIV0JvXr0Hz7/wAAAP//TWtha4NKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
