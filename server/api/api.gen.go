// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xc3W/bOBL/VwTdAX1R4qRNcYXfspvrIujubS9p7yUwDMaa2NxIpEpSTr2B/vcDv2R9",
	"UF9OnDq7eoslcjgczm/mR3KUR39B44QSIIL700efL1YQI/XngsYxJcf/ZoyyK+AJJRzk84TRBJjAYFqF",
	"6qnYJOBPfUwELIH5WeDHwDlaFl9ywTBZ+lkW2Cf09g9YCNnajLbLQCESqPDGyswCn8G3FDMI/emN7m8a",
	"zxwKhLC4P/6ZARJwBd9S4KKuQwh8wXAiMCWOaQU+QXHDfIuaqFZBSVinQo1WUe/DORJOhboUxqF8fEdZ",
	"LAX4aYpDP+g9r8CnDwSY8w1P1USUklhAzJ2tzAPEGNrI32kSNk8nazLSLyDOo6jZSLJRWZFhy7ovK7km",
	"VLZI25RHp2h1it9oCNFom6ptzDBdkQ6FIZZGQNGcizTczN1BNvC/H1GU4CMZXZdAjuC7YOhIoCW3dpLa",
	"OoVlZqW6DdpvFCVLC02AhEAWdi5R9PudP7159P/J4M6f+v+YbJPexGS8iTXMZfgr5sLPZn1HLQxWHF28",
	"3NhCj3yPSVj3gn6iVF8pJIK1hk2+JJiId2+3a2ITbz+5WlzWCIl+UlRfKSRhmDIsNmWfwUR82FXBXKLO",
	"0pymbOHICv6XFXhmmbxts2AL1VydW0wQ27iiQgm8/dSzQ5XVm8eg0VjW8cq+9+R7CTKpYRnYEdZwz/Xe",
	"gvNzqWGT9i2pqkhy1Dg1WjNs0maeUjTHMY4Q2zuk7DhqzChd7uqxqq8SUoqeHWvRZ0LXUuCFCqB7XIJK",
	"nF6jKN0ZvbpzLmaOY7MtaEaYaujphkEntAaoYQbPqrZSycOEUBsEC+EmsKRdreusR15t4mY9E6vcEXUx",
	"lT6p05EO6xGrqWeVbJRT2+5yepIodz4bkqN2Y2JDkkw1aQyC8lUe3Os2MoHoiZZ2h7BaWHquANTBRxvj",
	"SD00tO+g1eQL+CiNW0NxEbolTBfzeMEgFciU/L6wMIENGtqT2oJCfYPauBMdQX0QoH6l8HtOfPVF0V6Q",
	"U7PkFkljbh1z65hbx9xa3uB1b64GLnCvzVRBj4bzxjEmjTFpjEl/s5iUL3QtHNiDuaedvKUsGnjcv13E",
	"mkq5Mwz3iksBscsrGpEcE4gpwYseS66Uydc27zjrmqTSqX7tgwQsKdu4L3X4fIXDEIpXPreURoCIeZ0w",
	"HKNS7/L7NYpwOEeEP5RiTKERK7hEb5hUbKKblRSqj16cTpuxvioEPfUC6CDzzX4TyZgufsj+tNORx13h",
	"yMBGBvY3Z2CC3gM5/jlCuOl4da5n4c7SqkEIEbQ20FNvyvNrDA+tg+iJx0gAwyga0rRtYOMs7eJMm7YZ",
	"2jZtY6UcWKsQ1aBZQta8cu1lKc1JGViMOceUdKKq5CLO2rxZp3qNlVe54/XXwEbn/kVECYM7/L0hyiCR",
	"9lTgWre1k3PKS/mQ4iItt/dtxyu1VqtNakHTxEKjRT5mn0Pv0sDTRx9IGku5aCHwWl2MM/pnieYXLsRl",
	"46M1YnJ8Lnt9kdK0sHMroPDso5GlihZgkcqIfS0toNfqPMGfYFO/tT//fOndw8ZDqVgBEXiB1IvAx/Lt",
	"ClCo9iR6dfzzVKwow3/aRnbGWngW+L/SJSb1UdRjDwlvJUQynUxO3/7r+OT45Ph0enb2/v0k0q9J6C1o",
	"svHECrwFJUKuokfv1O83lG3m9wwJyuccVKR44y0ovcdglc1/GWXrPeoaS2thckfrKv+GCHxCBHvnny+P",
	"ZUcsIqg89wN/DYzrDqfHJ4olJUBQgv2p/05OULoOEiu1BhOUYO2N6ucSRH3YX0B4KIo8GYHfcDmIZ3oo",
	"0UxZ/jLULb/YN8yAVcl9e3KiC66VBRWFTpLIrOzkD65LIzU6+hfkVAu8s6CWnQ036sZiJcI4YtEsy6rV",
	"nP7vn6R9z05OB82ux5zKJfKOkb8SZBwfQqnD+4EWfg4dLokARlDkXQNbA/NUB7+IdrWEBoA3s2wmuUCs",
	"jz1a3UrX2dyYLKIKrbAZzJ8KloIMwpQ7nFWnU+4hj8DDVqj3gMVKoXaJ10C8YnKverEWoRzZ19EXuPiJ",
	"hptnM7CLmDjs+2UFhRlQ9Zj7xYRgTFHB2umBY61CeXpiTfcKNeBe3tl/QqGXr9WI+d0wr9ewCk434G3l",
	"nQHg0S0NN0cmj5pnviMwZEExqU0ecZjpKGG3FuX5XKjn3EOkALXbTSFUXF7UIoTuZCNEghiKQYDc5988",
	"tmJYyVLMQGbgLS9QtK4M66CwcFVOOHtieh0EdEfWux9B+IpBqL235PG9Uq5F1vp0kn/+5CSMVyBSRjzk",
	"RZgLyZZlmtddHIzxwryowEih5FsKbFOEiTq8acRF4O6WfwezQ191LrRTz0RXGm/7lY4hHaeQTYL0dmuf",
	"8eAlKYDr87oBbDsrevJ/paFK3mW9WJ3qzXqyRNm4ShDVUWYTN7zQZ4b7oIaOb0YrleWvjfO5PjodKd+O",
	"2ebs5N2L6/CRslt9+XvY6c6eJ2n0T82p9Ux6bR86ai4CKhGkmvRyQunMfNeA2GLlIR1SbjceFtxT5M6Z",
	"9rrIo2xzKJzxR+SIXY9jDiBUnL24Cv+hwvtIU3KIrLSasbvBVvx2uT/JLDC9GuCut+96UE1LKAbTvh05",
	"6j0mu3VUF6Q/mtr2pbI8Spd/HSrb8C3O09lswY0tQsyjXpzWfvI4hNIadLSy2jiNBE4QExO5lTmyJuoX",
	"Rdz/JeCVc9uGTzRHejvS2z3SW+N1gxkuzzFejyqO1Nvz7LQQcJoJr266DTKttNc02zPzdUfjdosbS7RZ",
	"vGqUhhjevn3oNuiW0ByGNQ89QT9Xdu5Y1gSJxaq+sLqgdHBq1t1+4Do///mWu1bcsQB2OncYopB7gnqm",
	"+KubLxy+Q1YKjAf6ZHuMMmZqi1FVd3Q5c9cVnG2oM0cqVhP1zQAScJTXfpkgV3bq/5lmDddnvYp89hD8",
	"D4CDleKNNZOHalc0+b2MdhKuaIO2nvqMx6+VNH04+XCi/mGNEeEquVoBisTKM8VkueljEAwvlL830BbZ",
	"+S4lC10Rj4Wut7VRx+paF2A35O0Ccj8LXKdjHZ31P/Cq9dRFSu1dtdHrfb9yYB6DSDH3vHXK5bZ3lv0/",
	"AAD///RgwVz9UgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
