// Package tokens provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package tokens

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	LoginScopes = "Login.Scopes"
)

// Defines values for TokenStatus.
const (
	TokenStatusActive TokenStatus = "active"
	TokenStatusFrozen TokenStatus = "frozen"
)

// CommonErrorResponse defines model for common.ErrorResponse.
type CommonErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// TokenClaims defines model for token.Claims.
type TokenClaims struct {
	DeckCreate          *bool `json:"deck_create,omitempty"`
	DeckDelete          *bool `json:"deck_delete,omitempty"`
	DeckUpdate          *bool `json:"deck_update,omitempty"`
	ReviewCreate        *bool `json:"review_create,omitempty"`
	StudyMaterialCreate *bool `json:"study_material_create,omitempty"`
	StudyMaterialUpdate *bool `json:"study_material_update,omitempty"`
	SubjectCreate       *bool `json:"subject_create,omitempty"`
	SubjectDelete       *bool `json:"subject_delete,omitempty"`
	SubjectUpdate       *bool `json:"subject_update,omitempty"`
	UserDelete          *bool `json:"user_delete,omitempty"`
	UserUpdate          *bool `json:"user_update,omitempty"`
}

// TokenCreateRequest defines model for token.CreateRequest.
type TokenCreateRequest struct {
	Name        string       `json:"name"`
	Permissions *TokenClaims `json:"permissions,omitempty"`
}

// TokenCreateResponse defines model for token.CreateResponse.
type TokenCreateResponse struct {
	Claims *TokenClaims `json:"claims,omitempty"`
	Id     *string      `json:"id,omitempty"`
	Name   *string      `json:"name,omitempty"`
	Prefix *string      `json:"prefix,omitempty"`
	Status *TokenStatus `json:"status,omitempty"`
	UsedAt *string      `json:"used_at,omitempty"`
}

// TokenGetAllResponse defines model for token.GetAllResponse.
type TokenGetAllResponse struct {
	Claims *TokenClaims `json:"claims,omitempty"`
	Id     *string      `json:"id,omitempty"`
	Name   *string      `json:"name,omitempty"`
	Prefix *string      `json:"prefix,omitempty"`
	Status *TokenStatus `json:"status,omitempty"`
	UsedAt *string      `json:"used_at,omitempty"`
}

// TokenStatus defines model for token.Status.
type TokenStatus string

// ValidateTokenParams defines parameters for ValidateToken.
type ValidateTokenParams struct {
	Authorization string `json:"Authorization"`
}

// CreateTokenJSONRequestBody defines body for CreateToken for application/json ContentType.
type CreateTokenJSONRequestBody = TokenCreateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all user's API tokens
	// (GET /api/tokens)
	GetTokens(c *gin.Context)
	// Create a new API token
	// (POST /api/tokens)
	CreateToken(c *gin.Context)
	// Delete an API token
	// (DELETE /api/tokens/{id})
	DeleteToken(c *gin.Context, id string)
	// Validate a token
	// (GET /auth/validate-token)
	ValidateToken(c *gin.Context, params ValidateTokenParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetTokens operation middleware
func (siw *ServerInterfaceWrapper) GetTokens(c *gin.Context) {

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTokens(c)
}

// CreateToken operation middleware
func (siw *ServerInterfaceWrapper) CreateToken(c *gin.Context) {

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateToken(c)
}

// DeleteToken operation middleware
func (siw *ServerInterfaceWrapper) DeleteToken(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteToken(c, id)
}

// ValidateToken operation middleware
func (siw *ServerInterfaceWrapper) ValidateToken(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ValidateTokenParams

	headers := c.Request.Header

	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			siw.ErrorHandler(c, fmt.Errorf("Expected one value for Authorization, got %d", n), http.StatusBadRequest)
			return
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter Authorization: %s", err), http.StatusBadRequest)
			return
		}

		params.Authorization = Authorization

	} else {
		siw.ErrorHandler(c, fmt.Errorf("Header parameter Authorization is required, but not found"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ValidateToken(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/tokens", wrapper.GetTokens)
	router.POST(options.BaseURL+"/api/tokens", wrapper.CreateToken)
	router.DELETE(options.BaseURL+"/api/tokens/:id", wrapper.DeleteToken)
	router.GET(options.BaseURL+"/auth/validate-token", wrapper.ValidateToken)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW2/bNhT+KwQ3IC+y5XQJVujNbbYiyC5Fk+4lMAJGOrZYS6RKHjlRDf33gRfZsiUr",
	"7pZ1KJA36+jcz/fpkF7TWOaFFCBQ02hNdZxCzuzPWOa5FONflJLqA+hCCg1GXihZgEIOXiuxUqwKoBHl",
	"AmEBitYBzUFrtmi/1Ki4WNC6DhqJvP8EMRptlEsQ47cZ47nuRkkgXt7FChi2/d1LmQETxtwqJJDBoEJZ",
	"JAc9KFhxeBgMorFMqrucISjOsq9RHQqsS9uEYXdeZ6jCRmcoVqlBDTqxCoc9DEzOZv8BPpegsTtAwfI+",
	"JAS0AJVzrbkUVu9HBXMa0R/CLSxDj8lwByK1HdnnkitIaHTrAsyeTO8gjDfAOz6DgPKkt6bDxSqY88fe",
	"VxoZlkcmcO103biSO4ZfxbF3gNMse2nF1jpaUxBlbmDEYuQroAGdK/kFRAtR3ltAH0dGebRiyhSnjdWN",
	"8eacTRsHLdmv3pfJRENcKo7VtSnDNXxa8Cuo3GdOx4oXyKWgEZ2+vyRLqAgrMQWBPGb2RUC5eZsCS0DR",
	"psV0WmIqFf/SKPm0mXNeB/Q3uTCG+1GsmDAkKWIRheHpq5/Hk/FkfBqdnZ2fh5l7LRISy6IimAKJpUAz",
	"CiLn9vlEqupuqRhKfafBcvmExFIuOTTJbp58sl2LbsamW1zMZTfl35mAKyY4mb6/HBtDjhnsyWlAV6C0",
	"MzgdT0wHZAGCFZxG9CdTIA1owTC1MwhZwR2k7OMCsBv2HSBhWUbMN/JEmyDEW1jXynb+MnGaN80b5Ylm",
	"/b6aTNzStB00P1lRZH6y4SctxXYJH0eAPTbbru2m/eeVqf1scvpskXtPBj2RPwrmQQmJyeH8Gas/NodL",
	"gaAEy8g1qBUoYg1om4k0ul035Lid1TOzSfOcqeqJkSNbWPJbgflQPI64D0YjVCWYr5zUPUByy0gTRgQ8",
	"bJ2SB46pZdSCr0CQ9mrcR5hzYUFG3SIEjW9kUj0zvHbXek9/b1JoVSCtWNP2bvat2OPB6X+U6GEkOI3E",
	"keHbA/ENS8imjy98/Gd8dDPcJ04/Gc3NZAFi5MkxupdJNfL7x8toD2nroL0MwjVPasfg5tC8W8+FlWvC",
	"RIsG91WLxpcXHfY6o4a9BVMsBwSlbelD/LK+7EY1m2u7T3nSoVzQGtz+gWjWoePZNwfCH5K89fFeGPn9",
	"MtJBeQf+R+1GS7MS03DFMm6umyOnuz187VLmL692gDRHHYn/DUEmXeo3B6v/Gbl1exxNmwjrzGIzgFnt",
	"hmum7bpXqsy0b/8C8HryekJNL7yLvgtKCizDlPg726b1OaDiMa2D9SG0GeN5KWIjZxm3t8/t96zJtevg",
	"2v3NoYcd+D9DeuwvIF4+YZxAvOyxdEf6YVPX9K7tRw2KKMjsCWSjbY6VtJ7VfwcAAP//eZFCrYYTAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
