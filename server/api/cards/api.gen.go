// Package cards provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package cards

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

const (
	ApiKeyScopes = "ApiKey.Scopes"
	LoginScopes  = "Login.Scopes"
)

// CommonErrorResponse defines model for common.ErrorResponse.
type CommonErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// CommonResponse defines model for common.Response.
type CommonResponse struct {
	Code int                    `json:"code"`
	Data map[string]interface{} `json:"data"`
}

// DeckCreateRequest defines model for deck.CreateRequest.
type DeckCreateRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DeckCreateResponse defines model for deck.CreateResponse.
type DeckCreateResponse = DeckModel

// DeckGetAllResponse defines model for deck.GetAllResponse.
type DeckGetAllResponse struct {
	Decks *[]struct {
		Description *string             `json:"description,omitempty"`
		Id          *openapi_types.UUID `json:"id,omitempty"`
		Name        *string             `json:"name,omitempty"`
		Owner       *string             `json:"owner,omitempty"`
	} `json:"decks,omitempty"`
}

// DeckGetResponse defines model for deck.GetResponse.
type DeckGetResponse = DeckModel

// DeckModel defines model for deck.Model.
type DeckModel struct {
	CreatedAt   *string             `json:"created_at,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Owner       *string             `json:"owner,omitempty"`
	Subjects    *[]string           `json:"subjects,omitempty"`
	UpdatedAt   *string             `json:"updated_at,omitempty"`
}

// SubjectCreateRequest defines model for subject.CreateRequest.
type SubjectCreateRequest struct {
	AdditionalStudyData *map[string]interface{} `json:"additional_study_data,omitempty"`
	Deck                openapi_types.UUID      `json:"deck"`
	Dependencies        *[]openapi_types.UUID   `json:"dependencies,omitempty"`
	Dependents          *[]openapi_types.UUID   `json:"dependents,omitempty"`
	Kind                string                  `json:"kind"`
	Level               int32                   `json:"level"`
	Name                string                  `json:"name"`
	Priority            uint8                   `json:"priority"`

	// Resource The subject resources
	Resource *[]openapi_types.File `json:"resource[],omitempty"`

	// ResourcesMeta Resources metadatas
	ResourcesMeta *[]map[string]string  `json:"resources_meta,omitempty"`
	Similars      *[]openapi_types.UUID `json:"similars,omitempty"`
	Slug          string                `json:"slug"`
	StudyData     *[]SubjectStudyData   `json:"study_data,omitempty"`
	Value         *string               `json:"value,omitempty"`

	// ValueImage The subject value image
	ValueImage *openapi_types.File `json:"value_image,omitempty"`
}

// SubjectCreateResponse defines model for subject.CreateResponse.
type SubjectCreateResponse = SubjectModel

// SubjectGetAllResponse defines model for subject.GetAllResponse.
type SubjectGetAllResponse = []struct {
	Deck         openapi_types.UUID   `json:"deck"`
	Dependencies []openapi_types.UUID `json:"dependencies"`
	Dependents   []openapi_types.UUID `json:"dependents"`
	Id           openapi_types.UUID   `json:"id"`
	Kind         string               `json:"kind"`
	Level        int32                `json:"level"`
	Name         string               `json:"name"`
	Owner        string               `json:"owner"`
	Priority     uint8                `json:"priority"`
	Similars     []openapi_types.UUID `json:"similars"`
	Slug         string               `json:"slug"`
	StudyData    []SubjectStudyData   `json:"study_data"`
	Value        *string              `json:"value,omitempty"`
	ValueImage   *string              `json:"value_image,omitempty"`
}

// SubjectGetResponse defines model for subject.GetResponse.
type SubjectGetResponse = SubjectModel

// SubjectModel defines model for subject.Model.
type SubjectModel struct {
	AdditionalStudyData *map[string]interface{} `json:"additional_study_data,omitempty"`
	CreatedAt           string                  `json:"created_at"`
	Deck                openapi_types.UUID      `json:"deck"`
	Dependencies        []openapi_types.UUID    `json:"dependencies"`
	Dependents          []openapi_types.UUID    `json:"dependents"`
	Id                  openapi_types.UUID      `json:"id"`
	Kind                string                  `json:"kind"`
	Level               int32                   `json:"level"`
	Name                string                  `json:"name"`
	Owner               string                  `json:"owner"`
	Priority            uint8                   `json:"priority"`
	Resources           []SubjectResource       `json:"resources"`
	Similars            []openapi_types.UUID    `json:"similars"`
	Slug                string                  `json:"slug"`
	StudyData           []SubjectStudyData      `json:"study_data"`
	UpdatedAt           string                  `json:"updated_at"`
	Value               *string                 `json:"value,omitempty"`
	ValueImage          *string                 `json:"value_image,omitempty"`
}

// SubjectResource defines model for subject.Resource.
type SubjectResource struct {
	Metadata *map[string]string `json:"metadata,omitempty"`
	Url      *string            `json:"url,omitempty"`
}

// SubjectStudyData defines model for subject.StudyData.
type SubjectStudyData struct {
	Items    []SubjectStudyItem `json:"items"`
	Kind     string             `json:"kind"`
	Mnemonic string             `json:"mnemonic"`
}

// SubjectStudyItem defines model for subject.StudyItem.
type SubjectStudyItem struct {
	Category      *string `json:"category,omitempty"`
	IsHidden      bool    `json:"is_hidden"`
	IsPrimary     bool    `json:"is_primary"`
	IsValidAnswer bool    `json:"is_valid_answer"`
	Resource      *string `json:"resource,omitempty"`
	Value         string  `json:"value"`
}

// SubjectUpdateRequest defines model for subject.UpdateRequest.
type SubjectUpdateRequest struct {
	AdditionalStudyData *map[string]interface{} `json:"additional_study_data,omitempty"`
	Dependencies        *[]openapi_types.UUID   `json:"dependencies,omitempty"`
	Dependents          *[]openapi_types.UUID   `json:"dependents,omitempty"`
	Kind                *string                 `json:"kind,omitempty"`
	Level               *int32                  `json:"level,omitempty"`
	Name                *string                 `json:"name,omitempty"`
	Priority            *uint8                  `json:"priority,omitempty"`
	Resources           *[]SubjectResource      `json:"resources,omitempty"`
	Similars            *[]openapi_types.UUID   `json:"similars,omitempty"`
	Slug                *string                 `json:"slug,omitempty"`
	StudyData           *[]SubjectStudyData     `json:"study_data,omitempty"`
	Value               *string                 `json:"value,omitempty"`
	ValueImage          *string                 `json:"value_image,omitempty"`
}

// SubjectUpdateResponse defines model for subject.UpdateResponse.
type SubjectUpdateResponse = SubjectModel

// GetDecksParams defines parameters for GetDecks.
type GetDecksParams struct {
	Ids      *string `form:"ids,omitempty" json:"ids,omitempty"`
	Subjects *string `form:"subjects,omitempty" json:"subjects,omitempty"`
	Owners   *string `form:"owners,omitempty" json:"owners,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	Names    *string `form:"names,omitempty" json:"names,omitempty"`
}

// GetSubjectsParams defines parameters for GetSubjects.
type GetSubjectsParams struct {
	Decks  *string `form:"decks,omitempty" json:"decks,omitempty"`
	Ids    *string `form:"ids,omitempty" json:"ids,omitempty"`
	Kinds  *string `form:"kinds,omitempty" json:"kinds,omitempty"`
	Levels *string `form:"levels,omitempty" json:"levels,omitempty"`
	Owners *string `form:"owners,omitempty" json:"owners,omitempty"`
	Page   *int    `form:"page,omitempty" json:"page,omitempty"`
	Slugs  *string `form:"slugs,omitempty" json:"slugs,omitempty"`
}

// CreateDeckJSONRequestBody defines body for CreateDeck for application/json ContentType.
type CreateDeckJSONRequestBody = DeckCreateRequest

// CreateSubjectMultipartRequestBody defines body for CreateSubject for multipart/form-data ContentType.
type CreateSubjectMultipartRequestBody = SubjectCreateRequest

// UpdateSubjectJSONRequestBody defines body for UpdateSubject for application/json ContentType.
type UpdateSubjectJSONRequestBody = SubjectUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Query all decks
	// (GET /api/v1/decks)
	GetDecks(c *gin.Context, params GetDecksParams)
	// Create a new deck
	// (POST /api/v1/decks)
	CreateDeck(c *gin.Context)
	// Query a deck
	// (GET /api/v1/decks/{id})
	GetDeck(c *gin.Context, id string)
	// Query all subjects
	// (GET /api/v1/subjects)
	GetSubjects(c *gin.Context, params GetSubjectsParams)
	// Create a new subject
	// (POST /api/v1/subjects)
	CreateSubject(c *gin.Context)
	// Delete a subject
	// (DELETE /api/v1/subjects/{id})
	DeleteSubject(c *gin.Context, id string)
	// Query a subject
	// (GET /api/v1/subjects/{id})
	GetSubject(c *gin.Context, id string)
	// Update a subject
	// (PATCH /api/v1/subjects/{id})
	UpdateSubject(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetDecks operation middleware
func (siw *ServerInterfaceWrapper) GetDecks(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDecksParams

	// ------------- Optional query parameter "ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids", c.Request.URL.Query(), &params.Ids)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "subjects" -------------

	err = runtime.BindQueryParameter("form", true, false, "subjects", c.Request.URL.Query(), &params.Subjects)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter subjects: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "owners" -------------

	err = runtime.BindQueryParameter("form", true, false, "owners", c.Request.URL.Query(), &params.Owners)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter owners: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "names" -------------

	err = runtime.BindQueryParameter("form", true, false, "names", c.Request.URL.Query(), &params.Names)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter names: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDecks(c, params)
}

// CreateDeck operation middleware
func (siw *ServerInterfaceWrapper) CreateDeck(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{"deck:create"})

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateDeck(c)
}

// GetDeck operation middleware
func (siw *ServerInterfaceWrapper) GetDeck(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetDeck(c, id)
}

// GetSubjects operation middleware
func (siw *ServerInterfaceWrapper) GetSubjects(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubjectsParams

	// ------------- Optional query parameter "decks" -------------

	err = runtime.BindQueryParameter("form", true, false, "decks", c.Request.URL.Query(), &params.Decks)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter decks: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids", c.Request.URL.Query(), &params.Ids)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter ids: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "kinds" -------------

	err = runtime.BindQueryParameter("form", true, false, "kinds", c.Request.URL.Query(), &params.Kinds)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter kinds: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "levels" -------------

	err = runtime.BindQueryParameter("form", true, false, "levels", c.Request.URL.Query(), &params.Levels)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter levels: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "owners" -------------

	err = runtime.BindQueryParameter("form", true, false, "owners", c.Request.URL.Query(), &params.Owners)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter owners: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %s", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "slugs" -------------

	err = runtime.BindQueryParameter("form", true, false, "slugs", c.Request.URL.Query(), &params.Slugs)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter slugs: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSubjects(c, params)
}

// CreateSubject operation middleware
func (siw *ServerInterfaceWrapper) CreateSubject(c *gin.Context) {

	c.Set(ApiKeyScopes, []string{"subject:create"})

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateSubject(c)
}

// DeleteSubject operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubject(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{"subject:delete"})

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteSubject(c, id)
}

// GetSubject operation middleware
func (siw *ServerInterfaceWrapper) GetSubject(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetSubject(c, id)
}

// UpdateSubject operation middleware
func (siw *ServerInterfaceWrapper) UpdateSubject(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(ApiKeyScopes, []string{"subject:update"})

	c.Set(LoginScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateSubject(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/decks", wrapper.GetDecks)
	router.POST(options.BaseURL+"/api/v1/decks", wrapper.CreateDeck)
	router.GET(options.BaseURL+"/api/v1/decks/:id", wrapper.GetDeck)
	router.GET(options.BaseURL+"/api/v1/subjects", wrapper.GetSubjects)
	router.POST(options.BaseURL+"/api/v1/subjects", wrapper.CreateSubject)
	router.DELETE(options.BaseURL+"/api/v1/subjects/:id", wrapper.DeleteSubject)
	router.GET(options.BaseURL+"/api/v1/subjects/:id", wrapper.GetSubject)
	router.PATCH(options.BaseURL+"/api/v1/subjects/:id", wrapper.UpdateSubject)
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
