// Package cards provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package cards

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	ApiKeyScopes = "ApiKey.Scopes"
	LoginScopes  = "Login.Scopes"
)

// CommonErrorResponse defines model for common.ErrorResponse.
type CommonErrorResponse struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// CommonResponse defines model for common.Response.
type CommonResponse struct {
	Code int                    `json:"code"`
	Data map[string]interface{} `json:"data"`
}

// DeckCreateRequest defines model for deck.CreateRequest.
type DeckCreateRequest struct {
	Description string `json:"description"`
	Name        string `json:"name"`
}

// DeckCreateResponse defines model for deck.CreateResponse.
type DeckCreateResponse = DeckModel

// DeckGetAllResponse defines model for deck.GetAllResponse.
type DeckGetAllResponse struct {
	Decks *[]struct {
		Description *string             `json:"description,omitempty"`
		Id          *openapi_types.UUID `json:"id,omitempty"`
		Name        *string             `json:"name,omitempty"`
		Owner       *string             `json:"owner,omitempty"`
	} `json:"decks,omitempty"`
}

// DeckGetResponse defines model for deck.GetResponse.
type DeckGetResponse = DeckModel

// DeckModel defines model for deck.Model.
type DeckModel struct {
	CreatedAt   *string             `json:"created_at,omitempty"`
	Description *string             `json:"description,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        *string             `json:"name,omitempty"`
	Owner       *string             `json:"owner,omitempty"`
	Subjects    *[]string           `json:"subjects,omitempty"`
	UpdatedAt   *string             `json:"updated_at,omitempty"`
}

// SubjectCreateRequest defines model for subject.CreateRequest.
type SubjectCreateRequest struct {
	AdditionalStudyData *map[string]interface{} `form:"additional_study_data" json:"additional_study_data,omitempty"`
	Deck                openapi_types.UUID `form:"deck" json:"deck"`
	Dependencies        *SubjectIdList     `form:"dependencies" json:"dependencies,omitempty"`
	Dependents          *[]string     `form:"dependents" json:"dependents,omitempty"`
	Kind                string             `form:"kind" json:"kind"`
	Level               int32                   `form:"level" json:"level"`
	Name                string                  `form:"name" json:"name"`
	Priority            uint8                   `form:"priority" json:"priority"`

	// Resources The subject resources
	Resources *[]openapi_types.File `form:"resource" json:"resources,omitempty"`

	// ResourcesMeta Resources metadatas
	ResourcesMeta *struct {
		List []map[string]string `json:"list"`
	} `form:"resources_meta" json:"resources_meta,omitempty"`
	Similar   *SubjectIdList `form:"similar" json:"similar,omitempty"`
	Slug      string         `form:"slug" json:"slug"`
	StudyData *struct {
		List []SubjectStudyData `json:"list"`
	} `form:"study_data" json:"study_data,omitempty"`
	Value *string `form:"value" json:"value,omitempty"`

	// ValueImage The subject value image
	ValueImage *openapi_types.File `form:"value_image" json:"value_image,omitempty"`
}

// SubjectCreateResponse defines model for subject.CreateResponse.
type SubjectCreateResponse = SubjectModel

// SubjectGetAllResponse defines model for subject.GetAllResponse.
type SubjectGetAllResponse = []struct {
	Deck         openapi_types.UUID   `json:"deck"`
	Dependencies []openapi_types.UUID `json:"dependencies"`
	Dependents   []openapi_types.UUID `json:"dependents"`
	Id           openapi_types.UUID   `json:"id"`
	Kind         string               `json:"kind"`
	Level        int32                `json:"level"`
	Name         string               `json:"name"`
	Owner        string               `json:"owner"`
	Priority     uint8                `json:"priority"`
	Similars     []openapi_types.UUID `json:"similars"`
	Slug         string             `json:"slug"`
	StudyData    []SubjectStudyData `json:"study_data"`
	Value        *string            `json:"value,omitempty"`
	ValueImage   *string              `json:"value_image,omitempty"`
}

// SubjectGetResponse defines model for subject.GetResponse.
type SubjectGetResponse = SubjectModel

// SubjectIdList defines model for subject.IdList.
type SubjectIdList struct {
	List []openapi_types.UUID `json:"list"`
}

// SubjectModel defines model for subject.Model.
type SubjectModel struct {
	AdditionalStudyData *map[string]interface{} `json:"additional_study_data,omitempty"`
	CreatedAt           string                  `json:"created_at"`
	Deck                openapi_types.UUID      `json:"deck"`
	Dependencies        []openapi_types.UUID    `json:"dependencies"`
	Dependents          []openapi_types.UUID    `json:"dependents"`
	Id                  openapi_types.UUID      `json:"id"`
	Kind                string                  `json:"kind"`
	Level               int32                   `json:"level"`
	Name                string                  `json:"name"`
	Owner               string                  `json:"owner"`
	Priority            uint8                `json:"priority"`
	Resources           []SubjectResource    `json:"resources"`
	Similars            []openapi_types.UUID `json:"similars"`
	Slug                string               `json:"slug"`
	StudyData           []SubjectStudyData   `json:"study_data"`
	UpdatedAt           string               `json:"updated_at"`
	Value               *string                 `json:"value,omitempty"`
	ValueImage          *string                 `json:"value_image,omitempty"`
}

// SubjectResource defines model for subject.Resource.
type SubjectResource struct {
	Metadata *map[string]string `json:"metadata,omitempty"`
	Url      *string            `json:"url,omitempty"`
}

// SubjectStudyData defines model for subject.StudyData.
type SubjectStudyData struct {
	Items    []SubjectStudyItem `json:"items"`
	Kind     string             `json:"kind"`
	Mnemonic string             `json:"mnemonic"`
}

// SubjectStudyItem defines model for subject.StudyItem.
type SubjectStudyItem struct {
	Category      *string `json:"category,omitempty"`
	IsHidden      bool    `json:"is_hidden"`
	IsPrimary     bool    `json:"is_primary"`
	IsValidAnswer bool    `json:"is_valid_answer"`
	Resource      *string `json:"resource,omitempty"`
	Value         string  `json:"value"`
}

// SubjectUpdateRequest defines model for subject.UpdateRequest.
type SubjectUpdateRequest struct {
	AdditionalStudyData *map[string]interface{} `json:"additional_study_data,omitempty"`
	Dependencies        *[]openapi_types.UUID   `json:"dependencies,omitempty"`
	Dependents          *[]openapi_types.UUID   `json:"dependents,omitempty"`
	Kind                *string                 `json:"kind,omitempty"`
	Level               *int32                  `json:"level,omitempty"`
	Name                *string                 `json:"name,omitempty"`
	Priority            *uint8                `json:"priority,omitempty"`
	Resources           *[]SubjectResource    `json:"resources,omitempty"`
	Similars            *[]openapi_types.UUID `json:"similars,omitempty"`
	Slug                *string               `json:"slug,omitempty"`
	StudyData           *[]SubjectStudyData   `json:"study_data,omitempty"`
	Value               *string               `json:"value,omitempty"`
	ValueImage          *string                 `json:"value_image,omitempty"`
}

// SubjectUpdateResponse defines model for subject.UpdateResponse.
type SubjectUpdateResponse = SubjectModel

// GetDecksParams defines parameters for GetDecks.
type GetDecksParams struct {
	Ids      *string `form:"ids,omitempty" json:"ids,omitempty"`
	Subjects *string `form:"subjects,omitempty" json:"subjects,omitempty"`
	Owners   *string `form:"owners,omitempty" json:"owners,omitempty"`
	Page     *uint   `form:"page,omitempty" json:"page,omitempty"`
	Names    *string `form:"names,omitempty" json:"names,omitempty"`
}

// GetSubjectsParams defines parameters for GetSubjects.
type GetSubjectsParams struct {
	Decks  *string `form:"decks,omitempty" json:"decks,omitempty"`
	Ids    *string `form:"ids,omitempty" json:"ids,omitempty"`
	Kinds  *string `form:"kinds,omitempty" json:"kinds,omitempty"`
	Levels *string `form:"levels,omitempty" json:"levels,omitempty"`
	Owners *string `form:"owners,omitempty" json:"owners,omitempty"`
	Page   *int    `form:"page,omitempty" json:"page,omitempty"`
	Slugs  *string `form:"slugs,omitempty" json:"slugs,omitempty"`
}

// CreateDeckJSONRequestBody defines body for CreateDeck for application/json ContentType.
type CreateDeckJSONRequestBody = DeckCreateRequest

// CreateSubjectMultipartRequestBody defines body for CreateSubject for multipart/form-data ContentType.
type CreateSubjectMultipartRequestBody = SubjectCreateRequest

// UpdateSubjectJSONRequestBody defines body for UpdateSubject for application/json ContentType.
type UpdateSubjectJSONRequestBody = SubjectUpdateRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Query all decks
	// (GET /api/v1/decks)
	GetDecks(ctx echo.Context, params GetDecksParams) error
	// Create a new deck
	// (POST /api/v1/decks)
	CreateDeck(ctx echo.Context) error
	// Query a deck
	// (GET /api/v1/decks/{id})
	GetDeck(ctx echo.Context, id string) error
	// Query all subjects
	// (GET /api/v1/subjects)
	GetSubjects(ctx echo.Context, params GetSubjectsParams) error
	// Create a new subject
	// (POST /api/v1/subjects)
	CreateSubject(ctx echo.Context) error
	// Delete a subject
	// (DELETE /api/v1/subjects/{id})
	DeleteSubject(ctx echo.Context, id string) error
	// Query a subject
	// (GET /api/v1/subjects/{id})
	GetSubject(ctx echo.Context, id string) error
	// Update a subject
	// (PATCH /api/v1/subjects/{id})
	UpdateSubject(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetDecks converts echo context to params.
func (w *ServerInterfaceWrapper) GetDecks(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDecksParams
	// ------------- Optional query parameter "ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids", ctx.QueryParams(), &params.Ids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ids: %s", err))
	}

	// ------------- Optional query parameter "subjects" -------------

	err = runtime.BindQueryParameter("form", true, false, "subjects", ctx.QueryParams(), &params.Subjects)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter subjects: %s", err))
	}

	// ------------- Optional query parameter "owners" -------------

	err = runtime.BindQueryParameter("form", true, false, "owners", ctx.QueryParams(), &params.Owners)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter owners: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "names" -------------

	err = runtime.BindQueryParameter("form", true, false, "names", ctx.QueryParams(), &params.Names)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter names: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDecks(ctx, params)
	return err
}

// CreateDeck converts echo context to params.
func (w *ServerInterfaceWrapper) CreateDeck(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{"deck:create"})

	ctx.Set(LoginScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateDeck(ctx)
	return err
}

// GetDeck converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeck(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeck(ctx, id)
	return err
}

// GetSubjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubjects(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSubjectsParams
	// ------------- Optional query parameter "decks" -------------

	err = runtime.BindQueryParameter("form", true, false, "decks", ctx.QueryParams(), &params.Decks)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter decks: %s", err))
	}

	// ------------- Optional query parameter "ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "ids", ctx.QueryParams(), &params.Ids)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ids: %s", err))
	}

	// ------------- Optional query parameter "kinds" -------------

	err = runtime.BindQueryParameter("form", true, false, "kinds", ctx.QueryParams(), &params.Kinds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter kinds: %s", err))
	}

	// ------------- Optional query parameter "levels" -------------

	err = runtime.BindQueryParameter("form", true, false, "levels", ctx.QueryParams(), &params.Levels)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter levels: %s", err))
	}

	// ------------- Optional query parameter "owners" -------------

	err = runtime.BindQueryParameter("form", true, false, "owners", ctx.QueryParams(), &params.Owners)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter owners: %s", err))
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "slugs" -------------

	err = runtime.BindQueryParameter("form", true, false, "slugs", ctx.QueryParams(), &params.Slugs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slugs: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubjects(ctx, params)
	return err
}

// CreateSubject converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSubject(ctx echo.Context) error {
	var err error

	ctx.Set(ApiKeyScopes, []string{"subject:create"})

	ctx.Set(LoginScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSubject(ctx)
	return err
}

// DeleteSubject converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSubject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyScopes, []string{"subject:delete"})

	ctx.Set(LoginScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSubject(ctx, id)
	return err
}

// GetSubject converts echo context to params.
func (w *ServerInterfaceWrapper) GetSubject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSubject(ctx, id)
	return err
}

// UpdateSubject converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSubject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(ApiKeyScopes, []string{"subject:update"})

	ctx.Set(LoginScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSubject(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/api/v1/decks", wrapper.GetDecks)
	router.POST(baseURL+"/api/v1/decks", wrapper.CreateDeck)
	router.GET(baseURL+"/api/v1/decks/:id", wrapper.GetDeck)
	router.GET(baseURL+"/api/v1/subjects", wrapper.GetSubjects)
	router.POST(baseURL+"/api/v1/subjects", wrapper.CreateSubject)
	router.DELETE(baseURL+"/api/v1/subjects/:id", wrapper.DeleteSubject)
	router.GET(baseURL+"/api/v1/subjects/:id", wrapper.GetSubject)
	router.PATCH(baseURL+"/api/v1/subjects/:id", wrapper.UpdateSubject)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//wiXTEsMQgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
