// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"sixels.io/manekani/ent/card"
	"sixels.io/manekani/ent/deck"
	"sixels.io/manekani/ent/deckprogress"
	"sixels.io/manekani/ent/predicate"
	"sixels.io/manekani/ent/user"
)

// DeckProgressUpdate is the builder for updating DeckProgress entities.
type DeckProgressUpdate struct {
	config
	hooks    []Hook
	mutation *DeckProgressMutation
}

// Where appends a list predicates to the DeckProgressUpdate builder.
func (dpu *DeckProgressUpdate) Where(ps ...predicate.DeckProgress) *DeckProgressUpdate {
	dpu.mutation.Where(ps...)
	return dpu
}

// SetLevel sets the "level" field.
func (dpu *DeckProgressUpdate) SetLevel(u uint32) *DeckProgressUpdate {
	dpu.mutation.ResetLevel()
	dpu.mutation.SetLevel(u)
	return dpu
}

// AddLevel adds u to the "level" field.
func (dpu *DeckProgressUpdate) AddLevel(u int32) *DeckProgressUpdate {
	dpu.mutation.AddLevel(u)
	return dpu
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (dpu *DeckProgressUpdate) AddCardIDs(ids ...uuid.UUID) *DeckProgressUpdate {
	dpu.mutation.AddCardIDs(ids...)
	return dpu
}

// AddCards adds the "cards" edges to the Card entity.
func (dpu *DeckProgressUpdate) AddCards(c ...*Card) *DeckProgressUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dpu.AddCardIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (dpu *DeckProgressUpdate) SetUserID(id string) *DeckProgressUpdate {
	dpu.mutation.SetUserID(id)
	return dpu
}

// SetUser sets the "user" edge to the User entity.
func (dpu *DeckProgressUpdate) SetUser(u *User) *DeckProgressUpdate {
	return dpu.SetUserID(u.ID)
}

// SetDeckID sets the "deck" edge to the Deck entity by ID.
func (dpu *DeckProgressUpdate) SetDeckID(id uuid.UUID) *DeckProgressUpdate {
	dpu.mutation.SetDeckID(id)
	return dpu
}

// SetDeck sets the "deck" edge to the Deck entity.
func (dpu *DeckProgressUpdate) SetDeck(d *Deck) *DeckProgressUpdate {
	return dpu.SetDeckID(d.ID)
}

// Mutation returns the DeckProgressMutation object of the builder.
func (dpu *DeckProgressUpdate) Mutation() *DeckProgressMutation {
	return dpu.mutation
}

// ClearCards clears all "cards" edges to the Card entity.
func (dpu *DeckProgressUpdate) ClearCards() *DeckProgressUpdate {
	dpu.mutation.ClearCards()
	return dpu
}

// RemoveCardIDs removes the "cards" edge to Card entities by IDs.
func (dpu *DeckProgressUpdate) RemoveCardIDs(ids ...uuid.UUID) *DeckProgressUpdate {
	dpu.mutation.RemoveCardIDs(ids...)
	return dpu
}

// RemoveCards removes "cards" edges to Card entities.
func (dpu *DeckProgressUpdate) RemoveCards(c ...*Card) *DeckProgressUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dpu.RemoveCardIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (dpu *DeckProgressUpdate) ClearUser() *DeckProgressUpdate {
	dpu.mutation.ClearUser()
	return dpu
}

// ClearDeck clears the "deck" edge to the Deck entity.
func (dpu *DeckProgressUpdate) ClearDeck() *DeckProgressUpdate {
	dpu.mutation.ClearDeck()
	return dpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (dpu *DeckProgressUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(dpu.hooks) == 0 {
		if err = dpu.check(); err != nil {
			return 0, err
		}
		affected, err = dpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeckProgressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpu.check(); err != nil {
				return 0, err
			}
			dpu.mutation = mutation
			affected, err = dpu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(dpu.hooks) - 1; i >= 0; i-- {
			if dpu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpu *DeckProgressUpdate) SaveX(ctx context.Context) int {
	affected, err := dpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (dpu *DeckProgressUpdate) Exec(ctx context.Context) error {
	_, err := dpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpu *DeckProgressUpdate) ExecX(ctx context.Context) {
	if err := dpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpu *DeckProgressUpdate) check() error {
	if v, ok := dpu.mutation.Level(); ok {
		if err := deckprogress.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "DeckProgress.level": %w`, err)}
		}
	}
	if _, ok := dpu.mutation.UserID(); dpu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeckProgress.user"`)
	}
	if _, ok := dpu.mutation.DeckID(); dpu.mutation.DeckCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeckProgress.deck"`)
	}
	return nil
}

func (dpu *DeckProgressUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deckprogress.Table,
			Columns: deckprogress.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deckprogress.FieldID,
			},
		},
	}
	if ps := dpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpu.mutation.Level(); ok {
		_spec.SetField(deckprogress.FieldLevel, field.TypeUint32, value)
	}
	if value, ok := dpu.mutation.AddedLevel(); ok {
		_spec.AddField(deckprogress.FieldLevel, field.TypeUint32, value)
	}
	if dpu.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deckprogress.CardsTable,
			Columns: []string{deckprogress.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.RemovedCardsIDs(); len(nodes) > 0 && !dpu.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deckprogress.CardsTable,
			Columns: []string{deckprogress.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deckprogress.CardsTable,
			Columns: []string{deckprogress.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckprogress.UserTable,
			Columns: []string{deckprogress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckprogress.UserTable,
			Columns: []string{deckprogress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpu.mutation.DeckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckprogress.DeckTable,
			Columns: []string{deckprogress.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpu.mutation.DeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckprogress.DeckTable,
			Columns: []string{deckprogress.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, dpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deckprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// DeckProgressUpdateOne is the builder for updating a single DeckProgress entity.
type DeckProgressUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DeckProgressMutation
}

// SetLevel sets the "level" field.
func (dpuo *DeckProgressUpdateOne) SetLevel(u uint32) *DeckProgressUpdateOne {
	dpuo.mutation.ResetLevel()
	dpuo.mutation.SetLevel(u)
	return dpuo
}

// AddLevel adds u to the "level" field.
func (dpuo *DeckProgressUpdateOne) AddLevel(u int32) *DeckProgressUpdateOne {
	dpuo.mutation.AddLevel(u)
	return dpuo
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (dpuo *DeckProgressUpdateOne) AddCardIDs(ids ...uuid.UUID) *DeckProgressUpdateOne {
	dpuo.mutation.AddCardIDs(ids...)
	return dpuo
}

// AddCards adds the "cards" edges to the Card entity.
func (dpuo *DeckProgressUpdateOne) AddCards(c ...*Card) *DeckProgressUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dpuo.AddCardIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (dpuo *DeckProgressUpdateOne) SetUserID(id string) *DeckProgressUpdateOne {
	dpuo.mutation.SetUserID(id)
	return dpuo
}

// SetUser sets the "user" edge to the User entity.
func (dpuo *DeckProgressUpdateOne) SetUser(u *User) *DeckProgressUpdateOne {
	return dpuo.SetUserID(u.ID)
}

// SetDeckID sets the "deck" edge to the Deck entity by ID.
func (dpuo *DeckProgressUpdateOne) SetDeckID(id uuid.UUID) *DeckProgressUpdateOne {
	dpuo.mutation.SetDeckID(id)
	return dpuo
}

// SetDeck sets the "deck" edge to the Deck entity.
func (dpuo *DeckProgressUpdateOne) SetDeck(d *Deck) *DeckProgressUpdateOne {
	return dpuo.SetDeckID(d.ID)
}

// Mutation returns the DeckProgressMutation object of the builder.
func (dpuo *DeckProgressUpdateOne) Mutation() *DeckProgressMutation {
	return dpuo.mutation
}

// ClearCards clears all "cards" edges to the Card entity.
func (dpuo *DeckProgressUpdateOne) ClearCards() *DeckProgressUpdateOne {
	dpuo.mutation.ClearCards()
	return dpuo
}

// RemoveCardIDs removes the "cards" edge to Card entities by IDs.
func (dpuo *DeckProgressUpdateOne) RemoveCardIDs(ids ...uuid.UUID) *DeckProgressUpdateOne {
	dpuo.mutation.RemoveCardIDs(ids...)
	return dpuo
}

// RemoveCards removes "cards" edges to Card entities.
func (dpuo *DeckProgressUpdateOne) RemoveCards(c ...*Card) *DeckProgressUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dpuo.RemoveCardIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (dpuo *DeckProgressUpdateOne) ClearUser() *DeckProgressUpdateOne {
	dpuo.mutation.ClearUser()
	return dpuo
}

// ClearDeck clears the "deck" edge to the Deck entity.
func (dpuo *DeckProgressUpdateOne) ClearDeck() *DeckProgressUpdateOne {
	dpuo.mutation.ClearDeck()
	return dpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (dpuo *DeckProgressUpdateOne) Select(field string, fields ...string) *DeckProgressUpdateOne {
	dpuo.fields = append([]string{field}, fields...)
	return dpuo
}

// Save executes the query and returns the updated DeckProgress entity.
func (dpuo *DeckProgressUpdateOne) Save(ctx context.Context) (*DeckProgress, error) {
	var (
		err  error
		node *DeckProgress
	)
	if len(dpuo.hooks) == 0 {
		if err = dpuo.check(); err != nil {
			return nil, err
		}
		node, err = dpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DeckProgressMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = dpuo.check(); err != nil {
				return nil, err
			}
			dpuo.mutation = mutation
			node, err = dpuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dpuo.hooks) - 1; i >= 0; i-- {
			if dpuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = dpuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, dpuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*DeckProgress)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from DeckProgressMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (dpuo *DeckProgressUpdateOne) SaveX(ctx context.Context) *DeckProgress {
	node, err := dpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (dpuo *DeckProgressUpdateOne) Exec(ctx context.Context) error {
	_, err := dpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dpuo *DeckProgressUpdateOne) ExecX(ctx context.Context) {
	if err := dpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dpuo *DeckProgressUpdateOne) check() error {
	if v, ok := dpuo.mutation.Level(); ok {
		if err := deckprogress.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "DeckProgress.level": %w`, err)}
		}
	}
	if _, ok := dpuo.mutation.UserID(); dpuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeckProgress.user"`)
	}
	if _, ok := dpuo.mutation.DeckID(); dpuo.mutation.DeckCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "DeckProgress.deck"`)
	}
	return nil
}

func (dpuo *DeckProgressUpdateOne) sqlSave(ctx context.Context) (_node *DeckProgress, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   deckprogress.Table,
			Columns: deckprogress.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: deckprogress.FieldID,
			},
		},
	}
	id, ok := dpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "DeckProgress.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := dpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deckprogress.FieldID)
		for _, f := range fields {
			if !deckprogress.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deckprogress.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := dpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := dpuo.mutation.Level(); ok {
		_spec.SetField(deckprogress.FieldLevel, field.TypeUint32, value)
	}
	if value, ok := dpuo.mutation.AddedLevel(); ok {
		_spec.AddField(deckprogress.FieldLevel, field.TypeUint32, value)
	}
	if dpuo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deckprogress.CardsTable,
			Columns: []string{deckprogress.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.RemovedCardsIDs(); len(nodes) > 0 && !dpuo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deckprogress.CardsTable,
			Columns: []string{deckprogress.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   deckprogress.CardsTable,
			Columns: []string{deckprogress.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckprogress.UserTable,
			Columns: []string{deckprogress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckprogress.UserTable,
			Columns: []string{deckprogress.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if dpuo.mutation.DeckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckprogress.DeckTable,
			Columns: []string{deckprogress.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := dpuo.mutation.DeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   deckprogress.DeckTable,
			Columns: []string{deckprogress.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &DeckProgress{config: dpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, dpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deckprogress.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
