// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"sixels.io/manekani/ent/card"
	"sixels.io/manekani/ent/deckprogress"
	"sixels.io/manekani/ent/review"
	"sixels.io/manekani/ent/subject"
)

// CardCreate is the builder for creating a Card entity.
type CardCreate struct {
	config
	mutation *CardMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *CardCreate) SetCreatedAt(t time.Time) *CardCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CardCreate) SetNillableCreatedAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CardCreate) SetUpdatedAt(t time.Time) *CardCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CardCreate) SetNillableUpdatedAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetProgress sets the "progress" field.
func (cc *CardCreate) SetProgress(u uint8) *CardCreate {
	cc.mutation.SetProgress(u)
	return cc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (cc *CardCreate) SetNillableProgress(u *uint8) *CardCreate {
	if u != nil {
		cc.SetProgress(*u)
	}
	return cc
}

// SetTotalErrors sets the "total_errors" field.
func (cc *CardCreate) SetTotalErrors(i int32) *CardCreate {
	cc.mutation.SetTotalErrors(i)
	return cc
}

// SetNillableTotalErrors sets the "total_errors" field if the given value is not nil.
func (cc *CardCreate) SetNillableTotalErrors(i *int32) *CardCreate {
	if i != nil {
		cc.SetTotalErrors(*i)
	}
	return cc
}

// SetUnlockedAt sets the "unlocked_at" field.
func (cc *CardCreate) SetUnlockedAt(t time.Time) *CardCreate {
	cc.mutation.SetUnlockedAt(t)
	return cc
}

// SetNillableUnlockedAt sets the "unlocked_at" field if the given value is not nil.
func (cc *CardCreate) SetNillableUnlockedAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetUnlockedAt(*t)
	}
	return cc
}

// SetStartedAt sets the "started_at" field.
func (cc *CardCreate) SetStartedAt(t time.Time) *CardCreate {
	cc.mutation.SetStartedAt(t)
	return cc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cc *CardCreate) SetNillableStartedAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetStartedAt(*t)
	}
	return cc
}

// SetPassedAt sets the "passed_at" field.
func (cc *CardCreate) SetPassedAt(t time.Time) *CardCreate {
	cc.mutation.SetPassedAt(t)
	return cc
}

// SetNillablePassedAt sets the "passed_at" field if the given value is not nil.
func (cc *CardCreate) SetNillablePassedAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetPassedAt(*t)
	}
	return cc
}

// SetAvailableAt sets the "available_at" field.
func (cc *CardCreate) SetAvailableAt(t time.Time) *CardCreate {
	cc.mutation.SetAvailableAt(t)
	return cc
}

// SetNillableAvailableAt sets the "available_at" field if the given value is not nil.
func (cc *CardCreate) SetNillableAvailableAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetAvailableAt(*t)
	}
	return cc
}

// SetBurnedAt sets the "burned_at" field.
func (cc *CardCreate) SetBurnedAt(t time.Time) *CardCreate {
	cc.mutation.SetBurnedAt(t)
	return cc
}

// SetNillableBurnedAt sets the "burned_at" field if the given value is not nil.
func (cc *CardCreate) SetNillableBurnedAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetBurnedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CardCreate) SetID(u uuid.UUID) *CardCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CardCreate) SetNillableID(u *uuid.UUID) *CardCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetDeckProgressID sets the "deck_progress" edge to the DeckProgress entity by ID.
func (cc *CardCreate) SetDeckProgressID(id int) *CardCreate {
	cc.mutation.SetDeckProgressID(id)
	return cc
}

// SetNillableDeckProgressID sets the "deck_progress" edge to the DeckProgress entity by ID if the given value is not nil.
func (cc *CardCreate) SetNillableDeckProgressID(id *int) *CardCreate {
	if id != nil {
		cc = cc.SetDeckProgressID(*id)
	}
	return cc
}

// SetDeckProgress sets the "deck_progress" edge to the DeckProgress entity.
func (cc *CardCreate) SetDeckProgress(d *DeckProgress) *CardCreate {
	return cc.SetDeckProgressID(d.ID)
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (cc *CardCreate) SetSubjectID(id uuid.UUID) *CardCreate {
	cc.mutation.SetSubjectID(id)
	return cc
}

// SetSubject sets the "subject" edge to the Subject entity.
func (cc *CardCreate) SetSubject(s *Subject) *CardCreate {
	return cc.SetSubjectID(s.ID)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (cc *CardCreate) AddReviewIDs(ids ...uuid.UUID) *CardCreate {
	cc.mutation.AddReviewIDs(ids...)
	return cc
}

// AddReviews adds the "reviews" edges to the Review entity.
func (cc *CardCreate) AddReviews(r ...*Review) *CardCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cc.AddReviewIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (cc *CardCreate) Mutation() *CardMutation {
	return cc.mutation
}

// Save creates the Card in the database.
func (cc *CardCreate) Save(ctx context.Context) (*Card, error) {
	var (
		err  error
		node *Card
	)
	cc.defaults()
	if len(cc.hooks) == 0 {
		if err = cc.check(); err != nil {
			return nil, err
		}
		node, err = cc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cc.check(); err != nil {
				return nil, err
			}
			cc.mutation = mutation
			if node, err = cc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cc.hooks) - 1; i >= 0; i-- {
			if cc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Card)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CardMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CardCreate) SaveX(ctx context.Context) *Card {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CardCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CardCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CardCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := card.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := card.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Progress(); !ok {
		v := card.DefaultProgress
		cc.mutation.SetProgress(v)
	}
	if _, ok := cc.mutation.TotalErrors(); !ok {
		v := card.DefaultTotalErrors
		cc.mutation.SetTotalErrors(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := card.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CardCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Card.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Card.updated_at"`)}
	}
	if _, ok := cc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "Card.progress"`)}
	}
	if _, ok := cc.mutation.TotalErrors(); !ok {
		return &ValidationError{Name: "total_errors", err: errors.New(`ent: missing required field "Card.total_errors"`)}
	}
	if _, ok := cc.mutation.SubjectID(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required edge "Card.subject"`)}
	}
	return nil
}

func (cc *CardCreate) sqlSave(ctx context.Context) (*Card, error) {
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (cc *CardCreate) createSpec() (*Card, *sqlgraph.CreateSpec) {
	var (
		_node = &Card{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: card.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: card.FieldID,
			},
		}
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(card.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(card.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Progress(); ok {
		_spec.SetField(card.FieldProgress, field.TypeUint8, value)
		_node.Progress = value
	}
	if value, ok := cc.mutation.TotalErrors(); ok {
		_spec.SetField(card.FieldTotalErrors, field.TypeInt32, value)
		_node.TotalErrors = value
	}
	if value, ok := cc.mutation.UnlockedAt(); ok {
		_spec.SetField(card.FieldUnlockedAt, field.TypeTime, value)
		_node.UnlockedAt = &value
	}
	if value, ok := cc.mutation.StartedAt(); ok {
		_spec.SetField(card.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := cc.mutation.PassedAt(); ok {
		_spec.SetField(card.FieldPassedAt, field.TypeTime, value)
		_node.PassedAt = &value
	}
	if value, ok := cc.mutation.AvailableAt(); ok {
		_spec.SetField(card.FieldAvailableAt, field.TypeTime, value)
		_node.AvailableAt = &value
	}
	if value, ok := cc.mutation.BurnedAt(); ok {
		_spec.SetField(card.FieldBurnedAt, field.TypeTime, value)
		_node.BurnedAt = &value
	}
	if nodes := cc.mutation.DeckProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.DeckProgressTable,
			Columns: []string{card.DeckProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckprogress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deck_progress_cards = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.SubjectTable,
			Columns: []string{card.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.subject_cards = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.ReviewsTable,
			Columns: []string{card.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: review.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CardCreateBulk is the builder for creating many Card entities in bulk.
type CardCreateBulk struct {
	config
	builders []*CardCreate
}

// Save creates the Card entities in the database.
func (ccb *CardCreateBulk) Save(ctx context.Context) ([]*Card, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Card, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CardCreateBulk) SaveX(ctx context.Context) []*Card {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CardCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CardCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
