// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"sixels.io/manekani/ent/apitoken"
	"sixels.io/manekani/ent/deck"
	"sixels.io/manekani/ent/deckprogress"
	"sixels.io/manekani/ent/predicate"
	"sixels.io/manekani/ent/schema"
	"sixels.io/manekani/ent/subject"
	"sixels.io/manekani/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUsername sets the "username" field.
func (uu *UserUpdate) SetUsername(s string) *UserUpdate {
	uu.mutation.SetUsername(s)
	return uu
}

// SetPendingActions sets the "pending_actions" field.
func (uu *UserUpdate) SetPendingActions(sa []schema.PendingAction) *UserUpdate {
	uu.mutation.SetPendingActions(sa)
	return uu
}

// AppendPendingActions appends sa to the "pending_actions" field.
func (uu *UserUpdate) AppendPendingActions(sa []schema.PendingAction) *UserUpdate {
	uu.mutation.AppendPendingActions(sa)
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// AddDeckIDs adds the "decks" edge to the Deck entity by IDs.
func (uu *UserUpdate) AddDeckIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddDeckIDs(ids...)
	return uu
}

// AddDecks adds the "decks" edges to the Deck entity.
func (uu *UserUpdate) AddDecks(d ...*Deck) *UserUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddDeckIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (uu *UserUpdate) AddSubjectIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddSubjectIDs(ids...)
	return uu
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (uu *UserUpdate) AddSubjects(s ...*Subject) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSubjectIDs(ids...)
}

// AddSubscribedDeckIDs adds the "subscribed_decks" edge to the Deck entity by IDs.
func (uu *UserUpdate) AddSubscribedDeckIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddSubscribedDeckIDs(ids...)
	return uu
}

// AddSubscribedDecks adds the "subscribed_decks" edges to the Deck entity.
func (uu *UserUpdate) AddSubscribedDecks(d ...*Deck) *UserUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddSubscribedDeckIDs(ids...)
}

// AddAPITokenIDs adds the "api_tokens" edge to the ApiToken entity by IDs.
func (uu *UserUpdate) AddAPITokenIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.AddAPITokenIDs(ids...)
	return uu
}

// AddAPITokens adds the "api_tokens" edges to the ApiToken entity.
func (uu *UserUpdate) AddAPITokens(a ...*ApiToken) *UserUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.AddAPITokenIDs(ids...)
}

// AddDecksProgresIDs adds the "decks_progress" edge to the DeckProgress entity by IDs.
func (uu *UserUpdate) AddDecksProgresIDs(ids ...int) *UserUpdate {
	uu.mutation.AddDecksProgresIDs(ids...)
	return uu
}

// AddDecksProgress adds the "decks_progress" edges to the DeckProgress entity.
func (uu *UserUpdate) AddDecksProgress(d ...*DeckProgress) *UserUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.AddDecksProgresIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearDecks clears all "decks" edges to the Deck entity.
func (uu *UserUpdate) ClearDecks() *UserUpdate {
	uu.mutation.ClearDecks()
	return uu
}

// RemoveDeckIDs removes the "decks" edge to Deck entities by IDs.
func (uu *UserUpdate) RemoveDeckIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveDeckIDs(ids...)
	return uu
}

// RemoveDecks removes "decks" edges to Deck entities.
func (uu *UserUpdate) RemoveDecks(d ...*Deck) *UserUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveDeckIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the Subject entity.
func (uu *UserUpdate) ClearSubjects() *UserUpdate {
	uu.mutation.ClearSubjects()
	return uu
}

// RemoveSubjectIDs removes the "subjects" edge to Subject entities by IDs.
func (uu *UserUpdate) RemoveSubjectIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveSubjectIDs(ids...)
	return uu
}

// RemoveSubjects removes "subjects" edges to Subject entities.
func (uu *UserUpdate) RemoveSubjects(s ...*Subject) *UserUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSubjectIDs(ids...)
}

// ClearSubscribedDecks clears all "subscribed_decks" edges to the Deck entity.
func (uu *UserUpdate) ClearSubscribedDecks() *UserUpdate {
	uu.mutation.ClearSubscribedDecks()
	return uu
}

// RemoveSubscribedDeckIDs removes the "subscribed_decks" edge to Deck entities by IDs.
func (uu *UserUpdate) RemoveSubscribedDeckIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveSubscribedDeckIDs(ids...)
	return uu
}

// RemoveSubscribedDecks removes "subscribed_decks" edges to Deck entities.
func (uu *UserUpdate) RemoveSubscribedDecks(d ...*Deck) *UserUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveSubscribedDeckIDs(ids...)
}

// ClearAPITokens clears all "api_tokens" edges to the ApiToken entity.
func (uu *UserUpdate) ClearAPITokens() *UserUpdate {
	uu.mutation.ClearAPITokens()
	return uu
}

// RemoveAPITokenIDs removes the "api_tokens" edge to ApiToken entities by IDs.
func (uu *UserUpdate) RemoveAPITokenIDs(ids ...uuid.UUID) *UserUpdate {
	uu.mutation.RemoveAPITokenIDs(ids...)
	return uu
}

// RemoveAPITokens removes "api_tokens" edges to ApiToken entities.
func (uu *UserUpdate) RemoveAPITokens(a ...*ApiToken) *UserUpdate {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uu.RemoveAPITokenIDs(ids...)
}

// ClearDecksProgress clears all "decks_progress" edges to the DeckProgress entity.
func (uu *UserUpdate) ClearDecksProgress() *UserUpdate {
	uu.mutation.ClearDecksProgress()
	return uu
}

// RemoveDecksProgresIDs removes the "decks_progress" edge to DeckProgress entities by IDs.
func (uu *UserUpdate) RemoveDecksProgresIDs(ids ...int) *UserUpdate {
	uu.mutation.RemoveDecksProgresIDs(ids...)
	return uu
}

// RemoveDecksProgress removes "decks_progress" edges to DeckProgress entities.
func (uu *UserUpdate) RemoveDecksProgress(d ...*DeckProgress) *UserUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uu.RemoveDecksProgresIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		if err = uu.check(); err != nil {
			return 0, err
		}
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uu.check(); err != nil {
				return 0, err
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			if uu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uu.mutation.PendingActions(); ok {
		_spec.SetField(user.FieldPendingActions, field.TypeJSON, value)
	}
	if value, ok := uu.mutation.AppendedPendingActions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldPendingActions, value)
		})
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uu.mutation.DecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedDecksIDs(); len(nodes) > 0 && !uu.mutation.DecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubjectsTable,
			Columns: []string{user.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !uu.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubjectsTable,
			Columns: []string{user.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubjectsTable,
			Columns: []string{user.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SubscribedDecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.SubscribedDecksTable,
			Columns: user.SubscribedDecksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSubscribedDecksIDs(); len(nodes) > 0 && !uu.mutation.SubscribedDecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.SubscribedDecksTable,
			Columns: user.SubscribedDecksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SubscribedDecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.SubscribedDecksTable,
			Columns: user.SubscribedDecksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedAPITokensIDs(); len(nodes) > 0 && !uu.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.DecksProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksProgressTable,
			Columns: []string{user.DecksProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckprogress.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedDecksProgressIDs(); len(nodes) > 0 && !uu.mutation.DecksProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksProgressTable,
			Columns: []string{user.DecksProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckprogress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.DecksProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksProgressTable,
			Columns: []string{user.DecksProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckprogress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUsername sets the "username" field.
func (uuo *UserUpdateOne) SetUsername(s string) *UserUpdateOne {
	uuo.mutation.SetUsername(s)
	return uuo
}

// SetPendingActions sets the "pending_actions" field.
func (uuo *UserUpdateOne) SetPendingActions(sa []schema.PendingAction) *UserUpdateOne {
	uuo.mutation.SetPendingActions(sa)
	return uuo
}

// AppendPendingActions appends sa to the "pending_actions" field.
func (uuo *UserUpdateOne) AppendPendingActions(sa []schema.PendingAction) *UserUpdateOne {
	uuo.mutation.AppendPendingActions(sa)
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// AddDeckIDs adds the "decks" edge to the Deck entity by IDs.
func (uuo *UserUpdateOne) AddDeckIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddDeckIDs(ids...)
	return uuo
}

// AddDecks adds the "decks" edges to the Deck entity.
func (uuo *UserUpdateOne) AddDecks(d ...*Deck) *UserUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddDeckIDs(ids...)
}

// AddSubjectIDs adds the "subjects" edge to the Subject entity by IDs.
func (uuo *UserUpdateOne) AddSubjectIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddSubjectIDs(ids...)
	return uuo
}

// AddSubjects adds the "subjects" edges to the Subject entity.
func (uuo *UserUpdateOne) AddSubjects(s ...*Subject) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSubjectIDs(ids...)
}

// AddSubscribedDeckIDs adds the "subscribed_decks" edge to the Deck entity by IDs.
func (uuo *UserUpdateOne) AddSubscribedDeckIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddSubscribedDeckIDs(ids...)
	return uuo
}

// AddSubscribedDecks adds the "subscribed_decks" edges to the Deck entity.
func (uuo *UserUpdateOne) AddSubscribedDecks(d ...*Deck) *UserUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddSubscribedDeckIDs(ids...)
}

// AddAPITokenIDs adds the "api_tokens" edge to the ApiToken entity by IDs.
func (uuo *UserUpdateOne) AddAPITokenIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.AddAPITokenIDs(ids...)
	return uuo
}

// AddAPITokens adds the "api_tokens" edges to the ApiToken entity.
func (uuo *UserUpdateOne) AddAPITokens(a ...*ApiToken) *UserUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.AddAPITokenIDs(ids...)
}

// AddDecksProgresIDs adds the "decks_progress" edge to the DeckProgress entity by IDs.
func (uuo *UserUpdateOne) AddDecksProgresIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.AddDecksProgresIDs(ids...)
	return uuo
}

// AddDecksProgress adds the "decks_progress" edges to the DeckProgress entity.
func (uuo *UserUpdateOne) AddDecksProgress(d ...*DeckProgress) *UserUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.AddDecksProgresIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearDecks clears all "decks" edges to the Deck entity.
func (uuo *UserUpdateOne) ClearDecks() *UserUpdateOne {
	uuo.mutation.ClearDecks()
	return uuo
}

// RemoveDeckIDs removes the "decks" edge to Deck entities by IDs.
func (uuo *UserUpdateOne) RemoveDeckIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveDeckIDs(ids...)
	return uuo
}

// RemoveDecks removes "decks" edges to Deck entities.
func (uuo *UserUpdateOne) RemoveDecks(d ...*Deck) *UserUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveDeckIDs(ids...)
}

// ClearSubjects clears all "subjects" edges to the Subject entity.
func (uuo *UserUpdateOne) ClearSubjects() *UserUpdateOne {
	uuo.mutation.ClearSubjects()
	return uuo
}

// RemoveSubjectIDs removes the "subjects" edge to Subject entities by IDs.
func (uuo *UserUpdateOne) RemoveSubjectIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveSubjectIDs(ids...)
	return uuo
}

// RemoveSubjects removes "subjects" edges to Subject entities.
func (uuo *UserUpdateOne) RemoveSubjects(s ...*Subject) *UserUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSubjectIDs(ids...)
}

// ClearSubscribedDecks clears all "subscribed_decks" edges to the Deck entity.
func (uuo *UserUpdateOne) ClearSubscribedDecks() *UserUpdateOne {
	uuo.mutation.ClearSubscribedDecks()
	return uuo
}

// RemoveSubscribedDeckIDs removes the "subscribed_decks" edge to Deck entities by IDs.
func (uuo *UserUpdateOne) RemoveSubscribedDeckIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveSubscribedDeckIDs(ids...)
	return uuo
}

// RemoveSubscribedDecks removes "subscribed_decks" edges to Deck entities.
func (uuo *UserUpdateOne) RemoveSubscribedDecks(d ...*Deck) *UserUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveSubscribedDeckIDs(ids...)
}

// ClearAPITokens clears all "api_tokens" edges to the ApiToken entity.
func (uuo *UserUpdateOne) ClearAPITokens() *UserUpdateOne {
	uuo.mutation.ClearAPITokens()
	return uuo
}

// RemoveAPITokenIDs removes the "api_tokens" edge to ApiToken entities by IDs.
func (uuo *UserUpdateOne) RemoveAPITokenIDs(ids ...uuid.UUID) *UserUpdateOne {
	uuo.mutation.RemoveAPITokenIDs(ids...)
	return uuo
}

// RemoveAPITokens removes "api_tokens" edges to ApiToken entities.
func (uuo *UserUpdateOne) RemoveAPITokens(a ...*ApiToken) *UserUpdateOne {
	ids := make([]uuid.UUID, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return uuo.RemoveAPITokenIDs(ids...)
}

// ClearDecksProgress clears all "decks_progress" edges to the DeckProgress entity.
func (uuo *UserUpdateOne) ClearDecksProgress() *UserUpdateOne {
	uuo.mutation.ClearDecksProgress()
	return uuo
}

// RemoveDecksProgresIDs removes the "decks_progress" edge to DeckProgress entities by IDs.
func (uuo *UserUpdateOne) RemoveDecksProgresIDs(ids ...int) *UserUpdateOne {
	uuo.mutation.RemoveDecksProgresIDs(ids...)
	return uuo
}

// RemoveDecksProgress removes "decks_progress" edges to DeckProgress entities.
func (uuo *UserUpdateOne) RemoveDecksProgress(d ...*DeckProgress) *UserUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return uuo.RemoveDecksProgresIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		if err = uuo.check(); err != nil {
			return nil, err
		}
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = uuo.check(); err != nil {
				return nil, err
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			if uuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = uuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, uuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*User)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Username(); ok {
		if err := user.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "User.username": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`ent: validator failed for field "User.email": %w`, err)}
		}
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uuo.mutation.Username(); ok {
		_spec.SetField(user.FieldUsername, field.TypeString, value)
	}
	if value, ok := uuo.mutation.PendingActions(); ok {
		_spec.SetField(user.FieldPendingActions, field.TypeJSON, value)
	}
	if value, ok := uuo.mutation.AppendedPendingActions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, user.FieldPendingActions, value)
		})
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if uuo.mutation.DecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedDecksIDs(); len(nodes) > 0 && !uuo.mutation.DecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksTable,
			Columns: []string{user.DecksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubjectsTable,
			Columns: []string{user.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSubjectsIDs(); len(nodes) > 0 && !uuo.mutation.SubjectsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubjectsTable,
			Columns: []string{user.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SubjectsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SubjectsTable,
			Columns: []string{user.SubjectsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SubscribedDecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.SubscribedDecksTable,
			Columns: user.SubscribedDecksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSubscribedDecksIDs(); len(nodes) > 0 && !uuo.mutation.SubscribedDecksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.SubscribedDecksTable,
			Columns: user.SubscribedDecksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SubscribedDecksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.SubscribedDecksTable,
			Columns: user.SubscribedDecksPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedAPITokensIDs(); len(nodes) > 0 && !uuo.mutation.APITokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.APITokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.APITokensTable,
			Columns: []string{user.APITokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: apitoken.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.DecksProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksProgressTable,
			Columns: []string{user.DecksProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckprogress.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedDecksProgressIDs(); len(nodes) > 0 && !uuo.mutation.DecksProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksProgressTable,
			Columns: []string{user.DecksProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckprogress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.DecksProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.DecksProgressTable,
			Columns: []string{user.DecksProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckprogress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
