// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jackc/pgtype"
	"sixels.io/manekani/ent/schema"
	"sixels.io/manekani/ent/vocabulary"
)

// Vocabulary is the model entity for the Vocabulary schema.
type Vocabulary struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// AltNames holds the value of the "alt_names" field.
	AltNames pgtype.TextArray `json:"alt_names,omitempty"`
	// Level holds the value of the "level" field.
	Level int32 `json:"level,omitempty"`
	// Word holds the value of the "word" field.
	Word string `json:"word,omitempty"`
	// WordType holds the value of the "word_type" field.
	WordType pgtype.TextArray `json:"word_type,omitempty"`
	// Reading holds the value of the "reading" field.
	Reading string `json:"reading,omitempty"`
	// AltReadings holds the value of the "alt_readings" field.
	AltReadings pgtype.TextArray `json:"alt_readings,omitempty"`
	// Patterns holds the value of the "patterns" field.
	Patterns []schema.Pattern `json:"patterns,omitempty"`
	// Sentences holds the value of the "sentences" field.
	Sentences []schema.Sentence `json:"sentences,omitempty"`
	// MeaningMnemonic holds the value of the "meaning_mnemonic" field.
	MeaningMnemonic string `json:"meaning_mnemonic,omitempty"`
	// ReadingMnemonic holds the value of the "reading_mnemonic" field.
	ReadingMnemonic string `json:"reading_mnemonic,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the VocabularyQuery when eager-loading is set.
	Edges VocabularyEdges `json:"edges"`
}

// VocabularyEdges holds the relations/edges for other nodes in the graph.
type VocabularyEdges struct {
	// Kanjis holds the value of the kanjis edge.
	Kanjis []*Kanji `json:"kanjis,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// KanjisOrErr returns the Kanjis value or an error if the edge
// was not loaded in eager-loading.
func (e VocabularyEdges) KanjisOrErr() ([]*Kanji, error) {
	if e.loadedTypes[0] {
		return e.Kanjis, nil
	}
	return nil, &NotLoadedError{edge: "kanjis"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Vocabulary) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case vocabulary.FieldPatterns, vocabulary.FieldSentences:
			values[i] = new([]byte)
		case vocabulary.FieldAltNames, vocabulary.FieldWordType, vocabulary.FieldAltReadings:
			values[i] = new(pgtype.TextArray)
		case vocabulary.FieldLevel:
			values[i] = new(sql.NullInt64)
		case vocabulary.FieldName, vocabulary.FieldWord, vocabulary.FieldReading, vocabulary.FieldMeaningMnemonic, vocabulary.FieldReadingMnemonic:
			values[i] = new(sql.NullString)
		case vocabulary.FieldCreatedAt, vocabulary.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case vocabulary.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Vocabulary", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Vocabulary fields.
func (v *Vocabulary) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case vocabulary.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				v.ID = *value
			}
		case vocabulary.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				v.CreatedAt = value.Time
			}
		case vocabulary.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				v.UpdatedAt = value.Time
			}
		case vocabulary.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				v.Name = value.String
			}
		case vocabulary.FieldAltNames:
			if value, ok := values[i].(*pgtype.TextArray); !ok {
				return fmt.Errorf("unexpected type %T for field alt_names", values[i])
			} else if value != nil {
				v.AltNames = *value
			}
		case vocabulary.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				v.Level = int32(value.Int64)
			}
		case vocabulary.FieldWord:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field word", values[i])
			} else if value.Valid {
				v.Word = value.String
			}
		case vocabulary.FieldWordType:
			if value, ok := values[i].(*pgtype.TextArray); !ok {
				return fmt.Errorf("unexpected type %T for field word_type", values[i])
			} else if value != nil {
				v.WordType = *value
			}
		case vocabulary.FieldReading:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reading", values[i])
			} else if value.Valid {
				v.Reading = value.String
			}
		case vocabulary.FieldAltReadings:
			if value, ok := values[i].(*pgtype.TextArray); !ok {
				return fmt.Errorf("unexpected type %T for field alt_readings", values[i])
			} else if value != nil {
				v.AltReadings = *value
			}
		case vocabulary.FieldPatterns:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field patterns", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.Patterns); err != nil {
					return fmt.Errorf("unmarshal field patterns: %w", err)
				}
			}
		case vocabulary.FieldSentences:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field sentences", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &v.Sentences); err != nil {
					return fmt.Errorf("unmarshal field sentences: %w", err)
				}
			}
		case vocabulary.FieldMeaningMnemonic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meaning_mnemonic", values[i])
			} else if value.Valid {
				v.MeaningMnemonic = value.String
			}
		case vocabulary.FieldReadingMnemonic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reading_mnemonic", values[i])
			} else if value.Valid {
				v.ReadingMnemonic = value.String
			}
		}
	}
	return nil
}

// QueryKanjis queries the "kanjis" edge of the Vocabulary entity.
func (v *Vocabulary) QueryKanjis() *KanjiQuery {
	return (&VocabularyClient{config: v.config}).QueryKanjis(v)
}

// Update returns a builder for updating this Vocabulary.
// Note that you need to call Vocabulary.Unwrap() before calling this method if this Vocabulary
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Vocabulary) Update() *VocabularyUpdateOne {
	return (&VocabularyClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Vocabulary entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Vocabulary) Unwrap() *Vocabulary {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("ent: Vocabulary is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Vocabulary) String() string {
	var builder strings.Builder
	builder.WriteString("Vocabulary(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("created_at=")
	builder.WriteString(v.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(v.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(v.Name)
	builder.WriteString(", ")
	builder.WriteString("alt_names=")
	builder.WriteString(fmt.Sprintf("%v", v.AltNames))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", v.Level))
	builder.WriteString(", ")
	builder.WriteString("word=")
	builder.WriteString(v.Word)
	builder.WriteString(", ")
	builder.WriteString("word_type=")
	builder.WriteString(fmt.Sprintf("%v", v.WordType))
	builder.WriteString(", ")
	builder.WriteString("reading=")
	builder.WriteString(v.Reading)
	builder.WriteString(", ")
	builder.WriteString("alt_readings=")
	builder.WriteString(fmt.Sprintf("%v", v.AltReadings))
	builder.WriteString(", ")
	builder.WriteString("patterns=")
	builder.WriteString(fmt.Sprintf("%v", v.Patterns))
	builder.WriteString(", ")
	builder.WriteString("sentences=")
	builder.WriteString(fmt.Sprintf("%v", v.Sentences))
	builder.WriteString(", ")
	builder.WriteString("meaning_mnemonic=")
	builder.WriteString(v.MeaningMnemonic)
	builder.WriteString(", ")
	builder.WriteString("reading_mnemonic=")
	builder.WriteString(v.ReadingMnemonic)
	builder.WriteByte(')')
	return builder.String()
}

// Vocabularies is a parsable slice of Vocabulary.
type Vocabularies []*Vocabulary

func (v Vocabularies) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
