// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"sixels.io/manekani/ent/card"
	"sixels.io/manekani/ent/deckprogress"
	"sixels.io/manekani/ent/predicate"
	"sixels.io/manekani/ent/review"
	"sixels.io/manekani/ent/subject"
)

// CardUpdate is the builder for updating Card entities.
type CardUpdate struct {
	config
	hooks    []Hook
	mutation *CardMutation
}

// Where appends a list predicates to the CardUpdate builder.
func (cu *CardUpdate) Where(ps ...predicate.Card) *CardUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CardUpdate) SetUpdatedAt(t time.Time) *CardUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetProgress sets the "progress" field.
func (cu *CardUpdate) SetProgress(u uint8) *CardUpdate {
	cu.mutation.ResetProgress()
	cu.mutation.SetProgress(u)
	return cu
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (cu *CardUpdate) SetNillableProgress(u *uint8) *CardUpdate {
	if u != nil {
		cu.SetProgress(*u)
	}
	return cu
}

// AddProgress adds u to the "progress" field.
func (cu *CardUpdate) AddProgress(u int8) *CardUpdate {
	cu.mutation.AddProgress(u)
	return cu
}

// SetTotalErrors sets the "total_errors" field.
func (cu *CardUpdate) SetTotalErrors(i int32) *CardUpdate {
	cu.mutation.ResetTotalErrors()
	cu.mutation.SetTotalErrors(i)
	return cu
}

// SetNillableTotalErrors sets the "total_errors" field if the given value is not nil.
func (cu *CardUpdate) SetNillableTotalErrors(i *int32) *CardUpdate {
	if i != nil {
		cu.SetTotalErrors(*i)
	}
	return cu
}

// AddTotalErrors adds i to the "total_errors" field.
func (cu *CardUpdate) AddTotalErrors(i int32) *CardUpdate {
	cu.mutation.AddTotalErrors(i)
	return cu
}

// SetUnlockedAt sets the "unlocked_at" field.
func (cu *CardUpdate) SetUnlockedAt(t time.Time) *CardUpdate {
	cu.mutation.SetUnlockedAt(t)
	return cu
}

// SetNillableUnlockedAt sets the "unlocked_at" field if the given value is not nil.
func (cu *CardUpdate) SetNillableUnlockedAt(t *time.Time) *CardUpdate {
	if t != nil {
		cu.SetUnlockedAt(*t)
	}
	return cu
}

// ClearUnlockedAt clears the value of the "unlocked_at" field.
func (cu *CardUpdate) ClearUnlockedAt() *CardUpdate {
	cu.mutation.ClearUnlockedAt()
	return cu
}

// SetStartedAt sets the "started_at" field.
func (cu *CardUpdate) SetStartedAt(t time.Time) *CardUpdate {
	cu.mutation.SetStartedAt(t)
	return cu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cu *CardUpdate) SetNillableStartedAt(t *time.Time) *CardUpdate {
	if t != nil {
		cu.SetStartedAt(*t)
	}
	return cu
}

// ClearStartedAt clears the value of the "started_at" field.
func (cu *CardUpdate) ClearStartedAt() *CardUpdate {
	cu.mutation.ClearStartedAt()
	return cu
}

// SetPassedAt sets the "passed_at" field.
func (cu *CardUpdate) SetPassedAt(t time.Time) *CardUpdate {
	cu.mutation.SetPassedAt(t)
	return cu
}

// SetNillablePassedAt sets the "passed_at" field if the given value is not nil.
func (cu *CardUpdate) SetNillablePassedAt(t *time.Time) *CardUpdate {
	if t != nil {
		cu.SetPassedAt(*t)
	}
	return cu
}

// ClearPassedAt clears the value of the "passed_at" field.
func (cu *CardUpdate) ClearPassedAt() *CardUpdate {
	cu.mutation.ClearPassedAt()
	return cu
}

// SetAvailableAt sets the "available_at" field.
func (cu *CardUpdate) SetAvailableAt(t time.Time) *CardUpdate {
	cu.mutation.SetAvailableAt(t)
	return cu
}

// SetNillableAvailableAt sets the "available_at" field if the given value is not nil.
func (cu *CardUpdate) SetNillableAvailableAt(t *time.Time) *CardUpdate {
	if t != nil {
		cu.SetAvailableAt(*t)
	}
	return cu
}

// ClearAvailableAt clears the value of the "available_at" field.
func (cu *CardUpdate) ClearAvailableAt() *CardUpdate {
	cu.mutation.ClearAvailableAt()
	return cu
}

// SetBurnedAt sets the "burned_at" field.
func (cu *CardUpdate) SetBurnedAt(t time.Time) *CardUpdate {
	cu.mutation.SetBurnedAt(t)
	return cu
}

// SetNillableBurnedAt sets the "burned_at" field if the given value is not nil.
func (cu *CardUpdate) SetNillableBurnedAt(t *time.Time) *CardUpdate {
	if t != nil {
		cu.SetBurnedAt(*t)
	}
	return cu
}

// ClearBurnedAt clears the value of the "burned_at" field.
func (cu *CardUpdate) ClearBurnedAt() *CardUpdate {
	cu.mutation.ClearBurnedAt()
	return cu
}

// SetDeckProgressID sets the "deck_progress" edge to the DeckProgress entity by ID.
func (cu *CardUpdate) SetDeckProgressID(id int) *CardUpdate {
	cu.mutation.SetDeckProgressID(id)
	return cu
}

// SetNillableDeckProgressID sets the "deck_progress" edge to the DeckProgress entity by ID if the given value is not nil.
func (cu *CardUpdate) SetNillableDeckProgressID(id *int) *CardUpdate {
	if id != nil {
		cu = cu.SetDeckProgressID(*id)
	}
	return cu
}

// SetDeckProgress sets the "deck_progress" edge to the DeckProgress entity.
func (cu *CardUpdate) SetDeckProgress(d *DeckProgress) *CardUpdate {
	return cu.SetDeckProgressID(d.ID)
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (cu *CardUpdate) SetSubjectID(id uuid.UUID) *CardUpdate {
	cu.mutation.SetSubjectID(id)
	return cu
}

// SetSubject sets the "subject" edge to the Subject entity.
func (cu *CardUpdate) SetSubject(s *Subject) *CardUpdate {
	return cu.SetSubjectID(s.ID)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (cu *CardUpdate) AddReviewIDs(ids ...uuid.UUID) *CardUpdate {
	cu.mutation.AddReviewIDs(ids...)
	return cu
}

// AddReviews adds the "reviews" edges to the Review entity.
func (cu *CardUpdate) AddReviews(r ...*Review) *CardUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.AddReviewIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (cu *CardUpdate) Mutation() *CardMutation {
	return cu.mutation
}

// ClearDeckProgress clears the "deck_progress" edge to the DeckProgress entity.
func (cu *CardUpdate) ClearDeckProgress() *CardUpdate {
	cu.mutation.ClearDeckProgress()
	return cu
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (cu *CardUpdate) ClearSubject() *CardUpdate {
	cu.mutation.ClearSubject()
	return cu
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (cu *CardUpdate) ClearReviews() *CardUpdate {
	cu.mutation.ClearReviews()
	return cu
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (cu *CardUpdate) RemoveReviewIDs(ids ...uuid.UUID) *CardUpdate {
	cu.mutation.RemoveReviewIDs(ids...)
	return cu
}

// RemoveReviews removes "reviews" edges to Review entities.
func (cu *CardUpdate) RemoveReviews(r ...*Review) *CardUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cu.RemoveReviewIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CardUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CardUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CardUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CardUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CardUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := card.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CardUpdate) check() error {
	if _, ok := cu.mutation.SubjectID(); cu.mutation.SubjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Card.subject"`)
	}
	return nil
}

func (cu *CardUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   card.Table,
			Columns: card.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: card.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(card.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Progress(); ok {
		_spec.SetField(card.FieldProgress, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.AddedProgress(); ok {
		_spec.AddField(card.FieldProgress, field.TypeUint8, value)
	}
	if value, ok := cu.mutation.TotalErrors(); ok {
		_spec.SetField(card.FieldTotalErrors, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedTotalErrors(); ok {
		_spec.AddField(card.FieldTotalErrors, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.UnlockedAt(); ok {
		_spec.SetField(card.FieldUnlockedAt, field.TypeTime, value)
	}
	if cu.mutation.UnlockedAtCleared() {
		_spec.ClearField(card.FieldUnlockedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.StartedAt(); ok {
		_spec.SetField(card.FieldStartedAt, field.TypeTime, value)
	}
	if cu.mutation.StartedAtCleared() {
		_spec.ClearField(card.FieldStartedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.PassedAt(); ok {
		_spec.SetField(card.FieldPassedAt, field.TypeTime, value)
	}
	if cu.mutation.PassedAtCleared() {
		_spec.ClearField(card.FieldPassedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.AvailableAt(); ok {
		_spec.SetField(card.FieldAvailableAt, field.TypeTime, value)
	}
	if cu.mutation.AvailableAtCleared() {
		_spec.ClearField(card.FieldAvailableAt, field.TypeTime)
	}
	if value, ok := cu.mutation.BurnedAt(); ok {
		_spec.SetField(card.FieldBurnedAt, field.TypeTime, value)
	}
	if cu.mutation.BurnedAtCleared() {
		_spec.ClearField(card.FieldBurnedAt, field.TypeTime)
	}
	if cu.mutation.DeckProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.DeckProgressTable,
			Columns: []string{card.DeckProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckprogress.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DeckProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.DeckProgressTable,
			Columns: []string{card.DeckProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckprogress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.SubjectTable,
			Columns: []string{card.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.SubjectTable,
			Columns: []string{card.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.ReviewsTable,
			Columns: []string{card.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: review.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !cu.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.ReviewsTable,
			Columns: []string{card.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: review.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.ReviewsTable,
			Columns: []string{card.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: review.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// CardUpdateOne is the builder for updating a single Card entity.
type CardUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CardMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CardUpdateOne) SetUpdatedAt(t time.Time) *CardUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetProgress sets the "progress" field.
func (cuo *CardUpdateOne) SetProgress(u uint8) *CardUpdateOne {
	cuo.mutation.ResetProgress()
	cuo.mutation.SetProgress(u)
	return cuo
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableProgress(u *uint8) *CardUpdateOne {
	if u != nil {
		cuo.SetProgress(*u)
	}
	return cuo
}

// AddProgress adds u to the "progress" field.
func (cuo *CardUpdateOne) AddProgress(u int8) *CardUpdateOne {
	cuo.mutation.AddProgress(u)
	return cuo
}

// SetTotalErrors sets the "total_errors" field.
func (cuo *CardUpdateOne) SetTotalErrors(i int32) *CardUpdateOne {
	cuo.mutation.ResetTotalErrors()
	cuo.mutation.SetTotalErrors(i)
	return cuo
}

// SetNillableTotalErrors sets the "total_errors" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableTotalErrors(i *int32) *CardUpdateOne {
	if i != nil {
		cuo.SetTotalErrors(*i)
	}
	return cuo
}

// AddTotalErrors adds i to the "total_errors" field.
func (cuo *CardUpdateOne) AddTotalErrors(i int32) *CardUpdateOne {
	cuo.mutation.AddTotalErrors(i)
	return cuo
}

// SetUnlockedAt sets the "unlocked_at" field.
func (cuo *CardUpdateOne) SetUnlockedAt(t time.Time) *CardUpdateOne {
	cuo.mutation.SetUnlockedAt(t)
	return cuo
}

// SetNillableUnlockedAt sets the "unlocked_at" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableUnlockedAt(t *time.Time) *CardUpdateOne {
	if t != nil {
		cuo.SetUnlockedAt(*t)
	}
	return cuo
}

// ClearUnlockedAt clears the value of the "unlocked_at" field.
func (cuo *CardUpdateOne) ClearUnlockedAt() *CardUpdateOne {
	cuo.mutation.ClearUnlockedAt()
	return cuo
}

// SetStartedAt sets the "started_at" field.
func (cuo *CardUpdateOne) SetStartedAt(t time.Time) *CardUpdateOne {
	cuo.mutation.SetStartedAt(t)
	return cuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableStartedAt(t *time.Time) *CardUpdateOne {
	if t != nil {
		cuo.SetStartedAt(*t)
	}
	return cuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (cuo *CardUpdateOne) ClearStartedAt() *CardUpdateOne {
	cuo.mutation.ClearStartedAt()
	return cuo
}

// SetPassedAt sets the "passed_at" field.
func (cuo *CardUpdateOne) SetPassedAt(t time.Time) *CardUpdateOne {
	cuo.mutation.SetPassedAt(t)
	return cuo
}

// SetNillablePassedAt sets the "passed_at" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillablePassedAt(t *time.Time) *CardUpdateOne {
	if t != nil {
		cuo.SetPassedAt(*t)
	}
	return cuo
}

// ClearPassedAt clears the value of the "passed_at" field.
func (cuo *CardUpdateOne) ClearPassedAt() *CardUpdateOne {
	cuo.mutation.ClearPassedAt()
	return cuo
}

// SetAvailableAt sets the "available_at" field.
func (cuo *CardUpdateOne) SetAvailableAt(t time.Time) *CardUpdateOne {
	cuo.mutation.SetAvailableAt(t)
	return cuo
}

// SetNillableAvailableAt sets the "available_at" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableAvailableAt(t *time.Time) *CardUpdateOne {
	if t != nil {
		cuo.SetAvailableAt(*t)
	}
	return cuo
}

// ClearAvailableAt clears the value of the "available_at" field.
func (cuo *CardUpdateOne) ClearAvailableAt() *CardUpdateOne {
	cuo.mutation.ClearAvailableAt()
	return cuo
}

// SetBurnedAt sets the "burned_at" field.
func (cuo *CardUpdateOne) SetBurnedAt(t time.Time) *CardUpdateOne {
	cuo.mutation.SetBurnedAt(t)
	return cuo
}

// SetNillableBurnedAt sets the "burned_at" field if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableBurnedAt(t *time.Time) *CardUpdateOne {
	if t != nil {
		cuo.SetBurnedAt(*t)
	}
	return cuo
}

// ClearBurnedAt clears the value of the "burned_at" field.
func (cuo *CardUpdateOne) ClearBurnedAt() *CardUpdateOne {
	cuo.mutation.ClearBurnedAt()
	return cuo
}

// SetDeckProgressID sets the "deck_progress" edge to the DeckProgress entity by ID.
func (cuo *CardUpdateOne) SetDeckProgressID(id int) *CardUpdateOne {
	cuo.mutation.SetDeckProgressID(id)
	return cuo
}

// SetNillableDeckProgressID sets the "deck_progress" edge to the DeckProgress entity by ID if the given value is not nil.
func (cuo *CardUpdateOne) SetNillableDeckProgressID(id *int) *CardUpdateOne {
	if id != nil {
		cuo = cuo.SetDeckProgressID(*id)
	}
	return cuo
}

// SetDeckProgress sets the "deck_progress" edge to the DeckProgress entity.
func (cuo *CardUpdateOne) SetDeckProgress(d *DeckProgress) *CardUpdateOne {
	return cuo.SetDeckProgressID(d.ID)
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (cuo *CardUpdateOne) SetSubjectID(id uuid.UUID) *CardUpdateOne {
	cuo.mutation.SetSubjectID(id)
	return cuo
}

// SetSubject sets the "subject" edge to the Subject entity.
func (cuo *CardUpdateOne) SetSubject(s *Subject) *CardUpdateOne {
	return cuo.SetSubjectID(s.ID)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (cuo *CardUpdateOne) AddReviewIDs(ids ...uuid.UUID) *CardUpdateOne {
	cuo.mutation.AddReviewIDs(ids...)
	return cuo
}

// AddReviews adds the "reviews" edges to the Review entity.
func (cuo *CardUpdateOne) AddReviews(r ...*Review) *CardUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.AddReviewIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (cuo *CardUpdateOne) Mutation() *CardMutation {
	return cuo.mutation
}

// ClearDeckProgress clears the "deck_progress" edge to the DeckProgress entity.
func (cuo *CardUpdateOne) ClearDeckProgress() *CardUpdateOne {
	cuo.mutation.ClearDeckProgress()
	return cuo
}

// ClearSubject clears the "subject" edge to the Subject entity.
func (cuo *CardUpdateOne) ClearSubject() *CardUpdateOne {
	cuo.mutation.ClearSubject()
	return cuo
}

// ClearReviews clears all "reviews" edges to the Review entity.
func (cuo *CardUpdateOne) ClearReviews() *CardUpdateOne {
	cuo.mutation.ClearReviews()
	return cuo
}

// RemoveReviewIDs removes the "reviews" edge to Review entities by IDs.
func (cuo *CardUpdateOne) RemoveReviewIDs(ids ...uuid.UUID) *CardUpdateOne {
	cuo.mutation.RemoveReviewIDs(ids...)
	return cuo
}

// RemoveReviews removes "reviews" edges to Review entities.
func (cuo *CardUpdateOne) RemoveReviews(r ...*Review) *CardUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cuo.RemoveReviewIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CardUpdateOne) Select(field string, fields ...string) *CardUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Card entity.
func (cuo *CardUpdateOne) Save(ctx context.Context) (*Card, error) {
	var (
		err  error
		node *Card
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CardMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Card)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CardMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CardUpdateOne) SaveX(ctx context.Context) *Card {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CardUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CardUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CardUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := card.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CardUpdateOne) check() error {
	if _, ok := cuo.mutation.SubjectID(); cuo.mutation.SubjectCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Card.subject"`)
	}
	return nil
}

func (cuo *CardUpdateOne) sqlSave(ctx context.Context) (_node *Card, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   card.Table,
			Columns: card.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: card.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Card.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, card.FieldID)
		for _, f := range fields {
			if !card.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != card.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(card.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Progress(); ok {
		_spec.SetField(card.FieldProgress, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.AddedProgress(); ok {
		_spec.AddField(card.FieldProgress, field.TypeUint8, value)
	}
	if value, ok := cuo.mutation.TotalErrors(); ok {
		_spec.SetField(card.FieldTotalErrors, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedTotalErrors(); ok {
		_spec.AddField(card.FieldTotalErrors, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.UnlockedAt(); ok {
		_spec.SetField(card.FieldUnlockedAt, field.TypeTime, value)
	}
	if cuo.mutation.UnlockedAtCleared() {
		_spec.ClearField(card.FieldUnlockedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.StartedAt(); ok {
		_spec.SetField(card.FieldStartedAt, field.TypeTime, value)
	}
	if cuo.mutation.StartedAtCleared() {
		_spec.ClearField(card.FieldStartedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.PassedAt(); ok {
		_spec.SetField(card.FieldPassedAt, field.TypeTime, value)
	}
	if cuo.mutation.PassedAtCleared() {
		_spec.ClearField(card.FieldPassedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.AvailableAt(); ok {
		_spec.SetField(card.FieldAvailableAt, field.TypeTime, value)
	}
	if cuo.mutation.AvailableAtCleared() {
		_spec.ClearField(card.FieldAvailableAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.BurnedAt(); ok {
		_spec.SetField(card.FieldBurnedAt, field.TypeTime, value)
	}
	if cuo.mutation.BurnedAtCleared() {
		_spec.ClearField(card.FieldBurnedAt, field.TypeTime)
	}
	if cuo.mutation.DeckProgressCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.DeckProgressTable,
			Columns: []string{card.DeckProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckprogress.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DeckProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.DeckProgressTable,
			Columns: []string{card.DeckProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: deckprogress.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.SubjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.SubjectTable,
			Columns: []string{card.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.SubjectTable,
			Columns: []string{card.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.ReviewsTable,
			Columns: []string{card.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: review.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedReviewsIDs(); len(nodes) > 0 && !cuo.mutation.ReviewsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.ReviewsTable,
			Columns: []string{card.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: review.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.ReviewsTable,
			Columns: []string{card.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: review.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Card{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{card.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
