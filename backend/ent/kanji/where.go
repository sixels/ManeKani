// Code generated by ent, DO NOT EDIT.

package kanji

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/jackc/pgtype"
	"sixels.io/manekani/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
func Symbol(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymbol), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// AltNames applies equality check predicate on the "alt_names" field. It's identical to AltNamesEQ.
func AltNames(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAltNames), v))
	})
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v int32) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// Reading applies equality check predicate on the "reading" field. It's identical to ReadingEQ.
func Reading(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReading), v))
	})
}

// Onyomi applies equality check predicate on the "onyomi" field. It's identical to OnyomiEQ.
func Onyomi(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnyomi), v))
	})
}

// Kunyomi applies equality check predicate on the "kunyomi" field. It's identical to KunyomiEQ.
func Kunyomi(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKunyomi), v))
	})
}

// Nanori applies equality check predicate on the "nanori" field. It's identical to NanoriEQ.
func Nanori(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNanori), v))
	})
}

// MeaningMnemonic applies equality check predicate on the "meaning_mnemonic" field. It's identical to MeaningMnemonicEQ.
func MeaningMnemonic(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeaningMnemonic), v))
	})
}

// ReadingMnemonic applies equality check predicate on the "reading_mnemonic" field. It's identical to ReadingMnemonicEQ.
func ReadingMnemonic(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReadingMnemonic), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// SymbolEQ applies the EQ predicate on the "symbol" field.
func SymbolEQ(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymbol), v))
	})
}

// SymbolNEQ applies the NEQ predicate on the "symbol" field.
func SymbolNEQ(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymbol), v))
	})
}

// SymbolIn applies the In predicate on the "symbol" field.
func SymbolIn(vs ...string) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSymbol), v...))
	})
}

// SymbolNotIn applies the NotIn predicate on the "symbol" field.
func SymbolNotIn(vs ...string) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSymbol), v...))
	})
}

// SymbolGT applies the GT predicate on the "symbol" field.
func SymbolGT(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymbol), v))
	})
}

// SymbolGTE applies the GTE predicate on the "symbol" field.
func SymbolGTE(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymbol), v))
	})
}

// SymbolLT applies the LT predicate on the "symbol" field.
func SymbolLT(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymbol), v))
	})
}

// SymbolLTE applies the LTE predicate on the "symbol" field.
func SymbolLTE(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymbol), v))
	})
}

// SymbolContains applies the Contains predicate on the "symbol" field.
func SymbolContains(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSymbol), v))
	})
}

// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
func SymbolHasPrefix(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSymbol), v))
	})
}

// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
func SymbolHasSuffix(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSymbol), v))
	})
}

// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
func SymbolEqualFold(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSymbol), v))
	})
}

// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
func SymbolContainsFold(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSymbol), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// AltNamesEQ applies the EQ predicate on the "alt_names" field.
func AltNamesEQ(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAltNames), v))
	})
}

// AltNamesNEQ applies the NEQ predicate on the "alt_names" field.
func AltNamesNEQ(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAltNames), v))
	})
}

// AltNamesIn applies the In predicate on the "alt_names" field.
func AltNamesIn(vs ...pgtype.TextArray) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAltNames), v...))
	})
}

// AltNamesNotIn applies the NotIn predicate on the "alt_names" field.
func AltNamesNotIn(vs ...pgtype.TextArray) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAltNames), v...))
	})
}

// AltNamesGT applies the GT predicate on the "alt_names" field.
func AltNamesGT(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAltNames), v))
	})
}

// AltNamesGTE applies the GTE predicate on the "alt_names" field.
func AltNamesGTE(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAltNames), v))
	})
}

// AltNamesLT applies the LT predicate on the "alt_names" field.
func AltNamesLT(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAltNames), v))
	})
}

// AltNamesLTE applies the LTE predicate on the "alt_names" field.
func AltNamesLTE(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAltNames), v))
	})
}

// AltNamesIsNil applies the IsNil predicate on the "alt_names" field.
func AltNamesIsNil() predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAltNames)))
	})
}

// AltNamesNotNil applies the NotNil predicate on the "alt_names" field.
func AltNamesNotNil() predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAltNames)))
	})
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v int32) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v int32) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...int32) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...int32) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v int32) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLevel), v))
	})
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v int32) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLevel), v))
	})
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v int32) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLevel), v))
	})
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v int32) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLevel), v))
	})
}

// ReadingEQ applies the EQ predicate on the "reading" field.
func ReadingEQ(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReading), v))
	})
}

// ReadingNEQ applies the NEQ predicate on the "reading" field.
func ReadingNEQ(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReading), v))
	})
}

// ReadingIn applies the In predicate on the "reading" field.
func ReadingIn(vs ...string) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReading), v...))
	})
}

// ReadingNotIn applies the NotIn predicate on the "reading" field.
func ReadingNotIn(vs ...string) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReading), v...))
	})
}

// ReadingGT applies the GT predicate on the "reading" field.
func ReadingGT(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReading), v))
	})
}

// ReadingGTE applies the GTE predicate on the "reading" field.
func ReadingGTE(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReading), v))
	})
}

// ReadingLT applies the LT predicate on the "reading" field.
func ReadingLT(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReading), v))
	})
}

// ReadingLTE applies the LTE predicate on the "reading" field.
func ReadingLTE(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReading), v))
	})
}

// ReadingContains applies the Contains predicate on the "reading" field.
func ReadingContains(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReading), v))
	})
}

// ReadingHasPrefix applies the HasPrefix predicate on the "reading" field.
func ReadingHasPrefix(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReading), v))
	})
}

// ReadingHasSuffix applies the HasSuffix predicate on the "reading" field.
func ReadingHasSuffix(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReading), v))
	})
}

// ReadingEqualFold applies the EqualFold predicate on the "reading" field.
func ReadingEqualFold(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReading), v))
	})
}

// ReadingContainsFold applies the ContainsFold predicate on the "reading" field.
func ReadingContainsFold(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReading), v))
	})
}

// OnyomiEQ applies the EQ predicate on the "onyomi" field.
func OnyomiEQ(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnyomi), v))
	})
}

// OnyomiNEQ applies the NEQ predicate on the "onyomi" field.
func OnyomiNEQ(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOnyomi), v))
	})
}

// OnyomiIn applies the In predicate on the "onyomi" field.
func OnyomiIn(vs ...pgtype.TextArray) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldOnyomi), v...))
	})
}

// OnyomiNotIn applies the NotIn predicate on the "onyomi" field.
func OnyomiNotIn(vs ...pgtype.TextArray) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldOnyomi), v...))
	})
}

// OnyomiGT applies the GT predicate on the "onyomi" field.
func OnyomiGT(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOnyomi), v))
	})
}

// OnyomiGTE applies the GTE predicate on the "onyomi" field.
func OnyomiGTE(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOnyomi), v))
	})
}

// OnyomiLT applies the LT predicate on the "onyomi" field.
func OnyomiLT(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOnyomi), v))
	})
}

// OnyomiLTE applies the LTE predicate on the "onyomi" field.
func OnyomiLTE(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOnyomi), v))
	})
}

// KunyomiEQ applies the EQ predicate on the "kunyomi" field.
func KunyomiEQ(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldKunyomi), v))
	})
}

// KunyomiNEQ applies the NEQ predicate on the "kunyomi" field.
func KunyomiNEQ(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldKunyomi), v))
	})
}

// KunyomiIn applies the In predicate on the "kunyomi" field.
func KunyomiIn(vs ...pgtype.TextArray) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldKunyomi), v...))
	})
}

// KunyomiNotIn applies the NotIn predicate on the "kunyomi" field.
func KunyomiNotIn(vs ...pgtype.TextArray) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldKunyomi), v...))
	})
}

// KunyomiGT applies the GT predicate on the "kunyomi" field.
func KunyomiGT(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldKunyomi), v))
	})
}

// KunyomiGTE applies the GTE predicate on the "kunyomi" field.
func KunyomiGTE(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldKunyomi), v))
	})
}

// KunyomiLT applies the LT predicate on the "kunyomi" field.
func KunyomiLT(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldKunyomi), v))
	})
}

// KunyomiLTE applies the LTE predicate on the "kunyomi" field.
func KunyomiLTE(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldKunyomi), v))
	})
}

// NanoriEQ applies the EQ predicate on the "nanori" field.
func NanoriEQ(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNanori), v))
	})
}

// NanoriNEQ applies the NEQ predicate on the "nanori" field.
func NanoriNEQ(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNanori), v))
	})
}

// NanoriIn applies the In predicate on the "nanori" field.
func NanoriIn(vs ...pgtype.TextArray) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNanori), v...))
	})
}

// NanoriNotIn applies the NotIn predicate on the "nanori" field.
func NanoriNotIn(vs ...pgtype.TextArray) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNanori), v...))
	})
}

// NanoriGT applies the GT predicate on the "nanori" field.
func NanoriGT(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNanori), v))
	})
}

// NanoriGTE applies the GTE predicate on the "nanori" field.
func NanoriGTE(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNanori), v))
	})
}

// NanoriLT applies the LT predicate on the "nanori" field.
func NanoriLT(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNanori), v))
	})
}

// NanoriLTE applies the LTE predicate on the "nanori" field.
func NanoriLTE(v pgtype.TextArray) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNanori), v))
	})
}

// MeaningMnemonicEQ applies the EQ predicate on the "meaning_mnemonic" field.
func MeaningMnemonicEQ(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeaningMnemonic), v))
	})
}

// MeaningMnemonicNEQ applies the NEQ predicate on the "meaning_mnemonic" field.
func MeaningMnemonicNEQ(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMeaningMnemonic), v))
	})
}

// MeaningMnemonicIn applies the In predicate on the "meaning_mnemonic" field.
func MeaningMnemonicIn(vs ...string) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMeaningMnemonic), v...))
	})
}

// MeaningMnemonicNotIn applies the NotIn predicate on the "meaning_mnemonic" field.
func MeaningMnemonicNotIn(vs ...string) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMeaningMnemonic), v...))
	})
}

// MeaningMnemonicGT applies the GT predicate on the "meaning_mnemonic" field.
func MeaningMnemonicGT(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMeaningMnemonic), v))
	})
}

// MeaningMnemonicGTE applies the GTE predicate on the "meaning_mnemonic" field.
func MeaningMnemonicGTE(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMeaningMnemonic), v))
	})
}

// MeaningMnemonicLT applies the LT predicate on the "meaning_mnemonic" field.
func MeaningMnemonicLT(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMeaningMnemonic), v))
	})
}

// MeaningMnemonicLTE applies the LTE predicate on the "meaning_mnemonic" field.
func MeaningMnemonicLTE(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMeaningMnemonic), v))
	})
}

// MeaningMnemonicContains applies the Contains predicate on the "meaning_mnemonic" field.
func MeaningMnemonicContains(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMeaningMnemonic), v))
	})
}

// MeaningMnemonicHasPrefix applies the HasPrefix predicate on the "meaning_mnemonic" field.
func MeaningMnemonicHasPrefix(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMeaningMnemonic), v))
	})
}

// MeaningMnemonicHasSuffix applies the HasSuffix predicate on the "meaning_mnemonic" field.
func MeaningMnemonicHasSuffix(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMeaningMnemonic), v))
	})
}

// MeaningMnemonicEqualFold applies the EqualFold predicate on the "meaning_mnemonic" field.
func MeaningMnemonicEqualFold(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMeaningMnemonic), v))
	})
}

// MeaningMnemonicContainsFold applies the ContainsFold predicate on the "meaning_mnemonic" field.
func MeaningMnemonicContainsFold(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMeaningMnemonic), v))
	})
}

// ReadingMnemonicEQ applies the EQ predicate on the "reading_mnemonic" field.
func ReadingMnemonicEQ(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReadingMnemonic), v))
	})
}

// ReadingMnemonicNEQ applies the NEQ predicate on the "reading_mnemonic" field.
func ReadingMnemonicNEQ(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReadingMnemonic), v))
	})
}

// ReadingMnemonicIn applies the In predicate on the "reading_mnemonic" field.
func ReadingMnemonicIn(vs ...string) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReadingMnemonic), v...))
	})
}

// ReadingMnemonicNotIn applies the NotIn predicate on the "reading_mnemonic" field.
func ReadingMnemonicNotIn(vs ...string) predicate.Kanji {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReadingMnemonic), v...))
	})
}

// ReadingMnemonicGT applies the GT predicate on the "reading_mnemonic" field.
func ReadingMnemonicGT(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReadingMnemonic), v))
	})
}

// ReadingMnemonicGTE applies the GTE predicate on the "reading_mnemonic" field.
func ReadingMnemonicGTE(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReadingMnemonic), v))
	})
}

// ReadingMnemonicLT applies the LT predicate on the "reading_mnemonic" field.
func ReadingMnemonicLT(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReadingMnemonic), v))
	})
}

// ReadingMnemonicLTE applies the LTE predicate on the "reading_mnemonic" field.
func ReadingMnemonicLTE(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReadingMnemonic), v))
	})
}

// ReadingMnemonicContains applies the Contains predicate on the "reading_mnemonic" field.
func ReadingMnemonicContains(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReadingMnemonic), v))
	})
}

// ReadingMnemonicHasPrefix applies the HasPrefix predicate on the "reading_mnemonic" field.
func ReadingMnemonicHasPrefix(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReadingMnemonic), v))
	})
}

// ReadingMnemonicHasSuffix applies the HasSuffix predicate on the "reading_mnemonic" field.
func ReadingMnemonicHasSuffix(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReadingMnemonic), v))
	})
}

// ReadingMnemonicEqualFold applies the EqualFold predicate on the "reading_mnemonic" field.
func ReadingMnemonicEqualFold(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReadingMnemonic), v))
	})
}

// ReadingMnemonicContainsFold applies the ContainsFold predicate on the "reading_mnemonic" field.
func ReadingMnemonicContainsFold(v string) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReadingMnemonic), v))
	})
}

// HasVocabularies applies the HasEdge predicate on the "vocabularies" edge.
func HasVocabularies() predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VocabulariesTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, VocabulariesTable, VocabulariesPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVocabulariesWith applies the HasEdge predicate on the "vocabularies" edge with a given conditions (other predicates).
func HasVocabulariesWith(preds ...predicate.Vocabulary) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VocabulariesInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, VocabulariesTable, VocabulariesPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRadicals applies the HasEdge predicate on the "radicals" edge.
func HasRadicals() predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RadicalsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RadicalsTable, RadicalsPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRadicalsWith applies the HasEdge predicate on the "radicals" edge with a given conditions (other predicates).
func HasRadicalsWith(preds ...predicate.Radical) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RadicalsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RadicalsTable, RadicalsPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasVisuallySimilar applies the HasEdge predicate on the "visuallySimilar" edge.
func HasVisuallySimilar() predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VisuallySimilarTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, VisuallySimilarTable, VisuallySimilarPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVisuallySimilarWith applies the HasEdge predicate on the "visuallySimilar" edge with a given conditions (other predicates).
func HasVisuallySimilarWith(preds ...predicate.Kanji) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, VisuallySimilarTable, VisuallySimilarPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Kanji) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Kanji) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Kanji) predicate.Kanji {
	return predicate.Kanji(func(s *sql.Selector) {
		p(s.Not())
	})
}
