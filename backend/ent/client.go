// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"sixels.io/manekani/ent/migrate"

	"sixels.io/manekani/ent/kanji"
	"sixels.io/manekani/ent/radical"
	"sixels.io/manekani/ent/user"
	"sixels.io/manekani/ent/vocabulary"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Kanji is the client for interacting with the Kanji builders.
	Kanji *KanjiClient
	// Radical is the client for interacting with the Radical builders.
	Radical *RadicalClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Vocabulary is the client for interacting with the Vocabulary builders.
	Vocabulary *VocabularyClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Kanji = NewKanjiClient(c.config)
	c.Radical = NewRadicalClient(c.config)
	c.User = NewUserClient(c.config)
	c.Vocabulary = NewVocabularyClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Kanji:      NewKanjiClient(cfg),
		Radical:    NewRadicalClient(cfg),
		User:       NewUserClient(cfg),
		Vocabulary: NewVocabularyClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Kanji:      NewKanjiClient(cfg),
		Radical:    NewRadicalClient(cfg),
		User:       NewUserClient(cfg),
		Vocabulary: NewVocabularyClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Kanji.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Kanji.Use(hooks...)
	c.Radical.Use(hooks...)
	c.User.Use(hooks...)
	c.Vocabulary.Use(hooks...)
}

// KanjiClient is a client for the Kanji schema.
type KanjiClient struct {
	config
}

// NewKanjiClient returns a client for the Kanji from the given config.
func NewKanjiClient(c config) *KanjiClient {
	return &KanjiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kanji.Hooks(f(g(h())))`.
func (c *KanjiClient) Use(hooks ...Hook) {
	c.hooks.Kanji = append(c.hooks.Kanji, hooks...)
}

// Create returns a builder for creating a Kanji entity.
func (c *KanjiClient) Create() *KanjiCreate {
	mutation := newKanjiMutation(c.config, OpCreate)
	return &KanjiCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Kanji entities.
func (c *KanjiClient) CreateBulk(builders ...*KanjiCreate) *KanjiCreateBulk {
	return &KanjiCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Kanji.
func (c *KanjiClient) Update() *KanjiUpdate {
	mutation := newKanjiMutation(c.config, OpUpdate)
	return &KanjiUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KanjiClient) UpdateOne(k *Kanji) *KanjiUpdateOne {
	mutation := newKanjiMutation(c.config, OpUpdateOne, withKanji(k))
	return &KanjiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KanjiClient) UpdateOneID(id uuid.UUID) *KanjiUpdateOne {
	mutation := newKanjiMutation(c.config, OpUpdateOne, withKanjiID(id))
	return &KanjiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Kanji.
func (c *KanjiClient) Delete() *KanjiDelete {
	mutation := newKanjiMutation(c.config, OpDelete)
	return &KanjiDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *KanjiClient) DeleteOne(k *Kanji) *KanjiDeleteOne {
	return c.DeleteOneID(k.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *KanjiClient) DeleteOneID(id uuid.UUID) *KanjiDeleteOne {
	builder := c.Delete().Where(kanji.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KanjiDeleteOne{builder}
}

// Query returns a query builder for Kanji.
func (c *KanjiClient) Query() *KanjiQuery {
	return &KanjiQuery{
		config: c.config,
	}
}

// Get returns a Kanji entity by its id.
func (c *KanjiClient) Get(ctx context.Context, id uuid.UUID) (*Kanji, error) {
	return c.Query().Where(kanji.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KanjiClient) GetX(ctx context.Context, id uuid.UUID) *Kanji {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVocabularies queries the vocabularies edge of a Kanji.
func (c *KanjiClient) QueryVocabularies(k *Kanji) *VocabularyQuery {
	query := &VocabularyQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kanji.Table, kanji.FieldID, id),
			sqlgraph.To(vocabulary.Table, vocabulary.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, kanji.VocabulariesTable, kanji.VocabulariesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRadicals queries the radicals edge of a Kanji.
func (c *KanjiClient) QueryRadicals(k *Kanji) *RadicalQuery {
	query := &RadicalQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kanji.Table, kanji.FieldID, id),
			sqlgraph.To(radical.Table, radical.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, kanji.RadicalsTable, kanji.RadicalsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KanjiClient) Hooks() []Hook {
	return c.hooks.Kanji
}

// RadicalClient is a client for the Radical schema.
type RadicalClient struct {
	config
}

// NewRadicalClient returns a client for the Radical from the given config.
func NewRadicalClient(c config) *RadicalClient {
	return &RadicalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `radical.Hooks(f(g(h())))`.
func (c *RadicalClient) Use(hooks ...Hook) {
	c.hooks.Radical = append(c.hooks.Radical, hooks...)
}

// Create returns a builder for creating a Radical entity.
func (c *RadicalClient) Create() *RadicalCreate {
	mutation := newRadicalMutation(c.config, OpCreate)
	return &RadicalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Radical entities.
func (c *RadicalClient) CreateBulk(builders ...*RadicalCreate) *RadicalCreateBulk {
	return &RadicalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Radical.
func (c *RadicalClient) Update() *RadicalUpdate {
	mutation := newRadicalMutation(c.config, OpUpdate)
	return &RadicalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RadicalClient) UpdateOne(r *Radical) *RadicalUpdateOne {
	mutation := newRadicalMutation(c.config, OpUpdateOne, withRadical(r))
	return &RadicalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RadicalClient) UpdateOneID(id uuid.UUID) *RadicalUpdateOne {
	mutation := newRadicalMutation(c.config, OpUpdateOne, withRadicalID(id))
	return &RadicalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Radical.
func (c *RadicalClient) Delete() *RadicalDelete {
	mutation := newRadicalMutation(c.config, OpDelete)
	return &RadicalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RadicalClient) DeleteOne(r *Radical) *RadicalDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RadicalClient) DeleteOneID(id uuid.UUID) *RadicalDeleteOne {
	builder := c.Delete().Where(radical.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RadicalDeleteOne{builder}
}

// Query returns a query builder for Radical.
func (c *RadicalClient) Query() *RadicalQuery {
	return &RadicalQuery{
		config: c.config,
	}
}

// Get returns a Radical entity by its id.
func (c *RadicalClient) Get(ctx context.Context, id uuid.UUID) (*Radical, error) {
	return c.Query().Where(radical.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RadicalClient) GetX(ctx context.Context, id uuid.UUID) *Radical {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKanjis queries the kanjis edge of a Radical.
func (c *RadicalClient) QueryKanjis(r *Radical) *KanjiQuery {
	query := &KanjiQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(radical.Table, radical.FieldID, id),
			sqlgraph.To(kanji.Table, kanji.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, radical.KanjisTable, radical.KanjisPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RadicalClient) Hooks() []Hook {
	return c.hooks.Radical
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// VocabularyClient is a client for the Vocabulary schema.
type VocabularyClient struct {
	config
}

// NewVocabularyClient returns a client for the Vocabulary from the given config.
func NewVocabularyClient(c config) *VocabularyClient {
	return &VocabularyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vocabulary.Hooks(f(g(h())))`.
func (c *VocabularyClient) Use(hooks ...Hook) {
	c.hooks.Vocabulary = append(c.hooks.Vocabulary, hooks...)
}

// Create returns a builder for creating a Vocabulary entity.
func (c *VocabularyClient) Create() *VocabularyCreate {
	mutation := newVocabularyMutation(c.config, OpCreate)
	return &VocabularyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vocabulary entities.
func (c *VocabularyClient) CreateBulk(builders ...*VocabularyCreate) *VocabularyCreateBulk {
	return &VocabularyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vocabulary.
func (c *VocabularyClient) Update() *VocabularyUpdate {
	mutation := newVocabularyMutation(c.config, OpUpdate)
	return &VocabularyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VocabularyClient) UpdateOne(v *Vocabulary) *VocabularyUpdateOne {
	mutation := newVocabularyMutation(c.config, OpUpdateOne, withVocabulary(v))
	return &VocabularyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VocabularyClient) UpdateOneID(id uuid.UUID) *VocabularyUpdateOne {
	mutation := newVocabularyMutation(c.config, OpUpdateOne, withVocabularyID(id))
	return &VocabularyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vocabulary.
func (c *VocabularyClient) Delete() *VocabularyDelete {
	mutation := newVocabularyMutation(c.config, OpDelete)
	return &VocabularyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VocabularyClient) DeleteOne(v *Vocabulary) *VocabularyDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VocabularyClient) DeleteOneID(id uuid.UUID) *VocabularyDeleteOne {
	builder := c.Delete().Where(vocabulary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VocabularyDeleteOne{builder}
}

// Query returns a query builder for Vocabulary.
func (c *VocabularyClient) Query() *VocabularyQuery {
	return &VocabularyQuery{
		config: c.config,
	}
}

// Get returns a Vocabulary entity by its id.
func (c *VocabularyClient) Get(ctx context.Context, id uuid.UUID) (*Vocabulary, error) {
	return c.Query().Where(vocabulary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VocabularyClient) GetX(ctx context.Context, id uuid.UUID) *Vocabulary {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKanjis queries the kanjis edge of a Vocabulary.
func (c *VocabularyClient) QueryKanjis(v *Vocabulary) *KanjiQuery {
	query := &KanjiQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vocabulary.Table, vocabulary.FieldID, id),
			sqlgraph.To(kanji.Table, kanji.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, vocabulary.KanjisTable, vocabulary.KanjisPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VocabularyClient) Hooks() []Hook {
	return c.hooks.Vocabulary
}
