// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/google/uuid"
	"sixels.io/manekani/ent/migrate"

	"sixels.io/manekani/ent/card"
	"sixels.io/manekani/ent/kanji"
	"sixels.io/manekani/ent/radical"
	"sixels.io/manekani/ent/review"
	"sixels.io/manekani/ent/subject"
	"sixels.io/manekani/ent/user"
	"sixels.io/manekani/ent/vocabulary"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Card is the client for interacting with the Card builders.
	Card *CardClient
	// Kanji is the client for interacting with the Kanji builders.
	Kanji *KanjiClient
	// Radical is the client for interacting with the Radical builders.
	Radical *RadicalClient
	// Review is the client for interacting with the Review builders.
	Review *ReviewClient
	// Subject is the client for interacting with the Subject builders.
	Subject *SubjectClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// Vocabulary is the client for interacting with the Vocabulary builders.
	Vocabulary *VocabularyClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Card = NewCardClient(c.config)
	c.Kanji = NewKanjiClient(c.config)
	c.Radical = NewRadicalClient(c.config)
	c.Review = NewReviewClient(c.config)
	c.Subject = NewSubjectClient(c.config)
	c.User = NewUserClient(c.config)
	c.Vocabulary = NewVocabularyClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Card:       NewCardClient(cfg),
		Kanji:      NewKanjiClient(cfg),
		Radical:    NewRadicalClient(cfg),
		Review:     NewReviewClient(cfg),
		Subject:    NewSubjectClient(cfg),
		User:       NewUserClient(cfg),
		Vocabulary: NewVocabularyClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Card:       NewCardClient(cfg),
		Kanji:      NewKanjiClient(cfg),
		Radical:    NewRadicalClient(cfg),
		Review:     NewReviewClient(cfg),
		Subject:    NewSubjectClient(cfg),
		User:       NewUserClient(cfg),
		Vocabulary: NewVocabularyClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Card.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Card.Use(hooks...)
	c.Kanji.Use(hooks...)
	c.Radical.Use(hooks...)
	c.Review.Use(hooks...)
	c.Subject.Use(hooks...)
	c.User.Use(hooks...)
	c.Vocabulary.Use(hooks...)
}

// CardClient is a client for the Card schema.
type CardClient struct {
	config
}

// NewCardClient returns a client for the Card from the given config.
func NewCardClient(c config) *CardClient {
	return &CardClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `card.Hooks(f(g(h())))`.
func (c *CardClient) Use(hooks ...Hook) {
	c.hooks.Card = append(c.hooks.Card, hooks...)
}

// Create returns a builder for creating a Card entity.
func (c *CardClient) Create() *CardCreate {
	mutation := newCardMutation(c.config, OpCreate)
	return &CardCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Card entities.
func (c *CardClient) CreateBulk(builders ...*CardCreate) *CardCreateBulk {
	return &CardCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Card.
func (c *CardClient) Update() *CardUpdate {
	mutation := newCardMutation(c.config, OpUpdate)
	return &CardUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CardClient) UpdateOne(ca *Card) *CardUpdateOne {
	mutation := newCardMutation(c.config, OpUpdateOne, withCard(ca))
	return &CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CardClient) UpdateOneID(id uuid.UUID) *CardUpdateOne {
	mutation := newCardMutation(c.config, OpUpdateOne, withCardID(id))
	return &CardUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Card.
func (c *CardClient) Delete() *CardDelete {
	mutation := newCardMutation(c.config, OpDelete)
	return &CardDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CardClient) DeleteOne(ca *Card) *CardDeleteOne {
	return c.DeleteOneID(ca.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CardClient) DeleteOneID(id uuid.UUID) *CardDeleteOne {
	builder := c.Delete().Where(card.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CardDeleteOne{builder}
}

// Query returns a query builder for Card.
func (c *CardClient) Query() *CardQuery {
	return &CardQuery{
		config: c.config,
	}
}

// Get returns a Card entity by its id.
func (c *CardClient) Get(ctx context.Context, id uuid.UUID) (*Card, error) {
	return c.Query().Where(card.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CardClient) GetX(ctx context.Context, id uuid.UUID) *Card {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Card.
func (c *CardClient) QueryUser(ca *Card) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, card.UserTable, card.UserColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubject queries the subject edge of a Card.
func (c *CardClient) QuerySubject(ca *Card) *SubjectQuery {
	query := &SubjectQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(subject.Table, subject.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, card.SubjectTable, card.SubjectColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryReviews queries the reviews edge of a Card.
func (c *CardClient) QueryReviews(ca *Card) *ReviewQuery {
	query := &ReviewQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := ca.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(card.Table, card.FieldID, id),
			sqlgraph.To(review.Table, review.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, card.ReviewsTable, card.ReviewsColumn),
		)
		fromV = sqlgraph.Neighbors(ca.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CardClient) Hooks() []Hook {
	return c.hooks.Card
}

// KanjiClient is a client for the Kanji schema.
type KanjiClient struct {
	config
}

// NewKanjiClient returns a client for the Kanji from the given config.
func NewKanjiClient(c config) *KanjiClient {
	return &KanjiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `kanji.Hooks(f(g(h())))`.
func (c *KanjiClient) Use(hooks ...Hook) {
	c.hooks.Kanji = append(c.hooks.Kanji, hooks...)
}

// Create returns a builder for creating a Kanji entity.
func (c *KanjiClient) Create() *KanjiCreate {
	mutation := newKanjiMutation(c.config, OpCreate)
	return &KanjiCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Kanji entities.
func (c *KanjiClient) CreateBulk(builders ...*KanjiCreate) *KanjiCreateBulk {
	return &KanjiCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Kanji.
func (c *KanjiClient) Update() *KanjiUpdate {
	mutation := newKanjiMutation(c.config, OpUpdate)
	return &KanjiUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *KanjiClient) UpdateOne(k *Kanji) *KanjiUpdateOne {
	mutation := newKanjiMutation(c.config, OpUpdateOne, withKanji(k))
	return &KanjiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *KanjiClient) UpdateOneID(id uuid.UUID) *KanjiUpdateOne {
	mutation := newKanjiMutation(c.config, OpUpdateOne, withKanjiID(id))
	return &KanjiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Kanji.
func (c *KanjiClient) Delete() *KanjiDelete {
	mutation := newKanjiMutation(c.config, OpDelete)
	return &KanjiDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *KanjiClient) DeleteOne(k *Kanji) *KanjiDeleteOne {
	return c.DeleteOneID(k.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *KanjiClient) DeleteOneID(id uuid.UUID) *KanjiDeleteOne {
	builder := c.Delete().Where(kanji.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &KanjiDeleteOne{builder}
}

// Query returns a query builder for Kanji.
func (c *KanjiClient) Query() *KanjiQuery {
	return &KanjiQuery{
		config: c.config,
	}
}

// Get returns a Kanji entity by its id.
func (c *KanjiClient) Get(ctx context.Context, id uuid.UUID) (*Kanji, error) {
	return c.Query().Where(kanji.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *KanjiClient) GetX(ctx context.Context, id uuid.UUID) *Kanji {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryVocabularies queries the vocabularies edge of a Kanji.
func (c *KanjiClient) QueryVocabularies(k *Kanji) *VocabularyQuery {
	query := &VocabularyQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kanji.Table, kanji.FieldID, id),
			sqlgraph.To(vocabulary.Table, vocabulary.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, kanji.VocabulariesTable, kanji.VocabulariesPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRadicals queries the radicals edge of a Kanji.
func (c *KanjiClient) QueryRadicals(k *Kanji) *RadicalQuery {
	query := &RadicalQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kanji.Table, kanji.FieldID, id),
			sqlgraph.To(radical.Table, radical.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, kanji.RadicalsTable, kanji.RadicalsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVisuallySimilar queries the visuallySimilar edge of a Kanji.
func (c *KanjiClient) QueryVisuallySimilar(k *Kanji) *KanjiQuery {
	query := &KanjiQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := k.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(kanji.Table, kanji.FieldID, id),
			sqlgraph.To(kanji.Table, kanji.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, kanji.VisuallySimilarTable, kanji.VisuallySimilarPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(k.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *KanjiClient) Hooks() []Hook {
	return c.hooks.Kanji
}

// RadicalClient is a client for the Radical schema.
type RadicalClient struct {
	config
}

// NewRadicalClient returns a client for the Radical from the given config.
func NewRadicalClient(c config) *RadicalClient {
	return &RadicalClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `radical.Hooks(f(g(h())))`.
func (c *RadicalClient) Use(hooks ...Hook) {
	c.hooks.Radical = append(c.hooks.Radical, hooks...)
}

// Create returns a builder for creating a Radical entity.
func (c *RadicalClient) Create() *RadicalCreate {
	mutation := newRadicalMutation(c.config, OpCreate)
	return &RadicalCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Radical entities.
func (c *RadicalClient) CreateBulk(builders ...*RadicalCreate) *RadicalCreateBulk {
	return &RadicalCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Radical.
func (c *RadicalClient) Update() *RadicalUpdate {
	mutation := newRadicalMutation(c.config, OpUpdate)
	return &RadicalUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RadicalClient) UpdateOne(r *Radical) *RadicalUpdateOne {
	mutation := newRadicalMutation(c.config, OpUpdateOne, withRadical(r))
	return &RadicalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RadicalClient) UpdateOneID(id uuid.UUID) *RadicalUpdateOne {
	mutation := newRadicalMutation(c.config, OpUpdateOne, withRadicalID(id))
	return &RadicalUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Radical.
func (c *RadicalClient) Delete() *RadicalDelete {
	mutation := newRadicalMutation(c.config, OpDelete)
	return &RadicalDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *RadicalClient) DeleteOne(r *Radical) *RadicalDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *RadicalClient) DeleteOneID(id uuid.UUID) *RadicalDeleteOne {
	builder := c.Delete().Where(radical.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RadicalDeleteOne{builder}
}

// Query returns a query builder for Radical.
func (c *RadicalClient) Query() *RadicalQuery {
	return &RadicalQuery{
		config: c.config,
	}
}

// Get returns a Radical entity by its id.
func (c *RadicalClient) Get(ctx context.Context, id uuid.UUID) (*Radical, error) {
	return c.Query().Where(radical.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RadicalClient) GetX(ctx context.Context, id uuid.UUID) *Radical {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKanjis queries the kanjis edge of a Radical.
func (c *RadicalClient) QueryKanjis(r *Radical) *KanjiQuery {
	query := &KanjiQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(radical.Table, radical.FieldID, id),
			sqlgraph.To(kanji.Table, kanji.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, radical.KanjisTable, radical.KanjisPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RadicalClient) Hooks() []Hook {
	return c.hooks.Radical
}

// ReviewClient is a client for the Review schema.
type ReviewClient struct {
	config
}

// NewReviewClient returns a client for the Review from the given config.
func NewReviewClient(c config) *ReviewClient {
	return &ReviewClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `review.Hooks(f(g(h())))`.
func (c *ReviewClient) Use(hooks ...Hook) {
	c.hooks.Review = append(c.hooks.Review, hooks...)
}

// Create returns a builder for creating a Review entity.
func (c *ReviewClient) Create() *ReviewCreate {
	mutation := newReviewMutation(c.config, OpCreate)
	return &ReviewCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Review entities.
func (c *ReviewClient) CreateBulk(builders ...*ReviewCreate) *ReviewCreateBulk {
	return &ReviewCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Review.
func (c *ReviewClient) Update() *ReviewUpdate {
	mutation := newReviewMutation(c.config, OpUpdate)
	return &ReviewUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ReviewClient) UpdateOne(r *Review) *ReviewUpdateOne {
	mutation := newReviewMutation(c.config, OpUpdateOne, withReview(r))
	return &ReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ReviewClient) UpdateOneID(id uuid.UUID) *ReviewUpdateOne {
	mutation := newReviewMutation(c.config, OpUpdateOne, withReviewID(id))
	return &ReviewUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Review.
func (c *ReviewClient) Delete() *ReviewDelete {
	mutation := newReviewMutation(c.config, OpDelete)
	return &ReviewDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ReviewClient) DeleteOne(r *Review) *ReviewDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ReviewClient) DeleteOneID(id uuid.UUID) *ReviewDeleteOne {
	builder := c.Delete().Where(review.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ReviewDeleteOne{builder}
}

// Query returns a query builder for Review.
func (c *ReviewClient) Query() *ReviewQuery {
	return &ReviewQuery{
		config: c.config,
	}
}

// Get returns a Review entity by its id.
func (c *ReviewClient) Get(ctx context.Context, id uuid.UUID) (*Review, error) {
	return c.Query().Where(review.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ReviewClient) GetX(ctx context.Context, id uuid.UUID) *Review {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCard queries the card edge of a Review.
func (c *ReviewClient) QueryCard(r *Review) *CardQuery {
	query := &CardQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(review.Table, review.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, review.CardTable, review.CardColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ReviewClient) Hooks() []Hook {
	return c.hooks.Review
}

// SubjectClient is a client for the Subject schema.
type SubjectClient struct {
	config
}

// NewSubjectClient returns a client for the Subject from the given config.
func NewSubjectClient(c config) *SubjectClient {
	return &SubjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `subject.Hooks(f(g(h())))`.
func (c *SubjectClient) Use(hooks ...Hook) {
	c.hooks.Subject = append(c.hooks.Subject, hooks...)
}

// Create returns a builder for creating a Subject entity.
func (c *SubjectClient) Create() *SubjectCreate {
	mutation := newSubjectMutation(c.config, OpCreate)
	return &SubjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Subject entities.
func (c *SubjectClient) CreateBulk(builders ...*SubjectCreate) *SubjectCreateBulk {
	return &SubjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Subject.
func (c *SubjectClient) Update() *SubjectUpdate {
	mutation := newSubjectMutation(c.config, OpUpdate)
	return &SubjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SubjectClient) UpdateOne(s *Subject) *SubjectUpdateOne {
	mutation := newSubjectMutation(c.config, OpUpdateOne, withSubject(s))
	return &SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SubjectClient) UpdateOneID(id uuid.UUID) *SubjectUpdateOne {
	mutation := newSubjectMutation(c.config, OpUpdateOne, withSubjectID(id))
	return &SubjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Subject.
func (c *SubjectClient) Delete() *SubjectDelete {
	mutation := newSubjectMutation(c.config, OpDelete)
	return &SubjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SubjectClient) DeleteOne(s *Subject) *SubjectDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SubjectClient) DeleteOneID(id uuid.UUID) *SubjectDeleteOne {
	builder := c.Delete().Where(subject.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SubjectDeleteOne{builder}
}

// Query returns a query builder for Subject.
func (c *SubjectClient) Query() *SubjectQuery {
	return &SubjectQuery{
		config: c.config,
	}
}

// Get returns a Subject entity by its id.
func (c *SubjectClient) Get(ctx context.Context, id uuid.UUID) (*Subject, error) {
	return c.Query().Where(subject.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SubjectClient) GetX(ctx context.Context, id uuid.UUID) *Subject {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a Subject.
func (c *SubjectClient) QueryCards(s *Subject) *CardQuery {
	query := &CardQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(subject.Table, subject.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, subject.CardsTable, subject.CardsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SubjectClient) Hooks() []Hook {
	return c.hooks.Subject
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCards queries the cards edge of a User.
func (c *UserClient) QueryCards(u *User) *CardQuery {
	query := &CardQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(card.Table, card.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CardsTable, user.CardsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// VocabularyClient is a client for the Vocabulary schema.
type VocabularyClient struct {
	config
}

// NewVocabularyClient returns a client for the Vocabulary from the given config.
func NewVocabularyClient(c config) *VocabularyClient {
	return &VocabularyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `vocabulary.Hooks(f(g(h())))`.
func (c *VocabularyClient) Use(hooks ...Hook) {
	c.hooks.Vocabulary = append(c.hooks.Vocabulary, hooks...)
}

// Create returns a builder for creating a Vocabulary entity.
func (c *VocabularyClient) Create() *VocabularyCreate {
	mutation := newVocabularyMutation(c.config, OpCreate)
	return &VocabularyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Vocabulary entities.
func (c *VocabularyClient) CreateBulk(builders ...*VocabularyCreate) *VocabularyCreateBulk {
	return &VocabularyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Vocabulary.
func (c *VocabularyClient) Update() *VocabularyUpdate {
	mutation := newVocabularyMutation(c.config, OpUpdate)
	return &VocabularyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *VocabularyClient) UpdateOne(v *Vocabulary) *VocabularyUpdateOne {
	mutation := newVocabularyMutation(c.config, OpUpdateOne, withVocabulary(v))
	return &VocabularyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *VocabularyClient) UpdateOneID(id uuid.UUID) *VocabularyUpdateOne {
	mutation := newVocabularyMutation(c.config, OpUpdateOne, withVocabularyID(id))
	return &VocabularyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Vocabulary.
func (c *VocabularyClient) Delete() *VocabularyDelete {
	mutation := newVocabularyMutation(c.config, OpDelete)
	return &VocabularyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *VocabularyClient) DeleteOne(v *Vocabulary) *VocabularyDeleteOne {
	return c.DeleteOneID(v.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *VocabularyClient) DeleteOneID(id uuid.UUID) *VocabularyDeleteOne {
	builder := c.Delete().Where(vocabulary.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &VocabularyDeleteOne{builder}
}

// Query returns a query builder for Vocabulary.
func (c *VocabularyClient) Query() *VocabularyQuery {
	return &VocabularyQuery{
		config: c.config,
	}
}

// Get returns a Vocabulary entity by its id.
func (c *VocabularyClient) Get(ctx context.Context, id uuid.UUID) (*Vocabulary, error) {
	return c.Query().Where(vocabulary.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *VocabularyClient) GetX(ctx context.Context, id uuid.UUID) *Vocabulary {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryKanjis queries the kanjis edge of a Vocabulary.
func (c *VocabularyClient) QueryKanjis(v *Vocabulary) *KanjiQuery {
	query := &KanjiQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := v.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(vocabulary.Table, vocabulary.FieldID, id),
			sqlgraph.To(kanji.Table, kanji.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, vocabulary.KanjisTable, vocabulary.KanjisPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(v.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *VocabularyClient) Hooks() []Hook {
	return c.hooks.Vocabulary
}
