// Code generated by ent, DO NOT EDIT.

package subject

import (
	"fmt"
)

const (
	// Label holds the string label denoting the subject type in the database.
	Label = "subject"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKind holds the string denoting the kind field in the database.
	FieldKind = "kind"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// EdgeCards holds the string denoting the cards edge name in mutations.
	EdgeCards = "cards"
	// Table holds the table name of the subject in the database.
	Table = "subjects"
	// CardsTable is the table that holds the cards relation/edge.
	CardsTable = "cards"
	// CardsInverseTable is the table name for the Card entity.
	// It exists in this package in order to avoid circular dependency with the "card" package.
	CardsInverseTable = "cards"
	// CardsColumn is the table column denoting the cards relation/edge.
	CardsColumn = "subject_cards"
)

// Columns holds all SQL columns for subject fields.
var Columns = []string{
	FieldID,
	FieldKind,
	FieldLevel,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// LevelValidator is a validator for the "level" field. It is called by the builders before save.
	LevelValidator func(int32) error
)

// Kind defines the type for the "kind" enum field.
type Kind string

// Kind values.
const (
	KindRadical    Kind = "radical"
	KindKanji      Kind = "kanji"
	KindVocabulary Kind = "vocabulary"
)

func (k Kind) String() string {
	return string(k)
}

// KindValidator is a validator for the "kind" field enum values. It is called by the builders before save.
func KindValidator(k Kind) error {
	switch k {
	case KindRadical, KindKanji, KindVocabulary:
		return nil
	default:
		return fmt.Errorf("subject: invalid enum value for kind field: %q", k)
	}
}
