// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"sixels.io/manekani/ent/deck"
	"sixels.io/manekani/ent/deckprogress"
	"sixels.io/manekani/ent/user"
)

// DeckProgress is the model entity for the DeckProgress schema.
type DeckProgress struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Level holds the value of the "level" field.
	Level uint32 `json:"level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DeckProgressQuery when eager-loading is set.
	Edges               DeckProgressEdges `json:"edges"`
	deck_users_progress *uuid.UUID
	user_decks_progress *string
}

// DeckProgressEdges holds the relations/edges for other nodes in the graph.
type DeckProgressEdges struct {
	// Cards holds the value of the cards edge.
	Cards []*Card `json:"cards,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Deck holds the value of the deck edge.
	Deck *Deck `json:"deck,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CardsOrErr returns the Cards value or an error if the edge
// was not loaded in eager-loading.
func (e DeckProgressEdges) CardsOrErr() ([]*Card, error) {
	if e.loadedTypes[0] {
		return e.Cards, nil
	}
	return nil, &NotLoadedError{edge: "cards"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeckProgressEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// DeckOrErr returns the Deck value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DeckProgressEdges) DeckOrErr() (*Deck, error) {
	if e.loadedTypes[2] {
		if e.Deck == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: deck.Label}
		}
		return e.Deck, nil
	}
	return nil, &NotLoadedError{edge: "deck"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*DeckProgress) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deckprogress.FieldID, deckprogress.FieldLevel:
			values[i] = new(sql.NullInt64)
		case deckprogress.ForeignKeys[0]: // deck_users_progress
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case deckprogress.ForeignKeys[1]: // user_decks_progress
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type DeckProgress", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the DeckProgress fields.
func (dp *DeckProgress) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deckprogress.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			dp.ID = int(value.Int64)
		case deckprogress.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				dp.Level = uint32(value.Int64)
			}
		case deckprogress.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field deck_users_progress", values[i])
			} else if value.Valid {
				dp.deck_users_progress = new(uuid.UUID)
				*dp.deck_users_progress = *value.S.(*uuid.UUID)
			}
		case deckprogress.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_decks_progress", values[i])
			} else if value.Valid {
				dp.user_decks_progress = new(string)
				*dp.user_decks_progress = value.String
			}
		}
	}
	return nil
}

// QueryCards queries the "cards" edge of the DeckProgress entity.
func (dp *DeckProgress) QueryCards() *CardQuery {
	return (&DeckProgressClient{config: dp.config}).QueryCards(dp)
}

// QueryUser queries the "user" edge of the DeckProgress entity.
func (dp *DeckProgress) QueryUser() *UserQuery {
	return (&DeckProgressClient{config: dp.config}).QueryUser(dp)
}

// QueryDeck queries the "deck" edge of the DeckProgress entity.
func (dp *DeckProgress) QueryDeck() *DeckQuery {
	return (&DeckProgressClient{config: dp.config}).QueryDeck(dp)
}

// Update returns a builder for updating this DeckProgress.
// Note that you need to call DeckProgress.Unwrap() before calling this method if this DeckProgress
// was returned from a transaction, and the transaction was committed or rolled back.
func (dp *DeckProgress) Update() *DeckProgressUpdateOne {
	return (&DeckProgressClient{config: dp.config}).UpdateOne(dp)
}

// Unwrap unwraps the DeckProgress entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (dp *DeckProgress) Unwrap() *DeckProgress {
	_tx, ok := dp.config.driver.(*txDriver)
	if !ok {
		panic("ent: DeckProgress is not a transactional entity")
	}
	dp.config.driver = _tx.drv
	return dp
}

// String implements the fmt.Stringer.
func (dp *DeckProgress) String() string {
	var builder strings.Builder
	builder.WriteString("DeckProgress(")
	builder.WriteString(fmt.Sprintf("id=%v, ", dp.ID))
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", dp.Level))
	builder.WriteByte(')')
	return builder.String()
}

// DeckProgresses is a parsable slice of DeckProgress.
type DeckProgresses []*DeckProgress

func (dp DeckProgresses) config(cfg config) {
	for _i := range dp {
		dp[_i].config = cfg
	}
}
