// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"sixels.io/manekani/ent/kanji"
	"sixels.io/manekani/ent/predicate"
	"sixels.io/manekani/ent/radical"
)

// RadicalUpdate is the builder for updating Radical entities.
type RadicalUpdate struct {
	config
	hooks    []Hook
	mutation *RadicalMutation
}

// Where appends a list predicates to the RadicalUpdate builder.
func (ru *RadicalUpdate) Where(ps ...predicate.Radical) *RadicalUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RadicalUpdate) SetUpdatedAt(t time.Time) *RadicalUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetName sets the "name" field.
func (ru *RadicalUpdate) SetName(s string) *RadicalUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetLevel sets the "level" field.
func (ru *RadicalUpdate) SetLevel(i int32) *RadicalUpdate {
	ru.mutation.ResetLevel()
	ru.mutation.SetLevel(i)
	return ru
}

// AddLevel adds i to the "level" field.
func (ru *RadicalUpdate) AddLevel(i int32) *RadicalUpdate {
	ru.mutation.AddLevel(i)
	return ru
}

// SetSymbol sets the "symbol" field.
func (ru *RadicalUpdate) SetSymbol(s string) *RadicalUpdate {
	ru.mutation.SetSymbol(s)
	return ru
}

// SetMeaningMnemonic sets the "meaning_mnemonic" field.
func (ru *RadicalUpdate) SetMeaningMnemonic(s string) *RadicalUpdate {
	ru.mutation.SetMeaningMnemonic(s)
	return ru
}

// AddKanjiIDs adds the "kanjis" edge to the Kanji entity by IDs.
func (ru *RadicalUpdate) AddKanjiIDs(ids ...uuid.UUID) *RadicalUpdate {
	ru.mutation.AddKanjiIDs(ids...)
	return ru
}

// AddKanjis adds the "kanjis" edges to the Kanji entity.
func (ru *RadicalUpdate) AddKanjis(k ...*Kanji) *RadicalUpdate {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ru.AddKanjiIDs(ids...)
}

// Mutation returns the RadicalMutation object of the builder.
func (ru *RadicalUpdate) Mutation() *RadicalMutation {
	return ru.mutation
}

// ClearKanjis clears all "kanjis" edges to the Kanji entity.
func (ru *RadicalUpdate) ClearKanjis() *RadicalUpdate {
	ru.mutation.ClearKanjis()
	return ru
}

// RemoveKanjiIDs removes the "kanjis" edge to Kanji entities by IDs.
func (ru *RadicalUpdate) RemoveKanjiIDs(ids ...uuid.UUID) *RadicalUpdate {
	ru.mutation.RemoveKanjiIDs(ids...)
	return ru
}

// RemoveKanjis removes "kanjis" edges to Kanji entities.
func (ru *RadicalUpdate) RemoveKanjis(k ...*Kanji) *RadicalUpdate {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ru.RemoveKanjiIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RadicalUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RadicalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RadicalUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RadicalUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RadicalUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RadicalUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := radical.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RadicalUpdate) check() error {
	if v, ok := ru.mutation.Name(); ok {
		if err := radical.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Radical.name": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Level(); ok {
		if err := radical.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Radical.level": %w`, err)}
		}
	}
	if v, ok := ru.mutation.Symbol(); ok {
		if err := radical.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Radical.symbol": %w`, err)}
		}
	}
	if v, ok := ru.mutation.MeaningMnemonic(); ok {
		if err := radical.MeaningMnemonicValidator(v); err != nil {
			return &ValidationError{Name: "meaning_mnemonic", err: fmt.Errorf(`ent: validator failed for field "Radical.meaning_mnemonic": %w`, err)}
		}
	}
	return nil
}

func (ru *RadicalUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   radical.Table,
			Columns: radical.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: radical.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(radical.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(radical.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Level(); ok {
		_spec.SetField(radical.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.AddedLevel(); ok {
		_spec.AddField(radical.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := ru.mutation.Symbol(); ok {
		_spec.SetField(radical.FieldSymbol, field.TypeString, value)
	}
	if value, ok := ru.mutation.MeaningMnemonic(); ok {
		_spec.SetField(radical.FieldMeaningMnemonic, field.TypeString, value)
	}
	if ru.mutation.KanjisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   radical.KanjisTable,
			Columns: radical.KanjisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: kanji.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedKanjisIDs(); len(nodes) > 0 && !ru.mutation.KanjisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   radical.KanjisTable,
			Columns: radical.KanjisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: kanji.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.KanjisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   radical.KanjisTable,
			Columns: radical.KanjisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: kanji.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{radical.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RadicalUpdateOne is the builder for updating a single Radical entity.
type RadicalUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RadicalMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RadicalUpdateOne) SetUpdatedAt(t time.Time) *RadicalUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetName sets the "name" field.
func (ruo *RadicalUpdateOne) SetName(s string) *RadicalUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetLevel sets the "level" field.
func (ruo *RadicalUpdateOne) SetLevel(i int32) *RadicalUpdateOne {
	ruo.mutation.ResetLevel()
	ruo.mutation.SetLevel(i)
	return ruo
}

// AddLevel adds i to the "level" field.
func (ruo *RadicalUpdateOne) AddLevel(i int32) *RadicalUpdateOne {
	ruo.mutation.AddLevel(i)
	return ruo
}

// SetSymbol sets the "symbol" field.
func (ruo *RadicalUpdateOne) SetSymbol(s string) *RadicalUpdateOne {
	ruo.mutation.SetSymbol(s)
	return ruo
}

// SetMeaningMnemonic sets the "meaning_mnemonic" field.
func (ruo *RadicalUpdateOne) SetMeaningMnemonic(s string) *RadicalUpdateOne {
	ruo.mutation.SetMeaningMnemonic(s)
	return ruo
}

// AddKanjiIDs adds the "kanjis" edge to the Kanji entity by IDs.
func (ruo *RadicalUpdateOne) AddKanjiIDs(ids ...uuid.UUID) *RadicalUpdateOne {
	ruo.mutation.AddKanjiIDs(ids...)
	return ruo
}

// AddKanjis adds the "kanjis" edges to the Kanji entity.
func (ruo *RadicalUpdateOne) AddKanjis(k ...*Kanji) *RadicalUpdateOne {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ruo.AddKanjiIDs(ids...)
}

// Mutation returns the RadicalMutation object of the builder.
func (ruo *RadicalUpdateOne) Mutation() *RadicalMutation {
	return ruo.mutation
}

// ClearKanjis clears all "kanjis" edges to the Kanji entity.
func (ruo *RadicalUpdateOne) ClearKanjis() *RadicalUpdateOne {
	ruo.mutation.ClearKanjis()
	return ruo
}

// RemoveKanjiIDs removes the "kanjis" edge to Kanji entities by IDs.
func (ruo *RadicalUpdateOne) RemoveKanjiIDs(ids ...uuid.UUID) *RadicalUpdateOne {
	ruo.mutation.RemoveKanjiIDs(ids...)
	return ruo
}

// RemoveKanjis removes "kanjis" edges to Kanji entities.
func (ruo *RadicalUpdateOne) RemoveKanjis(k ...*Kanji) *RadicalUpdateOne {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return ruo.RemoveKanjiIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RadicalUpdateOne) Select(field string, fields ...string) *RadicalUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Radical entity.
func (ruo *RadicalUpdateOne) Save(ctx context.Context) (*Radical, error) {
	var (
		err  error
		node *Radical
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RadicalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Radical)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RadicalMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RadicalUpdateOne) SaveX(ctx context.Context) *Radical {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RadicalUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RadicalUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RadicalUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := radical.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RadicalUpdateOne) check() error {
	if v, ok := ruo.mutation.Name(); ok {
		if err := radical.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Radical.name": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Level(); ok {
		if err := radical.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Radical.level": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.Symbol(); ok {
		if err := radical.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Radical.symbol": %w`, err)}
		}
	}
	if v, ok := ruo.mutation.MeaningMnemonic(); ok {
		if err := radical.MeaningMnemonicValidator(v); err != nil {
			return &ValidationError{Name: "meaning_mnemonic", err: fmt.Errorf(`ent: validator failed for field "Radical.meaning_mnemonic": %w`, err)}
		}
	}
	return nil
}

func (ruo *RadicalUpdateOne) sqlSave(ctx context.Context) (_node *Radical, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   radical.Table,
			Columns: radical.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: radical.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Radical.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, radical.FieldID)
		for _, f := range fields {
			if !radical.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != radical.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(radical.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(radical.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Level(); ok {
		_spec.SetField(radical.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.AddedLevel(); ok {
		_spec.AddField(radical.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := ruo.mutation.Symbol(); ok {
		_spec.SetField(radical.FieldSymbol, field.TypeString, value)
	}
	if value, ok := ruo.mutation.MeaningMnemonic(); ok {
		_spec.SetField(radical.FieldMeaningMnemonic, field.TypeString, value)
	}
	if ruo.mutation.KanjisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   radical.KanjisTable,
			Columns: radical.KanjisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: kanji.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedKanjisIDs(); len(nodes) > 0 && !ruo.mutation.KanjisCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   radical.KanjisTable,
			Columns: radical.KanjisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: kanji.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.KanjisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   radical.KanjisTable,
			Columns: radical.KanjisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: kanji.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Radical{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{radical.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
