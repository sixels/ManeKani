// Code generated by ent, DO NOT EDIT.

package review

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"sixels.io/manekani/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// MeaningErrors applies equality check predicate on the "meaning_errors" field. It's identical to MeaningErrorsEQ.
func MeaningErrors(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeaningErrors), v))
	})
}

// ReadingErrors applies equality check predicate on the "reading_errors" field. It's identical to ReadingErrorsEQ.
func ReadingErrors(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReadingErrors), v))
	})
}

// StartProgress applies equality check predicate on the "start_progress" field. It's identical to StartProgressEQ.
func StartProgress(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartProgress), v))
	})
}

// EndProgress applies equality check predicate on the "end_progress" field. It's identical to EndProgressEQ.
func EndProgress(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndProgress), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Review {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Review {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// MeaningErrorsEQ applies the EQ predicate on the "meaning_errors" field.
func MeaningErrorsEQ(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeaningErrors), v))
	})
}

// MeaningErrorsNEQ applies the NEQ predicate on the "meaning_errors" field.
func MeaningErrorsNEQ(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMeaningErrors), v))
	})
}

// MeaningErrorsIn applies the In predicate on the "meaning_errors" field.
func MeaningErrorsIn(vs ...int) predicate.Review {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMeaningErrors), v...))
	})
}

// MeaningErrorsNotIn applies the NotIn predicate on the "meaning_errors" field.
func MeaningErrorsNotIn(vs ...int) predicate.Review {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMeaningErrors), v...))
	})
}

// MeaningErrorsGT applies the GT predicate on the "meaning_errors" field.
func MeaningErrorsGT(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMeaningErrors), v))
	})
}

// MeaningErrorsGTE applies the GTE predicate on the "meaning_errors" field.
func MeaningErrorsGTE(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMeaningErrors), v))
	})
}

// MeaningErrorsLT applies the LT predicate on the "meaning_errors" field.
func MeaningErrorsLT(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMeaningErrors), v))
	})
}

// MeaningErrorsLTE applies the LTE predicate on the "meaning_errors" field.
func MeaningErrorsLTE(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMeaningErrors), v))
	})
}

// ReadingErrorsEQ applies the EQ predicate on the "reading_errors" field.
func ReadingErrorsEQ(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReadingErrors), v))
	})
}

// ReadingErrorsNEQ applies the NEQ predicate on the "reading_errors" field.
func ReadingErrorsNEQ(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReadingErrors), v))
	})
}

// ReadingErrorsIn applies the In predicate on the "reading_errors" field.
func ReadingErrorsIn(vs ...int) predicate.Review {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReadingErrors), v...))
	})
}

// ReadingErrorsNotIn applies the NotIn predicate on the "reading_errors" field.
func ReadingErrorsNotIn(vs ...int) predicate.Review {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReadingErrors), v...))
	})
}

// ReadingErrorsGT applies the GT predicate on the "reading_errors" field.
func ReadingErrorsGT(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReadingErrors), v))
	})
}

// ReadingErrorsGTE applies the GTE predicate on the "reading_errors" field.
func ReadingErrorsGTE(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReadingErrors), v))
	})
}

// ReadingErrorsLT applies the LT predicate on the "reading_errors" field.
func ReadingErrorsLT(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReadingErrors), v))
	})
}

// ReadingErrorsLTE applies the LTE predicate on the "reading_errors" field.
func ReadingErrorsLTE(v int) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReadingErrors), v))
	})
}

// StartProgressEQ applies the EQ predicate on the "start_progress" field.
func StartProgressEQ(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartProgress), v))
	})
}

// StartProgressNEQ applies the NEQ predicate on the "start_progress" field.
func StartProgressNEQ(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartProgress), v))
	})
}

// StartProgressIn applies the In predicate on the "start_progress" field.
func StartProgressIn(vs ...uint8) predicate.Review {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartProgress), v...))
	})
}

// StartProgressNotIn applies the NotIn predicate on the "start_progress" field.
func StartProgressNotIn(vs ...uint8) predicate.Review {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartProgress), v...))
	})
}

// StartProgressGT applies the GT predicate on the "start_progress" field.
func StartProgressGT(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartProgress), v))
	})
}

// StartProgressGTE applies the GTE predicate on the "start_progress" field.
func StartProgressGTE(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartProgress), v))
	})
}

// StartProgressLT applies the LT predicate on the "start_progress" field.
func StartProgressLT(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartProgress), v))
	})
}

// StartProgressLTE applies the LTE predicate on the "start_progress" field.
func StartProgressLTE(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartProgress), v))
	})
}

// EndProgressEQ applies the EQ predicate on the "end_progress" field.
func EndProgressEQ(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndProgress), v))
	})
}

// EndProgressNEQ applies the NEQ predicate on the "end_progress" field.
func EndProgressNEQ(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndProgress), v))
	})
}

// EndProgressIn applies the In predicate on the "end_progress" field.
func EndProgressIn(vs ...uint8) predicate.Review {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndProgress), v...))
	})
}

// EndProgressNotIn applies the NotIn predicate on the "end_progress" field.
func EndProgressNotIn(vs ...uint8) predicate.Review {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndProgress), v...))
	})
}

// EndProgressGT applies the GT predicate on the "end_progress" field.
func EndProgressGT(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndProgress), v))
	})
}

// EndProgressGTE applies the GTE predicate on the "end_progress" field.
func EndProgressGTE(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndProgress), v))
	})
}

// EndProgressLT applies the LT predicate on the "end_progress" field.
func EndProgressLT(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndProgress), v))
	})
}

// EndProgressLTE applies the LTE predicate on the "end_progress" field.
func EndProgressLTE(v uint8) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndProgress), v))
	})
}

// HasCard applies the HasEdge predicate on the "card" edge.
func HasCard() predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CardTable, CardColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCardWith applies the HasEdge predicate on the "card" edge with a given conditions (other predicates).
func HasCardWith(preds ...predicate.Card) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CardInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CardTable, CardColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Review) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Review) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Review) predicate.Review {
	return predicate.Review(func(s *sql.Selector) {
		p(s.Not())
	})
}
