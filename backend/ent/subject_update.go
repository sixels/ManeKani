// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"sixels.io/manekani/core/domain/cards"
	"sixels.io/manekani/ent/card"
	"sixels.io/manekani/ent/deck"
	"sixels.io/manekani/ent/predicate"
	"sixels.io/manekani/ent/subject"
	"sixels.io/manekani/ent/user"
)

// SubjectUpdate is the builder for updating Subject entities.
type SubjectUpdate struct {
	config
	hooks    []Hook
	mutation *SubjectMutation
}

// Where appends a list predicates to the SubjectUpdate builder.
func (su *SubjectUpdate) Where(ps ...predicate.Subject) *SubjectUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubjectUpdate) SetUpdatedAt(t time.Time) *SubjectUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetKind sets the "kind" field.
func (su *SubjectUpdate) SetKind(s string) *SubjectUpdate {
	su.mutation.SetKind(s)
	return su
}

// SetLevel sets the "level" field.
func (su *SubjectUpdate) SetLevel(i int32) *SubjectUpdate {
	su.mutation.ResetLevel()
	su.mutation.SetLevel(i)
	return su
}

// AddLevel adds i to the "level" field.
func (su *SubjectUpdate) AddLevel(i int32) *SubjectUpdate {
	su.mutation.AddLevel(i)
	return su
}

// SetName sets the "name" field.
func (su *SubjectUpdate) SetName(s string) *SubjectUpdate {
	su.mutation.SetName(s)
	return su
}

// SetValue sets the "value" field.
func (su *SubjectUpdate) SetValue(s string) *SubjectUpdate {
	su.mutation.SetValue(s)
	return su
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (su *SubjectUpdate) SetNillableValue(s *string) *SubjectUpdate {
	if s != nil {
		su.SetValue(*s)
	}
	return su
}

// ClearValue clears the value of the "value" field.
func (su *SubjectUpdate) ClearValue() *SubjectUpdate {
	su.mutation.ClearValue()
	return su
}

// SetValueImage sets the "value_image" field.
func (su *SubjectUpdate) SetValueImage(cc *cards.RemoteContent) *SubjectUpdate {
	su.mutation.SetValueImage(cc)
	return su
}

// ClearValueImage clears the value of the "value_image" field.
func (su *SubjectUpdate) ClearValueImage() *SubjectUpdate {
	su.mutation.ClearValueImage()
	return su
}

// SetSlug sets the "slug" field.
func (su *SubjectUpdate) SetSlug(s string) *SubjectUpdate {
	su.mutation.SetSlug(s)
	return su
}

// SetPriority sets the "priority" field.
func (su *SubjectUpdate) SetPriority(u uint8) *SubjectUpdate {
	su.mutation.ResetPriority()
	su.mutation.SetPriority(u)
	return su
}

// AddPriority adds u to the "priority" field.
func (su *SubjectUpdate) AddPriority(u int8) *SubjectUpdate {
	su.mutation.AddPriority(u)
	return su
}

// SetResources sets the "resources" field.
func (su *SubjectUpdate) SetResources(mc *map[string][]cards.RemoteContent) *SubjectUpdate {
	su.mutation.SetResources(mc)
	return su
}

// ClearResources clears the value of the "resources" field.
func (su *SubjectUpdate) ClearResources() *SubjectUpdate {
	su.mutation.ClearResources()
	return su
}

// SetStudyData sets the "study_data" field.
func (su *SubjectUpdate) SetStudyData(cd []cards.StudyData) *SubjectUpdate {
	su.mutation.SetStudyData(cd)
	return su
}

// AppendStudyData appends cd to the "study_data" field.
func (su *SubjectUpdate) AppendStudyData(cd []cards.StudyData) *SubjectUpdate {
	su.mutation.AppendStudyData(cd)
	return su
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (su *SubjectUpdate) AddCardIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.AddCardIDs(ids...)
	return su
}

// AddCards adds the "cards" edges to the Card entity.
func (su *SubjectUpdate) AddCards(c ...*Card) *SubjectUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.AddCardIDs(ids...)
}

// AddSimilarIDs adds the "similar" edge to the Subject entity by IDs.
func (su *SubjectUpdate) AddSimilarIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.AddSimilarIDs(ids...)
	return su
}

// AddSimilar adds the "similar" edges to the Subject entity.
func (su *SubjectUpdate) AddSimilar(s ...*Subject) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSimilarIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the Subject entity by IDs.
func (su *SubjectUpdate) AddDependencyIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.AddDependencyIDs(ids...)
	return su
}

// AddDependencies adds the "dependencies" edges to the Subject entity.
func (su *SubjectUpdate) AddDependencies(s ...*Subject) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddDependencyIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the Subject entity by IDs.
func (su *SubjectUpdate) AddDependentIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.AddDependentIDs(ids...)
	return su
}

// AddDependents adds the "dependents" edges to the Subject entity.
func (su *SubjectUpdate) AddDependents(s ...*Subject) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddDependentIDs(ids...)
}

// SetDeckID sets the "deck" edge to the Deck entity by ID.
func (su *SubjectUpdate) SetDeckID(id uuid.UUID) *SubjectUpdate {
	su.mutation.SetDeckID(id)
	return su
}

// SetDeck sets the "deck" edge to the Deck entity.
func (su *SubjectUpdate) SetDeck(d *Deck) *SubjectUpdate {
	return su.SetDeckID(d.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (su *SubjectUpdate) SetOwnerID(id string) *SubjectUpdate {
	su.mutation.SetOwnerID(id)
	return su
}

// SetOwner sets the "owner" edge to the User entity.
func (su *SubjectUpdate) SetOwner(u *User) *SubjectUpdate {
	return su.SetOwnerID(u.ID)
}

// Mutation returns the SubjectMutation object of the builder.
func (su *SubjectUpdate) Mutation() *SubjectMutation {
	return su.mutation
}

// ClearCards clears all "cards" edges to the Card entity.
func (su *SubjectUpdate) ClearCards() *SubjectUpdate {
	su.mutation.ClearCards()
	return su
}

// RemoveCardIDs removes the "cards" edge to Card entities by IDs.
func (su *SubjectUpdate) RemoveCardIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.RemoveCardIDs(ids...)
	return su
}

// RemoveCards removes "cards" edges to Card entities.
func (su *SubjectUpdate) RemoveCards(c ...*Card) *SubjectUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return su.RemoveCardIDs(ids...)
}

// ClearSimilar clears all "similar" edges to the Subject entity.
func (su *SubjectUpdate) ClearSimilar() *SubjectUpdate {
	su.mutation.ClearSimilar()
	return su
}

// RemoveSimilarIDs removes the "similar" edge to Subject entities by IDs.
func (su *SubjectUpdate) RemoveSimilarIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.RemoveSimilarIDs(ids...)
	return su
}

// RemoveSimilar removes "similar" edges to Subject entities.
func (su *SubjectUpdate) RemoveSimilar(s ...*Subject) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSimilarIDs(ids...)
}

// ClearDependencies clears all "dependencies" edges to the Subject entity.
func (su *SubjectUpdate) ClearDependencies() *SubjectUpdate {
	su.mutation.ClearDependencies()
	return su
}

// RemoveDependencyIDs removes the "dependencies" edge to Subject entities by IDs.
func (su *SubjectUpdate) RemoveDependencyIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.RemoveDependencyIDs(ids...)
	return su
}

// RemoveDependencies removes "dependencies" edges to Subject entities.
func (su *SubjectUpdate) RemoveDependencies(s ...*Subject) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveDependencyIDs(ids...)
}

// ClearDependents clears all "dependents" edges to the Subject entity.
func (su *SubjectUpdate) ClearDependents() *SubjectUpdate {
	su.mutation.ClearDependents()
	return su
}

// RemoveDependentIDs removes the "dependents" edge to Subject entities by IDs.
func (su *SubjectUpdate) RemoveDependentIDs(ids ...uuid.UUID) *SubjectUpdate {
	su.mutation.RemoveDependentIDs(ids...)
	return su
}

// RemoveDependents removes "dependents" edges to Subject entities.
func (su *SubjectUpdate) RemoveDependents(s ...*Subject) *SubjectUpdate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveDependentIDs(ids...)
}

// ClearDeck clears the "deck" edge to the Deck entity.
func (su *SubjectUpdate) ClearDeck() *SubjectUpdate {
	su.mutation.ClearDeck()
	return su
}

// ClearOwner clears the "owner" edge to the User entity.
func (su *SubjectUpdate) ClearOwner() *SubjectUpdate {
	su.mutation.ClearOwner()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubjectUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	su.defaults()
	if len(su.hooks) == 0 {
		if err = su.check(); err != nil {
			return 0, err
		}
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = su.check(); err != nil {
				return 0, err
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubjectUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubjectUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubjectUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubjectUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := subject.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubjectUpdate) check() error {
	if v, ok := su.mutation.Level(); ok {
		if err := subject.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Subject.level": %w`, err)}
		}
	}
	if v, ok := su.mutation.Name(); ok {
		if err := subject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subject.name": %w`, err)}
		}
	}
	if v, ok := su.mutation.Value(); ok {
		if err := subject.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Subject.value": %w`, err)}
		}
	}
	if v, ok := su.mutation.Slug(); ok {
		if err := subject.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Subject.slug": %w`, err)}
		}
	}
	if _, ok := su.mutation.DeckID(); su.mutation.DeckCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subject.deck"`)
	}
	if _, ok := su.mutation.OwnerID(); su.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subject.owner"`)
	}
	return nil
}

func (su *SubjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subject.Table,
			Columns: subject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subject.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subject.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.Kind(); ok {
		_spec.SetField(subject.FieldKind, field.TypeString, value)
	}
	if value, ok := su.mutation.Level(); ok {
		_spec.SetField(subject.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := su.mutation.AddedLevel(); ok {
		_spec.AddField(subject.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(subject.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.Value(); ok {
		_spec.SetField(subject.FieldValue, field.TypeString, value)
	}
	if su.mutation.ValueCleared() {
		_spec.ClearField(subject.FieldValue, field.TypeString)
	}
	if value, ok := su.mutation.ValueImage(); ok {
		_spec.SetField(subject.FieldValueImage, field.TypeJSON, value)
	}
	if su.mutation.ValueImageCleared() {
		_spec.ClearField(subject.FieldValueImage, field.TypeJSON)
	}
	if value, ok := su.mutation.Slug(); ok {
		_spec.SetField(subject.FieldSlug, field.TypeString, value)
	}
	if value, ok := su.mutation.Priority(); ok {
		_spec.SetField(subject.FieldPriority, field.TypeUint8, value)
	}
	if value, ok := su.mutation.AddedPriority(); ok {
		_spec.AddField(subject.FieldPriority, field.TypeUint8, value)
	}
	if value, ok := su.mutation.Resources(); ok {
		_spec.SetField(subject.FieldResources, field.TypeJSON, value)
	}
	if su.mutation.ResourcesCleared() {
		_spec.ClearField(subject.FieldResources, field.TypeJSON)
	}
	if value, ok := su.mutation.StudyData(); ok {
		_spec.SetField(subject.FieldStudyData, field.TypeJSON, value)
	}
	if value, ok := su.mutation.AppendedStudyData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subject.FieldStudyData, value)
		})
	}
	if su.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CardsTable,
			Columns: []string{subject.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedCardsIDs(); len(nodes) > 0 && !su.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CardsTable,
			Columns: []string{subject.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CardsTable,
			Columns: []string{subject.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.SimilarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.SimilarTable,
			Columns: subject.SimilarPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSimilarIDs(); len(nodes) > 0 && !su.mutation.SimilarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.SimilarTable,
			Columns: subject.SimilarPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SimilarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.SimilarTable,
			Columns: subject.SimilarPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.DependenciesTable,
			Columns: subject.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !su.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.DependenciesTable,
			Columns: subject.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.DependenciesTable,
			Columns: subject.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.DependentsTable,
			Columns: subject.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedDependentsIDs(); len(nodes) > 0 && !su.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.DependentsTable,
			Columns: subject.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.DependentsTable,
			Columns: subject.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.DeckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.DeckTable,
			Columns: []string{subject.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.DeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.DeckTable,
			Columns: []string{subject.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.OwnerTable,
			Columns: []string{subject.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.OwnerTable,
			Columns: []string{subject.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// SubjectUpdateOne is the builder for updating a single Subject entity.
type SubjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubjectMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubjectUpdateOne) SetUpdatedAt(t time.Time) *SubjectUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetKind sets the "kind" field.
func (suo *SubjectUpdateOne) SetKind(s string) *SubjectUpdateOne {
	suo.mutation.SetKind(s)
	return suo
}

// SetLevel sets the "level" field.
func (suo *SubjectUpdateOne) SetLevel(i int32) *SubjectUpdateOne {
	suo.mutation.ResetLevel()
	suo.mutation.SetLevel(i)
	return suo
}

// AddLevel adds i to the "level" field.
func (suo *SubjectUpdateOne) AddLevel(i int32) *SubjectUpdateOne {
	suo.mutation.AddLevel(i)
	return suo
}

// SetName sets the "name" field.
func (suo *SubjectUpdateOne) SetName(s string) *SubjectUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetValue sets the "value" field.
func (suo *SubjectUpdateOne) SetValue(s string) *SubjectUpdateOne {
	suo.mutation.SetValue(s)
	return suo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (suo *SubjectUpdateOne) SetNillableValue(s *string) *SubjectUpdateOne {
	if s != nil {
		suo.SetValue(*s)
	}
	return suo
}

// ClearValue clears the value of the "value" field.
func (suo *SubjectUpdateOne) ClearValue() *SubjectUpdateOne {
	suo.mutation.ClearValue()
	return suo
}

// SetValueImage sets the "value_image" field.
func (suo *SubjectUpdateOne) SetValueImage(cc *cards.RemoteContent) *SubjectUpdateOne {
	suo.mutation.SetValueImage(cc)
	return suo
}

// ClearValueImage clears the value of the "value_image" field.
func (suo *SubjectUpdateOne) ClearValueImage() *SubjectUpdateOne {
	suo.mutation.ClearValueImage()
	return suo
}

// SetSlug sets the "slug" field.
func (suo *SubjectUpdateOne) SetSlug(s string) *SubjectUpdateOne {
	suo.mutation.SetSlug(s)
	return suo
}

// SetPriority sets the "priority" field.
func (suo *SubjectUpdateOne) SetPriority(u uint8) *SubjectUpdateOne {
	suo.mutation.ResetPriority()
	suo.mutation.SetPriority(u)
	return suo
}

// AddPriority adds u to the "priority" field.
func (suo *SubjectUpdateOne) AddPriority(u int8) *SubjectUpdateOne {
	suo.mutation.AddPriority(u)
	return suo
}

// SetResources sets the "resources" field.
func (suo *SubjectUpdateOne) SetResources(mc *map[string][]cards.RemoteContent) *SubjectUpdateOne {
	suo.mutation.SetResources(mc)
	return suo
}

// ClearResources clears the value of the "resources" field.
func (suo *SubjectUpdateOne) ClearResources() *SubjectUpdateOne {
	suo.mutation.ClearResources()
	return suo
}

// SetStudyData sets the "study_data" field.
func (suo *SubjectUpdateOne) SetStudyData(cd []cards.StudyData) *SubjectUpdateOne {
	suo.mutation.SetStudyData(cd)
	return suo
}

// AppendStudyData appends cd to the "study_data" field.
func (suo *SubjectUpdateOne) AppendStudyData(cd []cards.StudyData) *SubjectUpdateOne {
	suo.mutation.AppendStudyData(cd)
	return suo
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (suo *SubjectUpdateOne) AddCardIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.AddCardIDs(ids...)
	return suo
}

// AddCards adds the "cards" edges to the Card entity.
func (suo *SubjectUpdateOne) AddCards(c ...*Card) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.AddCardIDs(ids...)
}

// AddSimilarIDs adds the "similar" edge to the Subject entity by IDs.
func (suo *SubjectUpdateOne) AddSimilarIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.AddSimilarIDs(ids...)
	return suo
}

// AddSimilar adds the "similar" edges to the Subject entity.
func (suo *SubjectUpdateOne) AddSimilar(s ...*Subject) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSimilarIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the Subject entity by IDs.
func (suo *SubjectUpdateOne) AddDependencyIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.AddDependencyIDs(ids...)
	return suo
}

// AddDependencies adds the "dependencies" edges to the Subject entity.
func (suo *SubjectUpdateOne) AddDependencies(s ...*Subject) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddDependencyIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the Subject entity by IDs.
func (suo *SubjectUpdateOne) AddDependentIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.AddDependentIDs(ids...)
	return suo
}

// AddDependents adds the "dependents" edges to the Subject entity.
func (suo *SubjectUpdateOne) AddDependents(s ...*Subject) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddDependentIDs(ids...)
}

// SetDeckID sets the "deck" edge to the Deck entity by ID.
func (suo *SubjectUpdateOne) SetDeckID(id uuid.UUID) *SubjectUpdateOne {
	suo.mutation.SetDeckID(id)
	return suo
}

// SetDeck sets the "deck" edge to the Deck entity.
func (suo *SubjectUpdateOne) SetDeck(d *Deck) *SubjectUpdateOne {
	return suo.SetDeckID(d.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (suo *SubjectUpdateOne) SetOwnerID(id string) *SubjectUpdateOne {
	suo.mutation.SetOwnerID(id)
	return suo
}

// SetOwner sets the "owner" edge to the User entity.
func (suo *SubjectUpdateOne) SetOwner(u *User) *SubjectUpdateOne {
	return suo.SetOwnerID(u.ID)
}

// Mutation returns the SubjectMutation object of the builder.
func (suo *SubjectUpdateOne) Mutation() *SubjectMutation {
	return suo.mutation
}

// ClearCards clears all "cards" edges to the Card entity.
func (suo *SubjectUpdateOne) ClearCards() *SubjectUpdateOne {
	suo.mutation.ClearCards()
	return suo
}

// RemoveCardIDs removes the "cards" edge to Card entities by IDs.
func (suo *SubjectUpdateOne) RemoveCardIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.RemoveCardIDs(ids...)
	return suo
}

// RemoveCards removes "cards" edges to Card entities.
func (suo *SubjectUpdateOne) RemoveCards(c ...*Card) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return suo.RemoveCardIDs(ids...)
}

// ClearSimilar clears all "similar" edges to the Subject entity.
func (suo *SubjectUpdateOne) ClearSimilar() *SubjectUpdateOne {
	suo.mutation.ClearSimilar()
	return suo
}

// RemoveSimilarIDs removes the "similar" edge to Subject entities by IDs.
func (suo *SubjectUpdateOne) RemoveSimilarIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.RemoveSimilarIDs(ids...)
	return suo
}

// RemoveSimilar removes "similar" edges to Subject entities.
func (suo *SubjectUpdateOne) RemoveSimilar(s ...*Subject) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSimilarIDs(ids...)
}

// ClearDependencies clears all "dependencies" edges to the Subject entity.
func (suo *SubjectUpdateOne) ClearDependencies() *SubjectUpdateOne {
	suo.mutation.ClearDependencies()
	return suo
}

// RemoveDependencyIDs removes the "dependencies" edge to Subject entities by IDs.
func (suo *SubjectUpdateOne) RemoveDependencyIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.RemoveDependencyIDs(ids...)
	return suo
}

// RemoveDependencies removes "dependencies" edges to Subject entities.
func (suo *SubjectUpdateOne) RemoveDependencies(s ...*Subject) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveDependencyIDs(ids...)
}

// ClearDependents clears all "dependents" edges to the Subject entity.
func (suo *SubjectUpdateOne) ClearDependents() *SubjectUpdateOne {
	suo.mutation.ClearDependents()
	return suo
}

// RemoveDependentIDs removes the "dependents" edge to Subject entities by IDs.
func (suo *SubjectUpdateOne) RemoveDependentIDs(ids ...uuid.UUID) *SubjectUpdateOne {
	suo.mutation.RemoveDependentIDs(ids...)
	return suo
}

// RemoveDependents removes "dependents" edges to Subject entities.
func (suo *SubjectUpdateOne) RemoveDependents(s ...*Subject) *SubjectUpdateOne {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveDependentIDs(ids...)
}

// ClearDeck clears the "deck" edge to the Deck entity.
func (suo *SubjectUpdateOne) ClearDeck() *SubjectUpdateOne {
	suo.mutation.ClearDeck()
	return suo
}

// ClearOwner clears the "owner" edge to the User entity.
func (suo *SubjectUpdateOne) ClearOwner() *SubjectUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubjectUpdateOne) Select(field string, fields ...string) *SubjectUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subject entity.
func (suo *SubjectUpdateOne) Save(ctx context.Context) (*Subject, error) {
	var (
		err  error
		node *Subject
	)
	suo.defaults()
	if len(suo.hooks) == 0 {
		if err = suo.check(); err != nil {
			return nil, err
		}
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = suo.check(); err != nil {
				return nil, err
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, suo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Subject)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from SubjectMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubjectUpdateOne) SaveX(ctx context.Context) *Subject {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubjectUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubjectUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubjectUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := subject.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubjectUpdateOne) check() error {
	if v, ok := suo.mutation.Level(); ok {
		if err := subject.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Subject.level": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Name(); ok {
		if err := subject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subject.name": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Value(); ok {
		if err := subject.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Subject.value": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Slug(); ok {
		if err := subject.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Subject.slug": %w`, err)}
		}
	}
	if _, ok := suo.mutation.DeckID(); suo.mutation.DeckCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subject.deck"`)
	}
	if _, ok := suo.mutation.OwnerID(); suo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Subject.owner"`)
	}
	return nil
}

func (suo *SubjectUpdateOne) sqlSave(ctx context.Context) (_node *Subject, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   subject.Table,
			Columns: subject.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: subject.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subject.FieldID)
		for _, f := range fields {
			if !subject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subject.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.Kind(); ok {
		_spec.SetField(subject.FieldKind, field.TypeString, value)
	}
	if value, ok := suo.mutation.Level(); ok {
		_spec.SetField(subject.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.AddedLevel(); ok {
		_spec.AddField(subject.FieldLevel, field.TypeInt32, value)
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(subject.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.Value(); ok {
		_spec.SetField(subject.FieldValue, field.TypeString, value)
	}
	if suo.mutation.ValueCleared() {
		_spec.ClearField(subject.FieldValue, field.TypeString)
	}
	if value, ok := suo.mutation.ValueImage(); ok {
		_spec.SetField(subject.FieldValueImage, field.TypeJSON, value)
	}
	if suo.mutation.ValueImageCleared() {
		_spec.ClearField(subject.FieldValueImage, field.TypeJSON)
	}
	if value, ok := suo.mutation.Slug(); ok {
		_spec.SetField(subject.FieldSlug, field.TypeString, value)
	}
	if value, ok := suo.mutation.Priority(); ok {
		_spec.SetField(subject.FieldPriority, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.AddedPriority(); ok {
		_spec.AddField(subject.FieldPriority, field.TypeUint8, value)
	}
	if value, ok := suo.mutation.Resources(); ok {
		_spec.SetField(subject.FieldResources, field.TypeJSON, value)
	}
	if suo.mutation.ResourcesCleared() {
		_spec.ClearField(subject.FieldResources, field.TypeJSON)
	}
	if value, ok := suo.mutation.StudyData(); ok {
		_spec.SetField(subject.FieldStudyData, field.TypeJSON, value)
	}
	if value, ok := suo.mutation.AppendedStudyData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, subject.FieldStudyData, value)
		})
	}
	if suo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CardsTable,
			Columns: []string{subject.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: card.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedCardsIDs(); len(nodes) > 0 && !suo.mutation.CardsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CardsTable,
			Columns: []string{subject.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CardsTable,
			Columns: []string{subject.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: card.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.SimilarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.SimilarTable,
			Columns: subject.SimilarPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSimilarIDs(); len(nodes) > 0 && !suo.mutation.SimilarCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.SimilarTable,
			Columns: subject.SimilarPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SimilarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.SimilarTable,
			Columns: subject.SimilarPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.DependenciesTable,
			Columns: subject.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedDependenciesIDs(); len(nodes) > 0 && !suo.mutation.DependenciesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.DependenciesTable,
			Columns: subject.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.DependenciesTable,
			Columns: subject.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.DependentsTable,
			Columns: subject.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedDependentsIDs(); len(nodes) > 0 && !suo.mutation.DependentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.DependentsTable,
			Columns: subject.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.DependentsTable,
			Columns: subject.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.DeckCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.DeckTable,
			Columns: []string{subject.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.DeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.DeckTable,
			Columns: []string{subject.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: deck.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.OwnerTable,
			Columns: []string{subject.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.OwnerTable,
			Columns: []string{subject.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subject{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
