



// Code generated by ent, DO NOT EDIT.



package ent



import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"time"
		"sixels.io/manekani/services/cards/ent/predicate"
				"github.com/google/uuid"
			"github.com/jackc/pgtype"
			"github.com/jackc/pgtype"
			"github.com/jackc/pgtype"
			"github.com/jackc/pgtype"
			"github.com/google/uuid"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)


import (
		 "sixels.io/manekani/services/cards/ent/kanji"
		 "sixels.io/manekani/services/cards/ent/vocabulary"
		 "sixels.io/manekani/services/cards/ent/radical"
)




// KanjiQuery is the builder for querying Kanji entities.
type KanjiQuery struct {
	config
	limit		*int
	offset		*int
	unique		*bool
	order		[]OrderFunc
	fields		[]string
	predicates 	[]predicate.Kanji
		withVocabularies *VocabularyQuery
		withRadicals *RadicalQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the KanjiQuery builder.
func (kq *KanjiQuery) Where(ps ...predicate.Kanji) *KanjiQuery {
	kq.predicates = append(kq.predicates, ps...)
	return kq
}

// Limit adds a limit step to the query.
func (kq *KanjiQuery) Limit(limit int) *KanjiQuery {
	kq.limit = &limit
	return kq
}

// Offset adds an offset step to the query.
func (kq *KanjiQuery) Offset(offset int) *KanjiQuery {
	kq.offset = &offset
	return kq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (kq *KanjiQuery) Unique(unique bool) *KanjiQuery {
	kq.unique = &unique
	return kq
}

// Order adds an order step to the query.
func (kq *KanjiQuery) Order(o ...OrderFunc) *KanjiQuery {
	kq.order = append(kq.order, o...)
	return kq
}



	
	// QueryVocabularies chains the current query on the "vocabularies" edge.
	func (kq *KanjiQuery) QueryVocabularies() *VocabularyQuery {
		query := &VocabularyQuery{config: kq.config}
		query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
			if err := kq.prepareQuery(ctx); err != nil {
				return nil, err
			}  
	selector := kq.sqlQuery(ctx)
	if err := selector.Err(); err != nil {
		return nil, err
	}
	step := sqlgraph.NewStep(
		sqlgraph.From(kanji.Table, kanji.FieldID, selector),
		sqlgraph.To(vocabulary.Table, vocabulary.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, kanji.VocabulariesTable,kanji.VocabulariesPrimaryKey...),
	)
	fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
return fromU, nil
		}
		return query
	}

	
	// QueryRadicals chains the current query on the "radicals" edge.
	func (kq *KanjiQuery) QueryRadicals() *RadicalQuery {
		query := &RadicalQuery{config: kq.config}
		query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
			if err := kq.prepareQuery(ctx); err != nil {
				return nil, err
			}  
	selector := kq.sqlQuery(ctx)
	if err := selector.Err(); err != nil {
		return nil, err
	}
	step := sqlgraph.NewStep(
		sqlgraph.From(kanji.Table, kanji.FieldID, selector),
		sqlgraph.To(radical.Table, radical.FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, kanji.RadicalsTable,kanji.RadicalsPrimaryKey...),
	)
	fromU = sqlgraph.SetNeighbors(kq.driver.Dialect(), step)
return fromU, nil
		}
		return query
	}


// First returns the first Kanji entity from the query. 
// Returns a *NotFoundError when no Kanji was found.
func (kq *KanjiQuery) First(ctx context.Context) (*Kanji, error) {
	nodes, err := kq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{ kanji.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (kq *KanjiQuery) FirstX(ctx context.Context) *Kanji {
	node, err := kq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}


	// FirstID returns the first Kanji ID from the query.
	// Returns a *NotFoundError when no Kanji ID was found.
	func (kq *KanjiQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
		var ids []uuid.UUID
		if ids, err = kq.Limit(1).IDs(ctx); err != nil {
			return
		}
		if len(ids) == 0 {
			err = &NotFoundError{ kanji.Label}
			return
		}
		return ids[0], nil
	}
	
	// FirstIDX is like FirstID, but panics if an error occurs.
	func (kq *KanjiQuery) FirstIDX(ctx context.Context) uuid.UUID {
		id, err := kq.FirstID(ctx)
		if err != nil && !IsNotFound(err) {
			panic(err)
		}
		return id
	}


// Only returns a single Kanji entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Kanji entity is found.
// Returns a *NotFoundError when no Kanji entities are found.
func (kq *KanjiQuery) Only(ctx context.Context) (*Kanji, error) {
	nodes, err := kq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{ kanji.Label}
	default:
		return nil, &NotSingularError{ kanji.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (kq *KanjiQuery) OnlyX(ctx context.Context) *Kanji {
	node, err := kq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}


	// OnlyID is like Only, but returns the only Kanji ID in the query.
	// Returns a *NotSingularError when more than one Kanji ID is found.
	// Returns a *NotFoundError when no entities are found.
	func (kq *KanjiQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
		var ids []uuid.UUID
		if ids, err = kq.Limit(2).IDs(ctx); err != nil {
			return
		}
		switch len(ids) {
		case 1:
			id = ids[0]
		case 0:
			err = &NotFoundError{ kanji.Label}
		default:
			err = &NotSingularError{ kanji.Label}
		}
		return
	}
	
	// OnlyIDX is like OnlyID, but panics if an error occurs.
	func (kq *KanjiQuery) OnlyIDX(ctx context.Context) uuid.UUID {
		id, err := kq.OnlyID(ctx)
		if err != nil {
			panic(err)
		}
		return id
	}


// All executes the query and returns a list of Kanjis.
func (kq *KanjiQuery) All(ctx context.Context) ([]*Kanji, error) {
	if err := kq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return kq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (kq *KanjiQuery) AllX(ctx context.Context) []*Kanji {
	nodes, err := kq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}


	// IDs executes the query and returns a list of Kanji IDs.
	func (kq *KanjiQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
		var ids []uuid.UUID
		if err := kq.Select(kanji.FieldID).Scan(ctx, &ids); err != nil {
			return nil, err
		}
		return ids, nil
	}
	
	// IDsX is like IDs, but panics if an error occurs.
	func (kq *KanjiQuery) IDsX(ctx context.Context) []uuid.UUID {
		ids, err := kq.IDs(ctx)
		if err != nil {
			panic(err)
		}
		return ids
	}


// Count returns the count of the given query.
func (kq *KanjiQuery) Count(ctx context.Context) (int, error) {
	if err := kq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return kq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (kq *KanjiQuery) CountX(ctx context.Context) int {
	count, err := kq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (kq *KanjiQuery) Exist(ctx context.Context) (bool, error) {
	if err := kq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return kq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (kq *KanjiQuery) ExistX(ctx context.Context) bool {
	exist, err := kq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the KanjiQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (kq *KanjiQuery) Clone() *KanjiQuery {
	if kq == nil {
		return nil
	}
	return &KanjiQuery{
		config: 	kq.config,
		limit: 		kq.limit,
		offset: 	kq.offset,
		order: 		append([]OrderFunc{}, kq.order...),
		predicates: append([]predicate.Kanji{}, kq.predicates...),
			withVocabularies: kq.withVocabularies.Clone(),
			withRadicals: kq.withRadicals.Clone(),
		// clone intermediate query.
		sql: kq.sql.Clone(),
		path: kq.path,
		unique: kq.unique,
	}
}
	
	
	// WithVocabularies tells the query-builder to eager-load the nodes that are connected to
	// the "vocabularies" edge. The optional arguments are used to configure the query builder of the edge.
	func (kq *KanjiQuery) WithVocabularies(opts ...func(*VocabularyQuery)) *KanjiQuery {
		query := &VocabularyQuery{config: kq.config}
		for _, opt := range opts {
			opt(query)
		}
		kq.withVocabularies = query
		return kq
	}
	
	
	// WithRadicals tells the query-builder to eager-load the nodes that are connected to
	// the "radicals" edge. The optional arguments are used to configure the query builder of the edge.
	func (kq *KanjiQuery) WithRadicals(opts ...func(*RadicalQuery)) *KanjiQuery {
		query := &RadicalQuery{config: kq.config}
		for _, opt := range opts {
			opt(query)
		}
		kq.withRadicals = query
		return kq
	}



// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Kanji.Query().
//		GroupBy(kanji.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (kq *KanjiQuery) GroupBy(field string, fields ...string) *KanjiGroupBy {
	grbuild := &KanjiGroupBy{config: kq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := kq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return kq.sqlQuery(ctx), nil
	}
	grbuild.label = kanji.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}



// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Kanji.Query().
//		Select(kanji.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (kq *KanjiQuery) Select(fields ...string) *KanjiSelect {
	kq.fields = append(kq.fields, fields...)
	selbuild := &KanjiSelect{ KanjiQuery: kq }
	selbuild.label = kanji.Label
	selbuild.flds, selbuild.scan = &kq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a KanjiSelect configured with the given aggregations.
func (kq *KanjiQuery) Aggregate(fns ...AggregateFunc) *KanjiSelect {
	return kq.Select().Aggregate(fns...)
}

func (kq *KanjiQuery) prepareQuery(ctx context.Context) error {
	for _, f := range kq.fields {
		if !kanji.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if kq.path != nil {
		prev, err := kq.path(ctx)
		if err != nil {
			return err
		}
		kq.sql = prev
	}
	return nil
}


	
	




func (kq *KanjiQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Kanji, error) {
	var (
		nodes = []*Kanji{}
		_spec = kq.querySpec()
			loadedTypes = [2]bool{
					kq.withVocabularies != nil,
					kq.withRadicals != nil,
			}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Kanji).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Kanji{config: kq.config}
		nodes = append(nodes, node)
			node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, kq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
		if query := kq.withVocabularies; query != nil {
			if err := kq.loadVocabularies(ctx, query, nodes, 
				func(n *Kanji){ n.Edges.Vocabularies = []*Vocabulary{} },
				func(n *Kanji, e *Vocabulary){ n.Edges.Vocabularies = append(n.Edges.Vocabularies, e) }); err != nil {
				return nil, err
			}
		}
		if query := kq.withRadicals; query != nil {
			if err := kq.loadRadicals(ctx, query, nodes, 
				func(n *Kanji){ n.Edges.Radicals = []*Radical{} },
				func(n *Kanji, e *Radical){ n.Edges.Radicals = append(n.Edges.Radicals, e) }); err != nil {
				return nil, err
			}
		}
	return nodes, nil
}


	func (kq *KanjiQuery) loadVocabularies(ctx context.Context, query *VocabularyQuery, nodes []*Kanji, init func(*Kanji), assign func(*Kanji, *Vocabulary)) error {
			edgeIDs := make([]driver.Value, len(nodes))
			byID := make(map[uuid.UUID]*Kanji)
			nids := make(map[uuid.UUID]map[*Kanji]struct{})
			for i, node := range nodes {
				edgeIDs[i] = node.ID
				byID[node.ID] = node
				if init != nil {
					init(node)
				}
			}
			query.Where(func(s *sql.Selector) {
				joinT := sql.Table(kanji.VocabulariesTable)
				s.Join(joinT).On(s.C(vocabulary.FieldID), joinT.C(kanji.VocabulariesPrimaryKey[0]))
				s.Where(sql.InValues(joinT.C(kanji.VocabulariesPrimaryKey[1]), edgeIDs...))
				columns := s.SelectedColumns()
				s.Select(joinT.C(kanji.VocabulariesPrimaryKey[1]))
				s.AppendSelect(columns...)
				s.SetDistinct(false)
			})
			if err := query.prepareQuery(ctx); err != nil {
				return err
			}
			neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
				assign := spec.Assign
				values := spec.ScanValues
				spec.ScanValues = func(columns []string) ([]any, error) {
					values, err := values(columns[1:])
					if err != nil {
						return nil, err
					}
					return append([]any{new(uuid.UUID)}, values...), nil
				}
				spec.Assign = func(columns []string, values []any) error {
					outValue := *values[0].(*uuid.UUID)
					inValue := *values[1].(*uuid.UUID)
					if nids[inValue] == nil {
						nids[inValue] = map[*Kanji]struct{}{byID[outValue]: {}}
						return assign(columns[1:], values[1:])
					}
					nids[inValue][byID[outValue]] = struct{}{}
					return nil
				}
			})
			if err != nil {
				return err
			}
			for _, n := range neighbors {
				nodes, ok := nids[n.ID]
				if !ok {
					return fmt.Errorf(`unexpected "vocabularies" node returned %v`, n.ID)
				}
				for kn := range nodes {
					assign(kn, n)
				}
			}
		return nil
	}
	func (kq *KanjiQuery) loadRadicals(ctx context.Context, query *RadicalQuery, nodes []*Kanji, init func(*Kanji), assign func(*Kanji, *Radical)) error {
			edgeIDs := make([]driver.Value, len(nodes))
			byID := make(map[uuid.UUID]*Kanji)
			nids := make(map[uuid.UUID]map[*Kanji]struct{})
			for i, node := range nodes {
				edgeIDs[i] = node.ID
				byID[node.ID] = node
				if init != nil {
					init(node)
				}
			}
			query.Where(func(s *sql.Selector) {
				joinT := sql.Table(kanji.RadicalsTable)
				s.Join(joinT).On(s.C(radical.FieldID), joinT.C(kanji.RadicalsPrimaryKey[1]))
				s.Where(sql.InValues(joinT.C(kanji.RadicalsPrimaryKey[0]), edgeIDs...))
				columns := s.SelectedColumns()
				s.Select(joinT.C(kanji.RadicalsPrimaryKey[0]))
				s.AppendSelect(columns...)
				s.SetDistinct(false)
			})
			if err := query.prepareQuery(ctx); err != nil {
				return err
			}
			neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
				assign := spec.Assign
				values := spec.ScanValues
				spec.ScanValues = func(columns []string) ([]any, error) {
					values, err := values(columns[1:])
					if err != nil {
						return nil, err
					}
					return append([]any{new(uuid.UUID)}, values...), nil
				}
				spec.Assign = func(columns []string, values []any) error {
					outValue := *values[0].(*uuid.UUID)
					inValue := *values[1].(*uuid.UUID)
					if nids[inValue] == nil {
						nids[inValue] = map[*Kanji]struct{}{byID[outValue]: {}}
						return assign(columns[1:], values[1:])
					}
					nids[inValue][byID[outValue]] = struct{}{}
					return nil
				}
			})
			if err != nil {
				return err
			}
			for _, n := range neighbors {
				nodes, ok := nids[n.ID]
				if !ok {
					return fmt.Errorf(`unexpected "radicals" node returned %v`, n.ID)
				}
				for kn := range nodes {
					assign(kn, n)
				}
			}
		return nil
	}

func (kq *KanjiQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := kq.querySpec()
		_spec.Node.Columns = kq.fields
		if len(kq.fields) > 0 {
			_spec.Unique = kq.unique != nil && *kq.unique
		}
	return sqlgraph.CountNodes(ctx, kq.driver, _spec)
}

func (kq *KanjiQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := kq.FirstID(ctx);{
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (kq *KanjiQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table: kanji.Table,
			Columns: kanji.Columns,
				ID: &sqlgraph.FieldSpec{
					Type: field.TypeUUID,
					Column: kanji.FieldID,
				},
		},
		From: kq.sql,
		Unique: true,
	}
	if unique := kq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := kq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
			_spec.Node.Columns = append(_spec.Node.Columns, kanji.FieldID)
			for i := range fields {
				if fields[i] != kanji.FieldID {
					_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
				}
			}
	}
	if ps := kq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := kq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := kq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := kq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}





func (kq *KanjiQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(kq.driver.Dialect())
	t1 := builder.Table(kanji.Table)
	columns := kq.fields
	if len(columns) == 0 {
		columns = kanji.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if kq.sql != nil {
		selector = kq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if kq.unique != nil && *kq.unique {
		selector.Distinct()
	}
	for _, p := range kq.predicates {
		p(selector)
	}
	for _, p := range kq.order {
		p(selector)
	}
	if offset := kq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := kq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

    

    











// KanjiGroupBy is the group-by builder for Kanji entities.
type KanjiGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (kgb *KanjiGroupBy) Aggregate(fns ...AggregateFunc) *KanjiGroupBy {
	kgb.fns = append(kgb.fns, fns...)
	return kgb
}

// Scan applies the group-by query and scans the result into the given value.
func (kgb *KanjiGroupBy) Scan(ctx context.Context, v any) error {
	query, err := kgb.path(ctx)
	if err != nil {
		return err
	}
	kgb.sql = query
	return kgb.sqlScan(ctx, v)
}


	
	



func (kgb *KanjiGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range kgb.fields {
		if !kanji.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := kgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := kgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}


func (kgb *KanjiGroupBy) sqlQuery() *sql.Selector {
	selector := kgb.sql.Select()
	aggregation := make([]string, 0, len(kgb.fns))
	for _, fn := range kgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(kgb.fields) + len(kgb.fns))
		for _, f := range kgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(kgb.fields...)...)
}







// KanjiSelect is the builder for selecting fields of Kanji entities.
type KanjiSelect struct {
	*KanjiQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ks *KanjiSelect) Aggregate(fns ...AggregateFunc) *KanjiSelect {
	ks.fns = append(ks.fns, fns...)
	return ks
}


// Scan applies the selector query and scans the result into the given value.
func (ks *KanjiSelect) Scan(ctx context.Context, v any) error {
	if err := ks.prepareQuery(ctx); err != nil {
		return err
	}
	ks.sql = ks.KanjiQuery.sqlQuery(ctx)
	return ks.sqlScan(ctx, v)
}


	
	



func (ks *KanjiSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(ks.fns))
	for _, fn := range ks.fns {
		aggregation = append(aggregation, fn(ks.sql))
	}
	switch n := len(*ks.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		ks.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		ks.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := ks.sql.Query()
	if err := ks.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}



    






