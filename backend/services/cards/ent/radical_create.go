// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"sixels.io/manekani/services/cards/ent/kanji"
	"sixels.io/manekani/services/cards/ent/radical"
)

// RadicalCreate is the builder for creating a Radical entity.
type RadicalCreate struct {
	config
	mutation *RadicalMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rc *RadicalCreate) SetCreatedAt(t time.Time) *RadicalCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rc *RadicalCreate) SetNillableCreatedAt(t *time.Time) *RadicalCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetUpdatedAt sets the "updated_at" field.
func (rc *RadicalCreate) SetUpdatedAt(t time.Time) *RadicalCreate {
	rc.mutation.SetUpdatedAt(t)
	return rc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rc *RadicalCreate) SetNillableUpdatedAt(t *time.Time) *RadicalCreate {
	if t != nil {
		rc.SetUpdatedAt(*t)
	}
	return rc
}

// SetName sets the "name" field.
func (rc *RadicalCreate) SetName(s string) *RadicalCreate {
	rc.mutation.SetName(s)
	return rc
}

// SetLevel sets the "level" field.
func (rc *RadicalCreate) SetLevel(i int32) *RadicalCreate {
	rc.mutation.SetLevel(i)
	return rc
}

// SetSymbol sets the "symbol" field.
func (rc *RadicalCreate) SetSymbol(s string) *RadicalCreate {
	rc.mutation.SetSymbol(s)
	return rc
}

// SetMeaningMnemonic sets the "meaning_mnemonic" field.
func (rc *RadicalCreate) SetMeaningMnemonic(s string) *RadicalCreate {
	rc.mutation.SetMeaningMnemonic(s)
	return rc
}

// SetID sets the "id" field.
func (rc *RadicalCreate) SetID(u uuid.UUID) *RadicalCreate {
	rc.mutation.SetID(u)
	return rc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (rc *RadicalCreate) SetNillableID(u *uuid.UUID) *RadicalCreate {
	if u != nil {
		rc.SetID(*u)
	}
	return rc
}

// AddKanjiIDs adds the "kanjis" edge to the Kanji entity by IDs.
func (rc *RadicalCreate) AddKanjiIDs(ids ...uuid.UUID) *RadicalCreate {
	rc.mutation.AddKanjiIDs(ids...)
	return rc
}

// AddKanjis adds the "kanjis" edges to the Kanji entity.
func (rc *RadicalCreate) AddKanjis(k ...*Kanji) *RadicalCreate {
	ids := make([]uuid.UUID, len(k))
	for i := range k {
		ids[i] = k[i].ID
	}
	return rc.AddKanjiIDs(ids...)
}

// Mutation returns the RadicalMutation object of the builder.
func (rc *RadicalCreate) Mutation() *RadicalMutation {
	return rc.mutation
}

// Save creates the Radical in the database.
func (rc *RadicalCreate) Save(ctx context.Context) (*Radical, error) {
	var (
		err  error
		node *Radical
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RadicalMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Radical)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RadicalMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RadicalCreate) SaveX(ctx context.Context) *Radical {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RadicalCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RadicalCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RadicalCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := radical.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		v := radical.DefaultUpdatedAt()
		rc.mutation.SetUpdatedAt(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := radical.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RadicalCreate) check() error {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Radical.created_at"`)}
	}
	if _, ok := rc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Radical.updated_at"`)}
	}
	if _, ok := rc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Radical.name"`)}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := radical.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Radical.name": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Radical.level"`)}
	}
	if v, ok := rc.mutation.Level(); ok {
		if err := radical.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Radical.level": %w`, err)}
		}
	}
	if _, ok := rc.mutation.Symbol(); !ok {
		return &ValidationError{Name: "symbol", err: errors.New(`ent: missing required field "Radical.symbol"`)}
	}
	if v, ok := rc.mutation.Symbol(); ok {
		if err := radical.SymbolValidator(v); err != nil {
			return &ValidationError{Name: "symbol", err: fmt.Errorf(`ent: validator failed for field "Radical.symbol": %w`, err)}
		}
	}
	if _, ok := rc.mutation.MeaningMnemonic(); !ok {
		return &ValidationError{Name: "meaning_mnemonic", err: errors.New(`ent: missing required field "Radical.meaning_mnemonic"`)}
	}
	if v, ok := rc.mutation.MeaningMnemonic(); ok {
		if err := radical.MeaningMnemonicValidator(v); err != nil {
			return &ValidationError{Name: "meaning_mnemonic", err: fmt.Errorf(`ent: validator failed for field "Radical.meaning_mnemonic": %w`, err)}
		}
	}
	return nil
}

func (rc *RadicalCreate) sqlSave(ctx context.Context) (*Radical, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (rc *RadicalCreate) createSpec() (*Radical, *sqlgraph.CreateSpec) {
	var (
		_node = &Radical{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: radical.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: radical.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.SetField(radical.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rc.mutation.UpdatedAt(); ok {
		_spec.SetField(radical.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := rc.mutation.Name(); ok {
		_spec.SetField(radical.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := rc.mutation.Level(); ok {
		_spec.SetField(radical.FieldLevel, field.TypeInt32, value)
		_node.Level = value
	}
	if value, ok := rc.mutation.Symbol(); ok {
		_spec.SetField(radical.FieldSymbol, field.TypeString, value)
		_node.Symbol = &value
	}
	if value, ok := rc.mutation.MeaningMnemonic(); ok {
		_spec.SetField(radical.FieldMeaningMnemonic, field.TypeString, value)
		_node.MeaningMnemonic = value
	}
	if nodes := rc.mutation.KanjisIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   radical.KanjisTable,
			Columns: radical.KanjisPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: kanji.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RadicalCreateBulk is the builder for creating many Radical entities in bulk.
type RadicalCreateBulk struct {
	config
	builders []*RadicalCreate
}

// Save creates the Radical entities in the database.
func (rcb *RadicalCreateBulk) Save(ctx context.Context) ([]*Radical, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Radical, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RadicalMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RadicalCreateBulk) SaveX(ctx context.Context) []*Radical {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RadicalCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RadicalCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
