// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/jackc/pgtype"
	"sixels.io/manekani/services/cards/ent/kanji"
)

// Kanji is the model entity for the Kanji schema.
type Kanji struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol string `json:"symbol,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// AltNames holds the value of the "alt_names" field.
	AltNames pgtype.TextArray `json:"alt_names,omitempty"`
	// Similar holds the value of the "similar" field.
	Similar pgtype.TextArray `json:"similar,omitempty"`
	// Level holds the value of the "level" field.
	Level int32 `json:"level,omitempty"`
	// Reading holds the value of the "reading" field.
	Reading string `json:"reading,omitempty"`
	// Onyomi holds the value of the "onyomi" field.
	Onyomi pgtype.TextArray `json:"onyomi,omitempty"`
	// Kunyomi holds the value of the "kunyomi" field.
	Kunyomi pgtype.TextArray `json:"kunyomi,omitempty"`
	// Nanori holds the value of the "nanori" field.
	Nanori pgtype.TextArray `json:"nanori,omitempty"`
	// MeaningMnemonic holds the value of the "meaning_mnemonic" field.
	MeaningMnemonic string `json:"meaning_mnemonic,omitempty"`
	// ReadingMnemonic holds the value of the "reading_mnemonic" field.
	ReadingMnemonic string `json:"reading_mnemonic,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the KanjiQuery when eager-loading is set.
	Edges KanjiEdges `json:"edges"`
}

// KanjiEdges holds the relations/edges for other nodes in the graph.
type KanjiEdges struct {
	// Vocabularies holds the value of the vocabularies edge.
	Vocabularies []*Vocabulary `json:"vocabularies,omitempty"`
	// Radicals holds the value of the radicals edge.
	Radicals []*Radical `json:"radicals,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// VocabulariesOrErr returns the Vocabularies value or an error if the edge
// was not loaded in eager-loading.
func (e KanjiEdges) VocabulariesOrErr() ([]*Vocabulary, error) {
	if e.loadedTypes[0] {
		return e.Vocabularies, nil
	}
	return nil, &NotLoadedError{edge: "vocabularies"}
}

// RadicalsOrErr returns the Radicals value or an error if the edge
// was not loaded in eager-loading.
func (e KanjiEdges) RadicalsOrErr() ([]*Radical, error) {
	if e.loadedTypes[1] {
		return e.Radicals, nil
	}
	return nil, &NotLoadedError{edge: "radicals"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Kanji) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case kanji.FieldAltNames, kanji.FieldSimilar, kanji.FieldOnyomi, kanji.FieldKunyomi, kanji.FieldNanori:
			values[i] = new(pgtype.TextArray)
		case kanji.FieldLevel:
			values[i] = new(sql.NullInt64)
		case kanji.FieldSymbol, kanji.FieldName, kanji.FieldReading, kanji.FieldMeaningMnemonic, kanji.FieldReadingMnemonic:
			values[i] = new(sql.NullString)
		case kanji.FieldCreatedAt, kanji.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case kanji.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Kanji", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Kanji fields.
func (k *Kanji) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case kanji.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				k.ID = *value
			}
		case kanji.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				k.CreatedAt = value.Time
			}
		case kanji.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				k.UpdatedAt = value.Time
			}
		case kanji.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				k.Symbol = value.String
			}
		case kanji.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				k.Name = value.String
			}
		case kanji.FieldAltNames:
			if value, ok := values[i].(*pgtype.TextArray); !ok {
				return fmt.Errorf("unexpected type %T for field alt_names", values[i])
			} else if value != nil {
				k.AltNames = *value
			}
		case kanji.FieldSimilar:
			if value, ok := values[i].(*pgtype.TextArray); !ok {
				return fmt.Errorf("unexpected type %T for field similar", values[i])
			} else if value != nil {
				k.Similar = *value
			}
		case kanji.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				k.Level = int32(value.Int64)
			}
		case kanji.FieldReading:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reading", values[i])
			} else if value.Valid {
				k.Reading = value.String
			}
		case kanji.FieldOnyomi:
			if value, ok := values[i].(*pgtype.TextArray); !ok {
				return fmt.Errorf("unexpected type %T for field onyomi", values[i])
			} else if value != nil {
				k.Onyomi = *value
			}
		case kanji.FieldKunyomi:
			if value, ok := values[i].(*pgtype.TextArray); !ok {
				return fmt.Errorf("unexpected type %T for field kunyomi", values[i])
			} else if value != nil {
				k.Kunyomi = *value
			}
		case kanji.FieldNanori:
			if value, ok := values[i].(*pgtype.TextArray); !ok {
				return fmt.Errorf("unexpected type %T for field nanori", values[i])
			} else if value != nil {
				k.Nanori = *value
			}
		case kanji.FieldMeaningMnemonic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meaning_mnemonic", values[i])
			} else if value.Valid {
				k.MeaningMnemonic = value.String
			}
		case kanji.FieldReadingMnemonic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reading_mnemonic", values[i])
			} else if value.Valid {
				k.ReadingMnemonic = value.String
			}
		}
	}
	return nil
}

// QueryVocabularies queries the "vocabularies" edge of the Kanji entity.
func (k *Kanji) QueryVocabularies() *VocabularyQuery {
	return (&KanjiClient{config: k.config}).QueryVocabularies(k)
}

// QueryRadicals queries the "radicals" edge of the Kanji entity.
func (k *Kanji) QueryRadicals() *RadicalQuery {
	return (&KanjiClient{config: k.config}).QueryRadicals(k)
}

// Update returns a builder for updating this Kanji.
// Note that you need to call Kanji.Unwrap() before calling this method if this Kanji
// was returned from a transaction, and the transaction was committed or rolled back.
func (k *Kanji) Update() *KanjiUpdateOne {
	return (&KanjiClient{config: k.config}).UpdateOne(k)
}

// Unwrap unwraps the Kanji entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (k *Kanji) Unwrap() *Kanji {
	_tx, ok := k.config.driver.(*txDriver)
	if !ok {
		panic("ent: Kanji is not a transactional entity")
	}
	k.config.driver = _tx.drv
	return k
}

// String implements the fmt.Stringer.
func (k *Kanji) String() string {
	var builder strings.Builder
	builder.WriteString("Kanji(")
	builder.WriteString(fmt.Sprintf("id=%v, ", k.ID))
	builder.WriteString("created_at=")
	builder.WriteString(k.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(k.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("symbol=")
	builder.WriteString(k.Symbol)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(k.Name)
	builder.WriteString(", ")
	builder.WriteString("alt_names=")
	builder.WriteString(fmt.Sprintf("%v", k.AltNames))
	builder.WriteString(", ")
	builder.WriteString("similar=")
	builder.WriteString(fmt.Sprintf("%v", k.Similar))
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", k.Level))
	builder.WriteString(", ")
	builder.WriteString("reading=")
	builder.WriteString(k.Reading)
	builder.WriteString(", ")
	builder.WriteString("onyomi=")
	builder.WriteString(fmt.Sprintf("%v", k.Onyomi))
	builder.WriteString(", ")
	builder.WriteString("kunyomi=")
	builder.WriteString(fmt.Sprintf("%v", k.Kunyomi))
	builder.WriteString(", ")
	builder.WriteString("nanori=")
	builder.WriteString(fmt.Sprintf("%v", k.Nanori))
	builder.WriteString(", ")
	builder.WriteString("meaning_mnemonic=")
	builder.WriteString(k.MeaningMnemonic)
	builder.WriteString(", ")
	builder.WriteString("reading_mnemonic=")
	builder.WriteString(k.ReadingMnemonic)
	builder.WriteByte(')')
	return builder.String()
}

// Kanjis is a parsable slice of Kanji.
type Kanjis []*Kanji

func (k Kanjis) config(cfg config) {
	for _i := range k {
		k[_i].config = cfg
	}
}
