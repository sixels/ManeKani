// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"sixels.io/manekani/services/cards/ent/radical"
)

// Radical is the model entity for the Radical schema.
type Radical struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Level holds the value of the "level" field.
	Level int32 `json:"level,omitempty"`
	// Symbol holds the value of the "symbol" field.
	Symbol *string `json:"symbol,omitempty"`
	// MeaningMnemonic holds the value of the "meaning_mnemonic" field.
	MeaningMnemonic string `json:"meaning_mnemonic,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RadicalQuery when eager-loading is set.
	Edges RadicalEdges `json:"edges"`
}

// RadicalEdges holds the relations/edges for other nodes in the graph.
type RadicalEdges struct {
	// Kanjis holds the value of the kanjis edge.
	Kanjis []*Kanji `json:"kanjis,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// KanjisOrErr returns the Kanjis value or an error if the edge
// was not loaded in eager-loading.
func (e RadicalEdges) KanjisOrErr() ([]*Kanji, error) {
	if e.loadedTypes[0] {
		return e.Kanjis, nil
	}
	return nil, &NotLoadedError{edge: "kanjis"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Radical) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case radical.FieldLevel:
			values[i] = new(sql.NullInt64)
		case radical.FieldName, radical.FieldSymbol, radical.FieldMeaningMnemonic:
			values[i] = new(sql.NullString)
		case radical.FieldCreatedAt, radical.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case radical.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Radical", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Radical fields.
func (r *Radical) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case radical.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case radical.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case radical.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case radical.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case radical.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				r.Level = int32(value.Int64)
			}
		case radical.FieldSymbol:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field symbol", values[i])
			} else if value.Valid {
				r.Symbol = new(string)
				*r.Symbol = value.String
			}
		case radical.FieldMeaningMnemonic:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meaning_mnemonic", values[i])
			} else if value.Valid {
				r.MeaningMnemonic = value.String
			}
		}
	}
	return nil
}

// QueryKanjis queries the "kanjis" edge of the Radical entity.
func (r *Radical) QueryKanjis() *KanjiQuery {
	return (&RadicalClient{config: r.config}).QueryKanjis(r)
}

// Update returns a builder for updating this Radical.
// Note that you need to call Radical.Unwrap() before calling this method if this Radical
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Radical) Update() *RadicalUpdateOne {
	return (&RadicalClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Radical entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Radical) Unwrap() *Radical {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Radical is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Radical) String() string {
	var builder strings.Builder
	builder.WriteString("Radical(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", r.Level))
	builder.WriteString(", ")
	if v := r.Symbol; v != nil {
		builder.WriteString("symbol=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("meaning_mnemonic=")
	builder.WriteString(r.MeaningMnemonic)
	builder.WriteByte(')')
	return builder.String()
}

// Radicals is a parsable slice of Radical.
type Radicals []*Radical

func (r Radicals) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
