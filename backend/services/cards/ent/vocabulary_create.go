




// Code generated by ent, DO NOT EDIT.



package ent



import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"time"
		"sixels.io/manekani/services/cards/ent/predicate"
				"github.com/google/uuid"
			"github.com/jackc/pgtype"
			"github.com/jackc/pgtype"
			"github.com/jackc/pgtype"
			"github.com/google/uuid"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)


import (
		 "sixels.io/manekani/services/cards/ent/vocabulary"
		 "sixels.io/manekani/services/cards/ent/kanji"
)





// VocabularyCreate is the builder for creating a Vocabulary entity.
type VocabularyCreate struct {
	config
	mutation *VocabularyMutation
	hooks []Hook
}


	




	


	
	
	// SetCreatedAt sets the "created_at" field.
	func (vc *VocabularyCreate) SetCreatedAt(t time.Time) *VocabularyCreate {
		vc.mutation.SetCreatedAt(t)
		return vc
	}

	
	
		
		// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
		func (vc *VocabularyCreate) SetNillableCreatedAt(t *time.Time) *VocabularyCreate {
			if t != nil {
				vc.SetCreatedAt(*t)
			}
			return vc
		}
	

	

	

	

	
	
	// SetUpdatedAt sets the "updated_at" field.
	func (vc *VocabularyCreate) SetUpdatedAt(t time.Time) *VocabularyCreate {
		vc.mutation.SetUpdatedAt(t)
		return vc
	}

	
	
		
		// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
		func (vc *VocabularyCreate) SetNillableUpdatedAt(t *time.Time) *VocabularyCreate {
			if t != nil {
				vc.SetUpdatedAt(*t)
			}
			return vc
		}
	

	

	

	

	
	
	// SetName sets the "name" field.
	func (vc *VocabularyCreate) SetName(s string) *VocabularyCreate {
		vc.mutation.SetName(s)
		return vc
	}

	
	

	

	

	

	
	
	// SetAltNames sets the "alt_names" field.
	func (vc *VocabularyCreate) SetAltNames(pa pgtype.TextArray) *VocabularyCreate {
		vc.mutation.SetAltNames(pa)
		return vc
	}

	
	
		
		// SetNillableAltNames sets the "alt_names" field if the given value is not nil.
		func (vc *VocabularyCreate) SetNillableAltNames(pa *pgtype.TextArray) *VocabularyCreate {
			if pa != nil {
				vc.SetAltNames(*pa)
			}
			return vc
		}
	

	

	

	

	
	
	// SetLevel sets the "level" field.
	func (vc *VocabularyCreate) SetLevel(i int32) *VocabularyCreate {
		vc.mutation.SetLevel(i)
		return vc
	}

	
	

	

	

	

	
	
	// SetWord sets the "word" field.
	func (vc *VocabularyCreate) SetWord(s string) *VocabularyCreate {
		vc.mutation.SetWord(s)
		return vc
	}

	
	

	

	

	

	
	
	// SetWordType sets the "word_type" field.
	func (vc *VocabularyCreate) SetWordType(pa pgtype.TextArray) *VocabularyCreate {
		vc.mutation.SetWordType(pa)
		return vc
	}

	
	

	

	

	

	
	
	// SetReading sets the "reading" field.
	func (vc *VocabularyCreate) SetReading(s string) *VocabularyCreate {
		vc.mutation.SetReading(s)
		return vc
	}

	
	

	

	

	

	
	
	// SetAltReadings sets the "alt_readings" field.
	func (vc *VocabularyCreate) SetAltReadings(pa pgtype.TextArray) *VocabularyCreate {
		vc.mutation.SetAltReadings(pa)
		return vc
	}

	
	
		
		// SetNillableAltReadings sets the "alt_readings" field if the given value is not nil.
		func (vc *VocabularyCreate) SetNillableAltReadings(pa *pgtype.TextArray) *VocabularyCreate {
			if pa != nil {
				vc.SetAltReadings(*pa)
			}
			return vc
		}
	

	

	

	

	
	
	// SetPatterns sets the "patterns" field.
	func (vc *VocabularyCreate) SetPatterns(s []schema.Pattern) *VocabularyCreate {
		vc.mutation.SetPatterns(s)
		return vc
	}

	
	

	

	

	

	
	
	// SetSentences sets the "sentences" field.
	func (vc *VocabularyCreate) SetSentences(s []schema.Sentence) *VocabularyCreate {
		vc.mutation.SetSentences(s)
		return vc
	}

	
	

	

	

	

	
	
	// SetMeaningMnemonic sets the "meaning_mnemonic" field.
	func (vc *VocabularyCreate) SetMeaningMnemonic(s string) *VocabularyCreate {
		vc.mutation.SetMeaningMnemonic(s)
		return vc
	}

	
	

	

	

	

	
	
	// SetReadingMnemonic sets the "reading_mnemonic" field.
	func (vc *VocabularyCreate) SetReadingMnemonic(s string) *VocabularyCreate {
		vc.mutation.SetReadingMnemonic(s)
		return vc
	}

	
	

	

	

	

	
	
	// SetID sets the "id" field.
	func (vc *VocabularyCreate) SetID(u uuid.UUID) *VocabularyCreate {
		vc.mutation.SetID(u)
		return vc
	}

	
	
		
		// SetNillableID sets the "id" field if the given value is not nil.
		func (vc *VocabularyCreate) SetNillableID(u *uuid.UUID) *VocabularyCreate {
			if u != nil {
				vc.SetID(*u)
			}
			return vc
		}
	

	

	

	



	
	
	
	
	
		// AddKanjiIDs adds the "kanjis" edge to the Kanji entity by IDs.
		func (vc *VocabularyCreate) AddKanjiIDs(ids ... uuid.UUID) *VocabularyCreate {
			vc.mutation.AddKanjiIDs(ids ...)
			return vc
		}
	
	
	
	
	
	// AddKanjis adds the "kanjis" edges to the Kanji entity.
	func (vc *VocabularyCreate) AddKanjis(k ...*Kanji) *VocabularyCreate {
		ids := make([]uuid.UUID, len(k))
			for i := range k {
				ids[i] = k[i].ID
			}
			return vc.AddKanjiIDs(ids...)
	}


// Mutation returns the VocabularyMutation object of the builder.
func (vc *VocabularyCreate) Mutation() *VocabularyMutation {
	return vc.mutation
}




// Save creates the Vocabulary in the database.
func (vc *VocabularyCreate) Save(ctx context.Context) (*Vocabulary, error) {
	var (
		err error
		node *Vocabulary
	)
			vc.defaults()
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VocabularyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx) ; err != nil {
				return nil, err
			}
				mutation.id = &node.ID
				mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			if vc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Vocabulary)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VocabularyMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VocabularyCreate) SaveX(ctx context.Context) *Vocabulary {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VocabularyCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VocabularyCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

	// defaults sets the default values of the builder before save.
	func (vc *VocabularyCreate) defaults() {
				if _, ok := vc.mutation.CreatedAt(); !ok {
					v := vocabulary.DefaultCreatedAt()
					vc.mutation.SetCreatedAt(v)
				}
				if _, ok := vc.mutation.UpdatedAt(); !ok {
					v := vocabulary.DefaultUpdatedAt()
					vc.mutation.SetUpdatedAt(v)
				}
				if _, ok := vc.mutation.ID(); !ok {
					v := vocabulary.DefaultID()
					vc.mutation.SetID(v)
				}
	}


// check runs all checks and user-defined validators on the builder.
func (vc *VocabularyCreate) check() error {
			if _, ok := vc.mutation.CreatedAt(); !ok {
				return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Vocabulary.created_at"`)}
			}
			if _, ok := vc.mutation.UpdatedAt(); !ok {
				return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Vocabulary.updated_at"`)}
			}
			if _, ok := vc.mutation.Name(); !ok {
				return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Vocabulary.name"`)}
			}
			if v, ok := vc.mutation.Name(); ok {
				if err := vocabulary.NameValidator(v); err != nil {
					return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Vocabulary.name": %w`, err)}
				}
			}
			if _, ok := vc.mutation.Level(); !ok {
				return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Vocabulary.level"`)}
			}
			if v, ok := vc.mutation.Level(); ok {
				if err := vocabulary.LevelValidator(v); err != nil {
					return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Vocabulary.level": %w`, err)}
				}
			}
			if _, ok := vc.mutation.Word(); !ok {
				return &ValidationError{Name: "word", err: errors.New(`ent: missing required field "Vocabulary.word"`)}
			}
			if v, ok := vc.mutation.Word(); ok {
				if err := vocabulary.WordValidator(v); err != nil {
					return &ValidationError{Name: "word", err: fmt.Errorf(`ent: validator failed for field "Vocabulary.word": %w`, err)}
				}
			}
			if _, ok := vc.mutation.WordType(); !ok {
				return &ValidationError{Name: "word_type", err: errors.New(`ent: missing required field "Vocabulary.word_type"`)}
			}
			if _, ok := vc.mutation.Reading(); !ok {
				return &ValidationError{Name: "reading", err: errors.New(`ent: missing required field "Vocabulary.reading"`)}
			}
			if v, ok := vc.mutation.Reading(); ok {
				if err := vocabulary.ReadingValidator(v); err != nil {
					return &ValidationError{Name: "reading", err: fmt.Errorf(`ent: validator failed for field "Vocabulary.reading": %w`, err)}
				}
			}
			if _, ok := vc.mutation.Patterns(); !ok {
				return &ValidationError{Name: "patterns", err: errors.New(`ent: missing required field "Vocabulary.patterns"`)}
			}
			if _, ok := vc.mutation.Sentences(); !ok {
				return &ValidationError{Name: "sentences", err: errors.New(`ent: missing required field "Vocabulary.sentences"`)}
			}
			if _, ok := vc.mutation.MeaningMnemonic(); !ok {
				return &ValidationError{Name: "meaning_mnemonic", err: errors.New(`ent: missing required field "Vocabulary.meaning_mnemonic"`)}
			}
			if v, ok := vc.mutation.MeaningMnemonic(); ok {
				if err := vocabulary.MeaningMnemonicValidator(v); err != nil {
					return &ValidationError{Name: "meaning_mnemonic", err: fmt.Errorf(`ent: validator failed for field "Vocabulary.meaning_mnemonic": %w`, err)}
				}
			}
			if _, ok := vc.mutation.ReadingMnemonic(); !ok {
				return &ValidationError{Name: "reading_mnemonic", err: errors.New(`ent: missing required field "Vocabulary.reading_mnemonic"`)}
			}
			if v, ok := vc.mutation.ReadingMnemonic(); ok {
				if err := vocabulary.ReadingMnemonicValidator(v); err != nil {
					return &ValidationError{Name: "reading_mnemonic", err: fmt.Errorf(`ent: validator failed for field "Vocabulary.reading_mnemonic": %w`, err)}
				}
			}
	return nil
}


	
	




func (vc *VocabularyCreate) sqlSave(ctx context.Context) (*Vocabulary, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
		if _spec.ID.Value != nil {
				if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
					_node.ID = *id
				} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
					return nil, err
				}
		}
	return _node, nil
}

func (vc *VocabularyCreate) createSpec() (*Vocabulary, *sqlgraph.CreateSpec) {
	var (
		_node = &Vocabulary{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vocabulary.Table,
				ID: &sqlgraph.FieldSpec{
					Type: field.TypeUUID,
					Column: vocabulary.FieldID,
				},
		}
	)
		if id, ok := vc.mutation.ID(); ok {
			_node.ID = id
			_spec.ID.Value = &id
		}
		if value, ok := vc.mutation.CreatedAt(); ok {
			_spec.SetField(vocabulary.FieldCreatedAt, field.TypeTime, value)
			_node.CreatedAt = value
		}
		if value, ok := vc.mutation.UpdatedAt(); ok {
			_spec.SetField(vocabulary.FieldUpdatedAt, field.TypeTime, value)
			_node.UpdatedAt = value
		}
		if value, ok := vc.mutation.Name(); ok {
			_spec.SetField(vocabulary.FieldName, field.TypeString, value)
			_node.Name = value
		}
		if value, ok := vc.mutation.AltNames(); ok {
			_spec.SetField(vocabulary.FieldAltNames, field.TypeOther, value)
			_node.AltNames = value
		}
		if value, ok := vc.mutation.Level(); ok {
			_spec.SetField(vocabulary.FieldLevel, field.TypeInt32, value)
			_node.Level = value
		}
		if value, ok := vc.mutation.Word(); ok {
			_spec.SetField(vocabulary.FieldWord, field.TypeString, value)
			_node.Word = value
		}
		if value, ok := vc.mutation.WordType(); ok {
			_spec.SetField(vocabulary.FieldWordType, field.TypeOther, value)
			_node.WordType = value
		}
		if value, ok := vc.mutation.Reading(); ok {
			_spec.SetField(vocabulary.FieldReading, field.TypeString, value)
			_node.Reading = value
		}
		if value, ok := vc.mutation.AltReadings(); ok {
			_spec.SetField(vocabulary.FieldAltReadings, field.TypeOther, value)
			_node.AltReadings = value
		}
		if value, ok := vc.mutation.Patterns(); ok {
			_spec.SetField(vocabulary.FieldPatterns, field.TypeJSON, value)
			_node.Patterns = value
		}
		if value, ok := vc.mutation.Sentences(); ok {
			_spec.SetField(vocabulary.FieldSentences, field.TypeJSON, value)
			_node.Sentences = value
		}
		if value, ok := vc.mutation.MeaningMnemonic(); ok {
			_spec.SetField(vocabulary.FieldMeaningMnemonic, field.TypeString, value)
			_node.MeaningMnemonic = value
		}
		if value, ok := vc.mutation.ReadingMnemonic(); ok {
			_spec.SetField(vocabulary.FieldReadingMnemonic, field.TypeString, value)
			_node.ReadingMnemonic = value
		}
		if nodes := vc.mutation.KanjisIDs(); len(nodes) > 0 {
				edge := &sqlgraph.EdgeSpec{
		Rel: sqlgraph.M2M,
		Inverse: false,
		Table: vocabulary.KanjisTable,
		Columns: vocabulary.KanjisPrimaryKey,
		Bidi: false,
		Target: &sqlgraph.EdgeTarget{
			IDSpec: &sqlgraph.FieldSpec{
				Type: field.TypeUUID,
				Column: kanji.FieldID,
			},
		},
	}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
			_spec.Edges = append(_spec.Edges, edge)
		}
	return _node, _spec
}
	








// VocabularyCreateBulk is the builder for creating many Vocabulary entities in bulk.
type VocabularyCreateBulk struct {
	config
	builders []*VocabularyCreate
}




	
		



// Save creates the Vocabulary entities in the database.
func (vcb *VocabularyCreateBulk) Save(ctx context.Context) ([]*Vocabulary, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vocabulary, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
				builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VocabularyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
					mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VocabularyCreateBulk) SaveX(ctx context.Context) []*Vocabulary {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VocabularyCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VocabularyCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
	


	

