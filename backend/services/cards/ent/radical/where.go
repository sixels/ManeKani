
// Code generated by ent, DO NOT EDIT.



	

package radical




import (
	"context"
	"errors"
	"fmt"
	"math"
	"strings"
	"time"
		"sixels.io/manekani/services/cards/ent/predicate"
				"github.com/google/uuid"
			"github.com/google/uuid"
	"entgo.io/ent"
	"entgo.io/ent/dialect"
			"entgo.io/ent/dialect/sql"
			"entgo.io/ent/dialect/sql/sqlgraph"
			"entgo.io/ent/dialect/sql/sqljson"
			"entgo.io/ent/schema/field"

)



	// ID filters vertices based on their ID field.
	func ID(id uuid.UUID) predicate.Radical {
		return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
	}

	
		
		
		// IDEQ applies the EQ predicate on the ID field.
		func IDEQ(id uuid.UUID) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID),id))
	})
		}
	
		
		
		// IDNEQ applies the NEQ predicate on the ID field.
		func IDNEQ(id uuid.UUID) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID),id))
	})
		}
	
		
		
		// IDIn applies the In predicate on the ID field.
		func IDIn(ids ...uuid.UUID) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
			v := make([]any, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
		s.Where(sql.In(s.C(FieldID),v...))
	})
		}
	
		
		
		// IDNotIn applies the NotIn predicate on the ID field.
		func IDNotIn(ids ...uuid.UUID) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
			v := make([]any, len(ids))
			for i := range v {
				v[i] = ids[i]
			}
		s.Where(sql.NotIn(s.C(FieldID),v...))
	})
		}
	
		
		
		// IDGT applies the GT predicate on the ID field.
		func IDGT(id uuid.UUID) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID),id))
	})
		}
	
		
		
		// IDGTE applies the GTE predicate on the ID field.
		func IDGTE(id uuid.UUID) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID),id))
	})
		}
	
		
		
		// IDLT applies the LT predicate on the ID field.
		func IDLT(id uuid.UUID) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID),id))
	})
		}
	
		
		
		// IDLTE applies the LTE predicate on the ID field.
		func IDLTE(id uuid.UUID) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID),id))
	})
		}
	



	
	
	
	
	
		
		// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
		func CreatedAt(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
		}

	
	
	
	
	
		
		// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
		func UpdatedAt(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
		}

	
	
	
	
	
		
		// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
		func Name(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
		}

	
	
	
	
	
		
		// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
		func Level(v int32) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
		}

	
	
	
	
	
		
		// Symbol applies equality check predicate on the "symbol" field. It's identical to SymbolEQ.
		func Symbol(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymbol), v))
	})
		}

	
	
	
	
	
		
		// MeaningMnemonic applies equality check predicate on the "meaning_mnemonic" field. It's identical to MeaningMnemonicEQ.
		func MeaningMnemonic(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeaningMnemonic), v))
	})
		}



	
		
		
		
		
		// CreatedAtEQ applies the EQ predicate on the "created_at" field.
		func CreatedAtEQ(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
		}
	
		
		
		
		
		// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
		func CreatedAtNEQ(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
		}
	
		
		
		
		
		// CreatedAtIn applies the In predicate on the "created_at" field.
		func CreatedAtIn(vs ...time.Time) predicate.Radical {
				v := make([]any, len(vs))
				for i := range v {
						v[i] = vs[i]
				}
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
		}
	
		
		
		
		
		// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
		func CreatedAtNotIn(vs ...time.Time) predicate.Radical {
				v := make([]any, len(vs))
				for i := range v {
						v[i] = vs[i]
				}
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
		}
	
		
		
		
		
		// CreatedAtGT applies the GT predicate on the "created_at" field.
		func CreatedAtGT(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
		}
	
		
		
		
		
		// CreatedAtGTE applies the GTE predicate on the "created_at" field.
		func CreatedAtGTE(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
		}
	
		
		
		
		
		// CreatedAtLT applies the LT predicate on the "created_at" field.
		func CreatedAtLT(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
		}
	
		
		
		
		
		// CreatedAtLTE applies the LTE predicate on the "created_at" field.
		func CreatedAtLTE(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
		}
	

	
		
		
		
		
		// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
		func UpdatedAtEQ(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
		}
	
		
		
		
		
		// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
		func UpdatedAtNEQ(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
		}
	
		
		
		
		
		// UpdatedAtIn applies the In predicate on the "updated_at" field.
		func UpdatedAtIn(vs ...time.Time) predicate.Radical {
				v := make([]any, len(vs))
				for i := range v {
						v[i] = vs[i]
				}
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
		}
	
		
		
		
		
		// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
		func UpdatedAtNotIn(vs ...time.Time) predicate.Radical {
				v := make([]any, len(vs))
				for i := range v {
						v[i] = vs[i]
				}
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
		}
	
		
		
		
		
		// UpdatedAtGT applies the GT predicate on the "updated_at" field.
		func UpdatedAtGT(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
		}
	
		
		
		
		
		// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
		func UpdatedAtGTE(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
		}
	
		
		
		
		
		// UpdatedAtLT applies the LT predicate on the "updated_at" field.
		func UpdatedAtLT(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
		}
	
		
		
		
		
		// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
		func UpdatedAtLTE(v time.Time) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
		}
	

	
		
		
		
		
		// NameEQ applies the EQ predicate on the "name" field.
		func NameEQ(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
		}
	
		
		
		
		
		// NameNEQ applies the NEQ predicate on the "name" field.
		func NameNEQ(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
		}
	
		
		
		
		
		// NameIn applies the In predicate on the "name" field.
		func NameIn(vs ...string) predicate.Radical {
				v := make([]any, len(vs))
				for i := range v {
						v[i] = vs[i]
				}
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
		}
	
		
		
		
		
		// NameNotIn applies the NotIn predicate on the "name" field.
		func NameNotIn(vs ...string) predicate.Radical {
				v := make([]any, len(vs))
				for i := range v {
						v[i] = vs[i]
				}
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
		}
	
		
		
		
		
		// NameGT applies the GT predicate on the "name" field.
		func NameGT(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
		}
	
		
		
		
		
		// NameGTE applies the GTE predicate on the "name" field.
		func NameGTE(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
		}
	
		
		
		
		
		// NameLT applies the LT predicate on the "name" field.
		func NameLT(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
		}
	
		
		
		
		
		// NameLTE applies the LTE predicate on the "name" field.
		func NameLTE(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
		}
	
		
		
		
		
		// NameContains applies the Contains predicate on the "name" field.
		func NameContains(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
		}
	
		
		
		
		
		// NameHasPrefix applies the HasPrefix predicate on the "name" field.
		func NameHasPrefix(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
		}
	
		
		
		
		
		// NameHasSuffix applies the HasSuffix predicate on the "name" field.
		func NameHasSuffix(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
		}
	
		
		
		
		
		// NameEqualFold applies the EqualFold predicate on the "name" field.
		func NameEqualFold(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
		}
	
		
		
		
		
		// NameContainsFold applies the ContainsFold predicate on the "name" field.
		func NameContainsFold(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
		}
	

	
		
		
		
		
		// LevelEQ applies the EQ predicate on the "level" field.
		func LevelEQ(v int32) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
		}
	
		
		
		
		
		// LevelNEQ applies the NEQ predicate on the "level" field.
		func LevelNEQ(v int32) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
		}
	
		
		
		
		
		// LevelIn applies the In predicate on the "level" field.
		func LevelIn(vs ...int32) predicate.Radical {
				v := make([]any, len(vs))
				for i := range v {
						v[i] = vs[i]
				}
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
		}
	
		
		
		
		
		// LevelNotIn applies the NotIn predicate on the "level" field.
		func LevelNotIn(vs ...int32) predicate.Radical {
				v := make([]any, len(vs))
				for i := range v {
						v[i] = vs[i]
				}
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
		}
	
		
		
		
		
		// LevelGT applies the GT predicate on the "level" field.
		func LevelGT(v int32) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLevel), v))
	})
		}
	
		
		
		
		
		// LevelGTE applies the GTE predicate on the "level" field.
		func LevelGTE(v int32) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLevel), v))
	})
		}
	
		
		
		
		
		// LevelLT applies the LT predicate on the "level" field.
		func LevelLT(v int32) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLevel), v))
	})
		}
	
		
		
		
		
		// LevelLTE applies the LTE predicate on the "level" field.
		func LevelLTE(v int32) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLevel), v))
	})
		}
	

	
		
		
		
		
		// SymbolEQ applies the EQ predicate on the "symbol" field.
		func SymbolEQ(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSymbol), v))
	})
		}
	
		
		
		
		
		// SymbolNEQ applies the NEQ predicate on the "symbol" field.
		func SymbolNEQ(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSymbol), v))
	})
		}
	
		
		
		
		
		// SymbolIn applies the In predicate on the "symbol" field.
		func SymbolIn(vs ...string) predicate.Radical {
				v := make([]any, len(vs))
				for i := range v {
						v[i] = vs[i]
				}
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSymbol), v...))
	})
		}
	
		
		
		
		
		// SymbolNotIn applies the NotIn predicate on the "symbol" field.
		func SymbolNotIn(vs ...string) predicate.Radical {
				v := make([]any, len(vs))
				for i := range v {
						v[i] = vs[i]
				}
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSymbol), v...))
	})
		}
	
		
		
		
		
		// SymbolGT applies the GT predicate on the "symbol" field.
		func SymbolGT(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSymbol), v))
	})
		}
	
		
		
		
		
		// SymbolGTE applies the GTE predicate on the "symbol" field.
		func SymbolGTE(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSymbol), v))
	})
		}
	
		
		
		
		
		// SymbolLT applies the LT predicate on the "symbol" field.
		func SymbolLT(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSymbol), v))
	})
		}
	
		
		
		
		
		// SymbolLTE applies the LTE predicate on the "symbol" field.
		func SymbolLTE(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSymbol), v))
	})
		}
	
		
		
		
		
		// SymbolContains applies the Contains predicate on the "symbol" field.
		func SymbolContains(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSymbol), v))
	})
		}
	
		
		
		
		
		// SymbolHasPrefix applies the HasPrefix predicate on the "symbol" field.
		func SymbolHasPrefix(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSymbol), v))
	})
		}
	
		
		
		
		
		// SymbolHasSuffix applies the HasSuffix predicate on the "symbol" field.
		func SymbolHasSuffix(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSymbol), v))
	})
		}
	
		
		
		
		
		// SymbolEqualFold applies the EqualFold predicate on the "symbol" field.
		func SymbolEqualFold(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSymbol), v))
	})
		}
	
		
		
		
		
		// SymbolContainsFold applies the ContainsFold predicate on the "symbol" field.
		func SymbolContainsFold(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSymbol), v))
	})
		}
	

	
		
		
		
		
		// MeaningMnemonicEQ applies the EQ predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicEQ(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMeaningMnemonic), v))
	})
		}
	
		
		
		
		
		// MeaningMnemonicNEQ applies the NEQ predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicNEQ(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMeaningMnemonic), v))
	})
		}
	
		
		
		
		
		// MeaningMnemonicIn applies the In predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicIn(vs ...string) predicate.Radical {
				v := make([]any, len(vs))
				for i := range v {
						v[i] = vs[i]
				}
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMeaningMnemonic), v...))
	})
		}
	
		
		
		
		
		// MeaningMnemonicNotIn applies the NotIn predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicNotIn(vs ...string) predicate.Radical {
				v := make([]any, len(vs))
				for i := range v {
						v[i] = vs[i]
				}
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMeaningMnemonic), v...))
	})
		}
	
		
		
		
		
		// MeaningMnemonicGT applies the GT predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicGT(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMeaningMnemonic), v))
	})
		}
	
		
		
		
		
		// MeaningMnemonicGTE applies the GTE predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicGTE(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMeaningMnemonic), v))
	})
		}
	
		
		
		
		
		// MeaningMnemonicLT applies the LT predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicLT(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMeaningMnemonic), v))
	})
		}
	
		
		
		
		
		// MeaningMnemonicLTE applies the LTE predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicLTE(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMeaningMnemonic), v))
	})
		}
	
		
		
		
		
		// MeaningMnemonicContains applies the Contains predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicContains(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMeaningMnemonic), v))
	})
		}
	
		
		
		
		
		// MeaningMnemonicHasPrefix applies the HasPrefix predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicHasPrefix(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMeaningMnemonic), v))
	})
		}
	
		
		
		
		
		// MeaningMnemonicHasSuffix applies the HasSuffix predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicHasSuffix(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMeaningMnemonic), v))
	})
		}
	
		
		
		
		
		// MeaningMnemonicEqualFold applies the EqualFold predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicEqualFold(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMeaningMnemonic), v))
	})
		}
	
		
		
		
		
		// MeaningMnemonicContainsFold applies the ContainsFold predicate on the "meaning_mnemonic" field.
		func MeaningMnemonicContainsFold(v string) predicate.Radical {
			return predicate.Radical(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMeaningMnemonic), v))
	})
		}
	



	
	// HasKanjis applies the HasEdge predicate on the "kanjis" edge.
	func HasKanjis() predicate.Radical {
		return predicate.Radical(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
				sqlgraph.From(Table, FieldID),
					sqlgraph.To(KanjisTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, KanjisTable,KanjisPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
	}
	
	// HasKanjisWith applies the HasEdge predicate on the "kanjis" edge with a given conditions (other predicates).
	func HasKanjisWith(preds ...predicate.Kanji) predicate.Radical {
		return predicate.Radical(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
				sqlgraph.From(Table, FieldID),
					sqlgraph.To(KanjisInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, KanjisTable,KanjisPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
	}


// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Radical) predicate.Radical {
	return predicate.Radical(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Radical) predicate.Radical {
	return predicate.Radical(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Radical) predicate.Radical {
	return predicate.Radical(func(s *sql.Selector) {
		p(s.Not())
	})
}





