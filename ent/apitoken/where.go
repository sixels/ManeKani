// Code generated by ent, DO NOT EDIT.

package apitoken

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	ulid "github.com/oklog/ulid/v2"
	"github.com/sixels/manekani/core/domain/tokens"
	"github.com/sixels/manekani/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id ulid.ULID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id ulid.ULID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id ulid.ULID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...ulid.ULID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...ulid.ULID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id ulid.ULID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id ulid.ULID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id ulid.ULID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id ulid.ULID) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldName, v))
}

// UsedAt applies equality check predicate on the "used_at" field. It's identical to UsedAtEQ.
func UsedAt(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldUsedAt, v))
}

// Token applies equality check predicate on the "token" field. It's identical to TokenEQ.
func Token(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldToken, v))
}

// Prefix applies equality check predicate on the "prefix" field. It's identical to PrefixEQ.
func Prefix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldPrefix, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldContainsFold(FieldName, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v tokens.APITokenStatus) predicate.ApiToken {
	vc := v
	return predicate.ApiToken(sql.FieldEQ(FieldStatus, vc))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v tokens.APITokenStatus) predicate.ApiToken {
	vc := v
	return predicate.ApiToken(sql.FieldNEQ(FieldStatus, vc))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...tokens.APITokenStatus) predicate.ApiToken {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApiToken(sql.FieldIn(FieldStatus, v...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...tokens.APITokenStatus) predicate.ApiToken {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ApiToken(sql.FieldNotIn(FieldStatus, v...))
}

// UsedAtEQ applies the EQ predicate on the "used_at" field.
func UsedAtEQ(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldUsedAt, v))
}

// UsedAtNEQ applies the NEQ predicate on the "used_at" field.
func UsedAtNEQ(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldUsedAt, v))
}

// UsedAtIn applies the In predicate on the "used_at" field.
func UsedAtIn(vs ...time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldUsedAt, vs...))
}

// UsedAtNotIn applies the NotIn predicate on the "used_at" field.
func UsedAtNotIn(vs ...time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldUsedAt, vs...))
}

// UsedAtGT applies the GT predicate on the "used_at" field.
func UsedAtGT(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldUsedAt, v))
}

// UsedAtGTE applies the GTE predicate on the "used_at" field.
func UsedAtGTE(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldUsedAt, v))
}

// UsedAtLT applies the LT predicate on the "used_at" field.
func UsedAtLT(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldUsedAt, v))
}

// UsedAtLTE applies the LTE predicate on the "used_at" field.
func UsedAtLTE(v time.Time) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldUsedAt, v))
}

// UsedAtIsNil applies the IsNil predicate on the "used_at" field.
func UsedAtIsNil() predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIsNull(FieldUsedAt))
}

// UsedAtNotNil applies the NotNil predicate on the "used_at" field.
func UsedAtNotNil() predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotNull(FieldUsedAt))
}

// TokenEQ applies the EQ predicate on the "token" field.
func TokenEQ(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldToken, v))
}

// TokenNEQ applies the NEQ predicate on the "token" field.
func TokenNEQ(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldToken, v))
}

// TokenIn applies the In predicate on the "token" field.
func TokenIn(vs ...string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldToken, vs...))
}

// TokenNotIn applies the NotIn predicate on the "token" field.
func TokenNotIn(vs ...string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldToken, vs...))
}

// TokenGT applies the GT predicate on the "token" field.
func TokenGT(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldToken, v))
}

// TokenGTE applies the GTE predicate on the "token" field.
func TokenGTE(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldToken, v))
}

// TokenLT applies the LT predicate on the "token" field.
func TokenLT(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldToken, v))
}

// TokenLTE applies the LTE predicate on the "token" field.
func TokenLTE(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldToken, v))
}

// TokenContains applies the Contains predicate on the "token" field.
func TokenContains(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldContains(FieldToken, v))
}

// TokenHasPrefix applies the HasPrefix predicate on the "token" field.
func TokenHasPrefix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldHasPrefix(FieldToken, v))
}

// TokenHasSuffix applies the HasSuffix predicate on the "token" field.
func TokenHasSuffix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldHasSuffix(FieldToken, v))
}

// TokenEqualFold applies the EqualFold predicate on the "token" field.
func TokenEqualFold(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEqualFold(FieldToken, v))
}

// TokenContainsFold applies the ContainsFold predicate on the "token" field.
func TokenContainsFold(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldContainsFold(FieldToken, v))
}

// PrefixEQ applies the EQ predicate on the "prefix" field.
func PrefixEQ(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEQ(FieldPrefix, v))
}

// PrefixNEQ applies the NEQ predicate on the "prefix" field.
func PrefixNEQ(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNEQ(FieldPrefix, v))
}

// PrefixIn applies the In predicate on the "prefix" field.
func PrefixIn(vs ...string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldIn(FieldPrefix, vs...))
}

// PrefixNotIn applies the NotIn predicate on the "prefix" field.
func PrefixNotIn(vs ...string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldNotIn(FieldPrefix, vs...))
}

// PrefixGT applies the GT predicate on the "prefix" field.
func PrefixGT(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGT(FieldPrefix, v))
}

// PrefixGTE applies the GTE predicate on the "prefix" field.
func PrefixGTE(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldGTE(FieldPrefix, v))
}

// PrefixLT applies the LT predicate on the "prefix" field.
func PrefixLT(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLT(FieldPrefix, v))
}

// PrefixLTE applies the LTE predicate on the "prefix" field.
func PrefixLTE(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldLTE(FieldPrefix, v))
}

// PrefixContains applies the Contains predicate on the "prefix" field.
func PrefixContains(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldContains(FieldPrefix, v))
}

// PrefixHasPrefix applies the HasPrefix predicate on the "prefix" field.
func PrefixHasPrefix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldHasPrefix(FieldPrefix, v))
}

// PrefixHasSuffix applies the HasSuffix predicate on the "prefix" field.
func PrefixHasSuffix(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldHasSuffix(FieldPrefix, v))
}

// PrefixEqualFold applies the EqualFold predicate on the "prefix" field.
func PrefixEqualFold(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldEqualFold(FieldPrefix, v))
}

// PrefixContainsFold applies the ContainsFold predicate on the "prefix" field.
func PrefixContainsFold(v string) predicate.ApiToken {
	return predicate.ApiToken(sql.FieldContainsFold(FieldPrefix, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ApiToken) predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ApiToken) predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ApiToken) predicate.ApiToken {
	return predicate.ApiToken(func(s *sql.Selector) {
		p(s.Not())
	})
}
