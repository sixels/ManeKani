// Code generated by ent, DO NOT EDIT.

package card

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the card type in the database.
	Label = "card"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldProgress holds the string denoting the progress field in the database.
	FieldProgress = "progress"
	// FieldTotalErrors holds the string denoting the total_errors field in the database.
	FieldTotalErrors = "total_errors"
	// FieldUnlockedAt holds the string denoting the unlocked_at field in the database.
	FieldUnlockedAt = "unlocked_at"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldPassedAt holds the string denoting the passed_at field in the database.
	FieldPassedAt = "passed_at"
	// FieldAvailableAt holds the string denoting the available_at field in the database.
	FieldAvailableAt = "available_at"
	// FieldBurnedAt holds the string denoting the burned_at field in the database.
	FieldBurnedAt = "burned_at"
	// EdgeDeckProgress holds the string denoting the deck_progress edge name in mutations.
	EdgeDeckProgress = "deck_progress"
	// EdgeSubject holds the string denoting the subject edge name in mutations.
	EdgeSubject = "subject"
	// EdgeReviews holds the string denoting the reviews edge name in mutations.
	EdgeReviews = "reviews"
	// Table holds the table name of the card in the database.
	Table = "cards"
	// DeckProgressTable is the table that holds the deck_progress relation/edge.
	DeckProgressTable = "cards"
	// DeckProgressInverseTable is the table name for the DeckProgress entity.
	// It exists in this package in order to avoid circular dependency with the "deckprogress" package.
	DeckProgressInverseTable = "deck_progresses"
	// DeckProgressColumn is the table column denoting the deck_progress relation/edge.
	DeckProgressColumn = "deck_progress_cards"
	// SubjectTable is the table that holds the subject relation/edge.
	SubjectTable = "cards"
	// SubjectInverseTable is the table name for the Subject entity.
	// It exists in this package in order to avoid circular dependency with the "subject" package.
	SubjectInverseTable = "subjects"
	// SubjectColumn is the table column denoting the subject relation/edge.
	SubjectColumn = "subject_cards"
	// ReviewsTable is the table that holds the reviews relation/edge.
	ReviewsTable = "reviews"
	// ReviewsInverseTable is the table name for the Review entity.
	// It exists in this package in order to avoid circular dependency with the "review" package.
	ReviewsInverseTable = "reviews"
	// ReviewsColumn is the table column denoting the reviews relation/edge.
	ReviewsColumn = "card_reviews"
)

// Columns holds all SQL columns for card fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldProgress,
	FieldTotalErrors,
	FieldUnlockedAt,
	FieldStartedAt,
	FieldPassedAt,
	FieldAvailableAt,
	FieldBurnedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "cards"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"deck_progress_cards",
	"subject_cards",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultProgress holds the default value on creation for the "progress" field.
	DefaultProgress uint8
	// DefaultTotalErrors holds the default value on creation for the "total_errors" field.
	DefaultTotalErrors int32
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Card queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByProgress orders the results by the progress field.
func ByProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldProgress, opts...).ToFunc()
}

// ByTotalErrors orders the results by the total_errors field.
func ByTotalErrors(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTotalErrors, opts...).ToFunc()
}

// ByUnlockedAt orders the results by the unlocked_at field.
func ByUnlockedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUnlockedAt, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByPassedAt orders the results by the passed_at field.
func ByPassedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassedAt, opts...).ToFunc()
}

// ByAvailableAt orders the results by the available_at field.
func ByAvailableAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvailableAt, opts...).ToFunc()
}

// ByBurnedAt orders the results by the burned_at field.
func ByBurnedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBurnedAt, opts...).ToFunc()
}

// ByDeckProgressField orders the results by deck_progress field.
func ByDeckProgressField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDeckProgressStep(), sql.OrderByField(field, opts...))
	}
}

// BySubjectField orders the results by subject field.
func BySubjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByReviewsCount orders the results by reviews count.
func ByReviewsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newReviewsStep(), opts...)
	}
}

// ByReviews orders the results by reviews terms.
func ByReviews(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReviewsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDeckProgressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DeckProgressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DeckProgressTable, DeckProgressColumn),
	)
}
func newSubjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, SubjectTable, SubjectColumn),
	)
}
func newReviewsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReviewsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ReviewsTable, ReviewsColumn),
	)
}
