// Code generated by ent, DO NOT EDIT.

package review

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the review type in the database.
	Label = "review"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldErrors holds the string denoting the errors field in the database.
	FieldErrors = "errors"
	// FieldStartProgress holds the string denoting the start_progress field in the database.
	FieldStartProgress = "start_progress"
	// FieldEndProgress holds the string denoting the end_progress field in the database.
	FieldEndProgress = "end_progress"
	// EdgeCard holds the string denoting the card edge name in mutations.
	EdgeCard = "card"
	// Table holds the table name of the review in the database.
	Table = "reviews"
	// CardTable is the table that holds the card relation/edge.
	CardTable = "reviews"
	// CardInverseTable is the table name for the Card entity.
	// It exists in this package in order to avoid circular dependency with the "card" package.
	CardInverseTable = "cards"
	// CardColumn is the table column denoting the card relation/edge.
	CardColumn = "card_reviews"
)

// Columns holds all SQL columns for review fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldErrors,
	FieldStartProgress,
	FieldEndProgress,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "reviews"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"card_reviews",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Review queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStartProgress orders the results by the start_progress field.
func ByStartProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartProgress, opts...).ToFunc()
}

// ByEndProgress orders the results by the end_progress field.
func ByEndProgress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndProgress, opts...).ToFunc()
}

// ByCardField orders the results by card field.
func ByCardField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCardStep(), sql.OrderByField(field, opts...))
	}
}
func newCardStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CardInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CardTable, CardColumn),
	)
}
