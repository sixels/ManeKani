// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sixels/manekani/ent/card"
	"github.com/sixels/manekani/ent/deckprogress"
	"github.com/sixels/manekani/ent/review"
	"github.com/sixels/manekani/ent/subject"
)

// CardCreate is the builder for creating a Card entity.
type CardCreate struct {
	config
	mutation *CardMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CardCreate) SetCreatedAt(t time.Time) *CardCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CardCreate) SetNillableCreatedAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CardCreate) SetUpdatedAt(t time.Time) *CardCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CardCreate) SetNillableUpdatedAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetProgress sets the "progress" field.
func (cc *CardCreate) SetProgress(u uint8) *CardCreate {
	cc.mutation.SetProgress(u)
	return cc
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (cc *CardCreate) SetNillableProgress(u *uint8) *CardCreate {
	if u != nil {
		cc.SetProgress(*u)
	}
	return cc
}

// SetTotalErrors sets the "total_errors" field.
func (cc *CardCreate) SetTotalErrors(i int32) *CardCreate {
	cc.mutation.SetTotalErrors(i)
	return cc
}

// SetNillableTotalErrors sets the "total_errors" field if the given value is not nil.
func (cc *CardCreate) SetNillableTotalErrors(i *int32) *CardCreate {
	if i != nil {
		cc.SetTotalErrors(*i)
	}
	return cc
}

// SetUnlockedAt sets the "unlocked_at" field.
func (cc *CardCreate) SetUnlockedAt(t time.Time) *CardCreate {
	cc.mutation.SetUnlockedAt(t)
	return cc
}

// SetNillableUnlockedAt sets the "unlocked_at" field if the given value is not nil.
func (cc *CardCreate) SetNillableUnlockedAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetUnlockedAt(*t)
	}
	return cc
}

// SetStartedAt sets the "started_at" field.
func (cc *CardCreate) SetStartedAt(t time.Time) *CardCreate {
	cc.mutation.SetStartedAt(t)
	return cc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cc *CardCreate) SetNillableStartedAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetStartedAt(*t)
	}
	return cc
}

// SetPassedAt sets the "passed_at" field.
func (cc *CardCreate) SetPassedAt(t time.Time) *CardCreate {
	cc.mutation.SetPassedAt(t)
	return cc
}

// SetNillablePassedAt sets the "passed_at" field if the given value is not nil.
func (cc *CardCreate) SetNillablePassedAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetPassedAt(*t)
	}
	return cc
}

// SetAvailableAt sets the "available_at" field.
func (cc *CardCreate) SetAvailableAt(t time.Time) *CardCreate {
	cc.mutation.SetAvailableAt(t)
	return cc
}

// SetNillableAvailableAt sets the "available_at" field if the given value is not nil.
func (cc *CardCreate) SetNillableAvailableAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetAvailableAt(*t)
	}
	return cc
}

// SetBurnedAt sets the "burned_at" field.
func (cc *CardCreate) SetBurnedAt(t time.Time) *CardCreate {
	cc.mutation.SetBurnedAt(t)
	return cc
}

// SetNillableBurnedAt sets the "burned_at" field if the given value is not nil.
func (cc *CardCreate) SetNillableBurnedAt(t *time.Time) *CardCreate {
	if t != nil {
		cc.SetBurnedAt(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CardCreate) SetID(u uuid.UUID) *CardCreate {
	cc.mutation.SetID(u)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CardCreate) SetNillableID(u *uuid.UUID) *CardCreate {
	if u != nil {
		cc.SetID(*u)
	}
	return cc
}

// SetDeckProgressID sets the "deck_progress" edge to the DeckProgress entity by ID.
func (cc *CardCreate) SetDeckProgressID(id int) *CardCreate {
	cc.mutation.SetDeckProgressID(id)
	return cc
}

// SetDeckProgress sets the "deck_progress" edge to the DeckProgress entity.
func (cc *CardCreate) SetDeckProgress(d *DeckProgress) *CardCreate {
	return cc.SetDeckProgressID(d.ID)
}

// SetSubjectID sets the "subject" edge to the Subject entity by ID.
func (cc *CardCreate) SetSubjectID(id uuid.UUID) *CardCreate {
	cc.mutation.SetSubjectID(id)
	return cc
}

// SetSubject sets the "subject" edge to the Subject entity.
func (cc *CardCreate) SetSubject(s *Subject) *CardCreate {
	return cc.SetSubjectID(s.ID)
}

// AddReviewIDs adds the "reviews" edge to the Review entity by IDs.
func (cc *CardCreate) AddReviewIDs(ids ...uuid.UUID) *CardCreate {
	cc.mutation.AddReviewIDs(ids...)
	return cc
}

// AddReviews adds the "reviews" edges to the Review entity.
func (cc *CardCreate) AddReviews(r ...*Review) *CardCreate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return cc.AddReviewIDs(ids...)
}

// Mutation returns the CardMutation object of the builder.
func (cc *CardCreate) Mutation() *CardMutation {
	return cc.mutation
}

// Save creates the Card in the database.
func (cc *CardCreate) Save(ctx context.Context) (*Card, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CardCreate) SaveX(ctx context.Context) *Card {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CardCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CardCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CardCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := card.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := card.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Progress(); !ok {
		v := card.DefaultProgress
		cc.mutation.SetProgress(v)
	}
	if _, ok := cc.mutation.TotalErrors(); !ok {
		v := card.DefaultTotalErrors
		cc.mutation.SetTotalErrors(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := card.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CardCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Card.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Card.updated_at"`)}
	}
	if _, ok := cc.mutation.Progress(); !ok {
		return &ValidationError{Name: "progress", err: errors.New(`ent: missing required field "Card.progress"`)}
	}
	if _, ok := cc.mutation.TotalErrors(); !ok {
		return &ValidationError{Name: "total_errors", err: errors.New(`ent: missing required field "Card.total_errors"`)}
	}
	if _, ok := cc.mutation.DeckProgressID(); !ok {
		return &ValidationError{Name: "deck_progress", err: errors.New(`ent: missing required edge "Card.deck_progress"`)}
	}
	if _, ok := cc.mutation.SubjectID(); !ok {
		return &ValidationError{Name: "subject", err: errors.New(`ent: missing required edge "Card.subject"`)}
	}
	return nil
}

func (cc *CardCreate) sqlSave(ctx context.Context) (*Card, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CardCreate) createSpec() (*Card, *sqlgraph.CreateSpec) {
	var (
		_node = &Card{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(card.Table, sqlgraph.NewFieldSpec(card.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = cc.conflict
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(card.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(card.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Progress(); ok {
		_spec.SetField(card.FieldProgress, field.TypeUint8, value)
		_node.Progress = value
	}
	if value, ok := cc.mutation.TotalErrors(); ok {
		_spec.SetField(card.FieldTotalErrors, field.TypeInt32, value)
		_node.TotalErrors = value
	}
	if value, ok := cc.mutation.UnlockedAt(); ok {
		_spec.SetField(card.FieldUnlockedAt, field.TypeTime, value)
		_node.UnlockedAt = &value
	}
	if value, ok := cc.mutation.StartedAt(); ok {
		_spec.SetField(card.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = &value
	}
	if value, ok := cc.mutation.PassedAt(); ok {
		_spec.SetField(card.FieldPassedAt, field.TypeTime, value)
		_node.PassedAt = &value
	}
	if value, ok := cc.mutation.AvailableAt(); ok {
		_spec.SetField(card.FieldAvailableAt, field.TypeTime, value)
		_node.AvailableAt = &value
	}
	if value, ok := cc.mutation.BurnedAt(); ok {
		_spec.SetField(card.FieldBurnedAt, field.TypeTime, value)
		_node.BurnedAt = &value
	}
	if nodes := cc.mutation.DeckProgressIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.DeckProgressTable,
			Columns: []string{card.DeckProgressColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deckprogress.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deck_progress_cards = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.SubjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   card.SubjectTable,
			Columns: []string{card.SubjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.subject_cards = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ReviewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   card.ReviewsTable,
			Columns: []string{card.ReviewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(review.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Card.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CardUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CardCreate) OnConflict(opts ...sql.ConflictOption) *CardUpsertOne {
	cc.conflict = opts
	return &CardUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CardCreate) OnConflictColumns(columns ...string) *CardUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CardUpsertOne{
		create: cc,
	}
}

type (
	// CardUpsertOne is the builder for "upsert"-ing
	//  one Card node.
	CardUpsertOne struct {
		create *CardCreate
	}

	// CardUpsert is the "OnConflict" setter.
	CardUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CardUpsert) SetUpdatedAt(v time.Time) *CardUpsert {
	u.Set(card.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CardUpsert) UpdateUpdatedAt() *CardUpsert {
	u.SetExcluded(card.FieldUpdatedAt)
	return u
}

// SetProgress sets the "progress" field.
func (u *CardUpsert) SetProgress(v uint8) *CardUpsert {
	u.Set(card.FieldProgress, v)
	return u
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *CardUpsert) UpdateProgress() *CardUpsert {
	u.SetExcluded(card.FieldProgress)
	return u
}

// AddProgress adds v to the "progress" field.
func (u *CardUpsert) AddProgress(v uint8) *CardUpsert {
	u.Add(card.FieldProgress, v)
	return u
}

// SetTotalErrors sets the "total_errors" field.
func (u *CardUpsert) SetTotalErrors(v int32) *CardUpsert {
	u.Set(card.FieldTotalErrors, v)
	return u
}

// UpdateTotalErrors sets the "total_errors" field to the value that was provided on create.
func (u *CardUpsert) UpdateTotalErrors() *CardUpsert {
	u.SetExcluded(card.FieldTotalErrors)
	return u
}

// AddTotalErrors adds v to the "total_errors" field.
func (u *CardUpsert) AddTotalErrors(v int32) *CardUpsert {
	u.Add(card.FieldTotalErrors, v)
	return u
}

// SetUnlockedAt sets the "unlocked_at" field.
func (u *CardUpsert) SetUnlockedAt(v time.Time) *CardUpsert {
	u.Set(card.FieldUnlockedAt, v)
	return u
}

// UpdateUnlockedAt sets the "unlocked_at" field to the value that was provided on create.
func (u *CardUpsert) UpdateUnlockedAt() *CardUpsert {
	u.SetExcluded(card.FieldUnlockedAt)
	return u
}

// ClearUnlockedAt clears the value of the "unlocked_at" field.
func (u *CardUpsert) ClearUnlockedAt() *CardUpsert {
	u.SetNull(card.FieldUnlockedAt)
	return u
}

// SetStartedAt sets the "started_at" field.
func (u *CardUpsert) SetStartedAt(v time.Time) *CardUpsert {
	u.Set(card.FieldStartedAt, v)
	return u
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *CardUpsert) UpdateStartedAt() *CardUpsert {
	u.SetExcluded(card.FieldStartedAt)
	return u
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *CardUpsert) ClearStartedAt() *CardUpsert {
	u.SetNull(card.FieldStartedAt)
	return u
}

// SetPassedAt sets the "passed_at" field.
func (u *CardUpsert) SetPassedAt(v time.Time) *CardUpsert {
	u.Set(card.FieldPassedAt, v)
	return u
}

// UpdatePassedAt sets the "passed_at" field to the value that was provided on create.
func (u *CardUpsert) UpdatePassedAt() *CardUpsert {
	u.SetExcluded(card.FieldPassedAt)
	return u
}

// ClearPassedAt clears the value of the "passed_at" field.
func (u *CardUpsert) ClearPassedAt() *CardUpsert {
	u.SetNull(card.FieldPassedAt)
	return u
}

// SetAvailableAt sets the "available_at" field.
func (u *CardUpsert) SetAvailableAt(v time.Time) *CardUpsert {
	u.Set(card.FieldAvailableAt, v)
	return u
}

// UpdateAvailableAt sets the "available_at" field to the value that was provided on create.
func (u *CardUpsert) UpdateAvailableAt() *CardUpsert {
	u.SetExcluded(card.FieldAvailableAt)
	return u
}

// ClearAvailableAt clears the value of the "available_at" field.
func (u *CardUpsert) ClearAvailableAt() *CardUpsert {
	u.SetNull(card.FieldAvailableAt)
	return u
}

// SetBurnedAt sets the "burned_at" field.
func (u *CardUpsert) SetBurnedAt(v time.Time) *CardUpsert {
	u.Set(card.FieldBurnedAt, v)
	return u
}

// UpdateBurnedAt sets the "burned_at" field to the value that was provided on create.
func (u *CardUpsert) UpdateBurnedAt() *CardUpsert {
	u.SetExcluded(card.FieldBurnedAt)
	return u
}

// ClearBurnedAt clears the value of the "burned_at" field.
func (u *CardUpsert) ClearBurnedAt() *CardUpsert {
	u.SetNull(card.FieldBurnedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(card.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CardUpsertOne) UpdateNewValues() *CardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(card.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(card.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Card.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CardUpsertOne) Ignore() *CardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CardUpsertOne) DoNothing() *CardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CardCreate.OnConflict
// documentation for more info.
func (u *CardUpsertOne) Update(set func(*CardUpsert)) *CardUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CardUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CardUpsertOne) SetUpdatedAt(v time.Time) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateUpdatedAt() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetProgress sets the "progress" field.
func (u *CardUpsertOne) SetProgress(v uint8) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetProgress(v)
	})
}

// AddProgress adds v to the "progress" field.
func (u *CardUpsertOne) AddProgress(v uint8) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.AddProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateProgress() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateProgress()
	})
}

// SetTotalErrors sets the "total_errors" field.
func (u *CardUpsertOne) SetTotalErrors(v int32) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetTotalErrors(v)
	})
}

// AddTotalErrors adds v to the "total_errors" field.
func (u *CardUpsertOne) AddTotalErrors(v int32) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.AddTotalErrors(v)
	})
}

// UpdateTotalErrors sets the "total_errors" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateTotalErrors() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateTotalErrors()
	})
}

// SetUnlockedAt sets the "unlocked_at" field.
func (u *CardUpsertOne) SetUnlockedAt(v time.Time) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetUnlockedAt(v)
	})
}

// UpdateUnlockedAt sets the "unlocked_at" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateUnlockedAt() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateUnlockedAt()
	})
}

// ClearUnlockedAt clears the value of the "unlocked_at" field.
func (u *CardUpsertOne) ClearUnlockedAt() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearUnlockedAt()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *CardUpsertOne) SetStartedAt(v time.Time) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateStartedAt() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *CardUpsertOne) ClearStartedAt() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearStartedAt()
	})
}

// SetPassedAt sets the "passed_at" field.
func (u *CardUpsertOne) SetPassedAt(v time.Time) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetPassedAt(v)
	})
}

// UpdatePassedAt sets the "passed_at" field to the value that was provided on create.
func (u *CardUpsertOne) UpdatePassedAt() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdatePassedAt()
	})
}

// ClearPassedAt clears the value of the "passed_at" field.
func (u *CardUpsertOne) ClearPassedAt() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearPassedAt()
	})
}

// SetAvailableAt sets the "available_at" field.
func (u *CardUpsertOne) SetAvailableAt(v time.Time) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetAvailableAt(v)
	})
}

// UpdateAvailableAt sets the "available_at" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateAvailableAt() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateAvailableAt()
	})
}

// ClearAvailableAt clears the value of the "available_at" field.
func (u *CardUpsertOne) ClearAvailableAt() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearAvailableAt()
	})
}

// SetBurnedAt sets the "burned_at" field.
func (u *CardUpsertOne) SetBurnedAt(v time.Time) *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.SetBurnedAt(v)
	})
}

// UpdateBurnedAt sets the "burned_at" field to the value that was provided on create.
func (u *CardUpsertOne) UpdateBurnedAt() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.UpdateBurnedAt()
	})
}

// ClearBurnedAt clears the value of the "burned_at" field.
func (u *CardUpsertOne) ClearBurnedAt() *CardUpsertOne {
	return u.Update(func(s *CardUpsert) {
		s.ClearBurnedAt()
	})
}

// Exec executes the query.
func (u *CardUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CardCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CardUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CardUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: CardUpsertOne.ID is not supported by MySQL driver. Use CardUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CardUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// CardCreateBulk is the builder for creating many Card entities in bulk.
type CardCreateBulk struct {
	config
	builders []*CardCreate
	conflict []sql.ConflictOption
}

// Save creates the Card entities in the database.
func (ccb *CardCreateBulk) Save(ctx context.Context) ([]*Card, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Card, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CardMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CardCreateBulk) SaveX(ctx context.Context) []*Card {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CardCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CardCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Card.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CardUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CardCreateBulk) OnConflict(opts ...sql.ConflictOption) *CardUpsertBulk {
	ccb.conflict = opts
	return &CardUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CardCreateBulk) OnConflictColumns(columns ...string) *CardUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CardUpsertBulk{
		create: ccb,
	}
}

// CardUpsertBulk is the builder for "upsert"-ing
// a bulk of Card nodes.
type CardUpsertBulk struct {
	create *CardCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(card.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *CardUpsertBulk) UpdateNewValues() *CardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(card.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(card.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Card.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CardUpsertBulk) Ignore() *CardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CardUpsertBulk) DoNothing() *CardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CardCreateBulk.OnConflict
// documentation for more info.
func (u *CardUpsertBulk) Update(set func(*CardUpsert)) *CardUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CardUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CardUpsertBulk) SetUpdatedAt(v time.Time) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateUpdatedAt() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetProgress sets the "progress" field.
func (u *CardUpsertBulk) SetProgress(v uint8) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetProgress(v)
	})
}

// AddProgress adds v to the "progress" field.
func (u *CardUpsertBulk) AddProgress(v uint8) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.AddProgress(v)
	})
}

// UpdateProgress sets the "progress" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateProgress() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateProgress()
	})
}

// SetTotalErrors sets the "total_errors" field.
func (u *CardUpsertBulk) SetTotalErrors(v int32) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetTotalErrors(v)
	})
}

// AddTotalErrors adds v to the "total_errors" field.
func (u *CardUpsertBulk) AddTotalErrors(v int32) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.AddTotalErrors(v)
	})
}

// UpdateTotalErrors sets the "total_errors" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateTotalErrors() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateTotalErrors()
	})
}

// SetUnlockedAt sets the "unlocked_at" field.
func (u *CardUpsertBulk) SetUnlockedAt(v time.Time) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetUnlockedAt(v)
	})
}

// UpdateUnlockedAt sets the "unlocked_at" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateUnlockedAt() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateUnlockedAt()
	})
}

// ClearUnlockedAt clears the value of the "unlocked_at" field.
func (u *CardUpsertBulk) ClearUnlockedAt() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearUnlockedAt()
	})
}

// SetStartedAt sets the "started_at" field.
func (u *CardUpsertBulk) SetStartedAt(v time.Time) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetStartedAt(v)
	})
}

// UpdateStartedAt sets the "started_at" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateStartedAt() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateStartedAt()
	})
}

// ClearStartedAt clears the value of the "started_at" field.
func (u *CardUpsertBulk) ClearStartedAt() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearStartedAt()
	})
}

// SetPassedAt sets the "passed_at" field.
func (u *CardUpsertBulk) SetPassedAt(v time.Time) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetPassedAt(v)
	})
}

// UpdatePassedAt sets the "passed_at" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdatePassedAt() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdatePassedAt()
	})
}

// ClearPassedAt clears the value of the "passed_at" field.
func (u *CardUpsertBulk) ClearPassedAt() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearPassedAt()
	})
}

// SetAvailableAt sets the "available_at" field.
func (u *CardUpsertBulk) SetAvailableAt(v time.Time) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetAvailableAt(v)
	})
}

// UpdateAvailableAt sets the "available_at" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateAvailableAt() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateAvailableAt()
	})
}

// ClearAvailableAt clears the value of the "available_at" field.
func (u *CardUpsertBulk) ClearAvailableAt() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearAvailableAt()
	})
}

// SetBurnedAt sets the "burned_at" field.
func (u *CardUpsertBulk) SetBurnedAt(v time.Time) *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.SetBurnedAt(v)
	})
}

// UpdateBurnedAt sets the "burned_at" field to the value that was provided on create.
func (u *CardUpsertBulk) UpdateBurnedAt() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.UpdateBurnedAt()
	})
}

// ClearBurnedAt clears the value of the "burned_at" field.
func (u *CardUpsertBulk) ClearBurnedAt() *CardUpsertBulk {
	return u.Update(func(s *CardUpsert) {
		s.ClearBurnedAt()
	})
}

// Exec executes the query.
func (u *CardUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CardCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CardCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CardUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
