// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/sixels/manekani/core/domain/cards"
	"github.com/sixels/manekani/ent/card"
	"github.com/sixels/manekani/ent/deck"
	"github.com/sixels/manekani/ent/subject"
	"github.com/sixels/manekani/ent/user"
)

// SubjectCreate is the builder for creating a Subject entity.
type SubjectCreate struct {
	config
	mutation *SubjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *SubjectCreate) SetCreatedAt(t time.Time) *SubjectCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableCreatedAt(t *time.Time) *SubjectCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SubjectCreate) SetUpdatedAt(t time.Time) *SubjectCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableUpdatedAt(t *time.Time) *SubjectCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetKind sets the "kind" field.
func (sc *SubjectCreate) SetKind(s string) *SubjectCreate {
	sc.mutation.SetKind(s)
	return sc
}

// SetLevel sets the "level" field.
func (sc *SubjectCreate) SetLevel(i int32) *SubjectCreate {
	sc.mutation.SetLevel(i)
	return sc
}

// SetName sets the "name" field.
func (sc *SubjectCreate) SetName(s string) *SubjectCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetValue sets the "value" field.
func (sc *SubjectCreate) SetValue(s string) *SubjectCreate {
	sc.mutation.SetValue(s)
	return sc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableValue(s *string) *SubjectCreate {
	if s != nil {
		sc.SetValue(*s)
	}
	return sc
}

// SetValueImage sets the "value_image" field.
func (sc *SubjectCreate) SetValueImage(s string) *SubjectCreate {
	sc.mutation.SetValueImage(s)
	return sc
}

// SetNillableValueImage sets the "value_image" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableValueImage(s *string) *SubjectCreate {
	if s != nil {
		sc.SetValueImage(*s)
	}
	return sc
}

// SetSlug sets the "slug" field.
func (sc *SubjectCreate) SetSlug(s string) *SubjectCreate {
	sc.mutation.SetSlug(s)
	return sc
}

// SetPriority sets the "priority" field.
func (sc *SubjectCreate) SetPriority(u uint8) *SubjectCreate {
	sc.mutation.SetPriority(u)
	return sc
}

// SetResources sets the "resources" field.
func (sc *SubjectCreate) SetResources(c []cards.Resource) *SubjectCreate {
	sc.mutation.SetResources(c)
	return sc
}

// SetStudyData sets the "study_data" field.
func (sc *SubjectCreate) SetStudyData(cd []cards.StudyData) *SubjectCreate {
	sc.mutation.SetStudyData(cd)
	return sc
}

// SetAdditionalStudyData sets the "additional_study_data" field.
func (sc *SubjectCreate) SetAdditionalStudyData(m *map[string]interface{}) *SubjectCreate {
	sc.mutation.SetAdditionalStudyData(m)
	return sc
}

// SetID sets the "id" field.
func (sc *SubjectCreate) SetID(u uuid.UUID) *SubjectCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SubjectCreate) SetNillableID(u *uuid.UUID) *SubjectCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// AddCardIDs adds the "cards" edge to the Card entity by IDs.
func (sc *SubjectCreate) AddCardIDs(ids ...uuid.UUID) *SubjectCreate {
	sc.mutation.AddCardIDs(ids...)
	return sc
}

// AddCards adds the "cards" edges to the Card entity.
func (sc *SubjectCreate) AddCards(c ...*Card) *SubjectCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return sc.AddCardIDs(ids...)
}

// AddSimilarIDs adds the "similar" edge to the Subject entity by IDs.
func (sc *SubjectCreate) AddSimilarIDs(ids ...uuid.UUID) *SubjectCreate {
	sc.mutation.AddSimilarIDs(ids...)
	return sc
}

// AddSimilar adds the "similar" edges to the Subject entity.
func (sc *SubjectCreate) AddSimilar(s ...*Subject) *SubjectCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddSimilarIDs(ids...)
}

// AddDependencyIDs adds the "dependencies" edge to the Subject entity by IDs.
func (sc *SubjectCreate) AddDependencyIDs(ids ...uuid.UUID) *SubjectCreate {
	sc.mutation.AddDependencyIDs(ids...)
	return sc
}

// AddDependencies adds the "dependencies" edges to the Subject entity.
func (sc *SubjectCreate) AddDependencies(s ...*Subject) *SubjectCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddDependencyIDs(ids...)
}

// AddDependentIDs adds the "dependents" edge to the Subject entity by IDs.
func (sc *SubjectCreate) AddDependentIDs(ids ...uuid.UUID) *SubjectCreate {
	sc.mutation.AddDependentIDs(ids...)
	return sc
}

// AddDependents adds the "dependents" edges to the Subject entity.
func (sc *SubjectCreate) AddDependents(s ...*Subject) *SubjectCreate {
	ids := make([]uuid.UUID, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return sc.AddDependentIDs(ids...)
}

// SetDeckID sets the "deck" edge to the Deck entity by ID.
func (sc *SubjectCreate) SetDeckID(id uuid.UUID) *SubjectCreate {
	sc.mutation.SetDeckID(id)
	return sc
}

// SetDeck sets the "deck" edge to the Deck entity.
func (sc *SubjectCreate) SetDeck(d *Deck) *SubjectCreate {
	return sc.SetDeckID(d.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (sc *SubjectCreate) SetOwnerID(id string) *SubjectCreate {
	sc.mutation.SetOwnerID(id)
	return sc
}

// SetOwner sets the "owner" edge to the User entity.
func (sc *SubjectCreate) SetOwner(u *User) *SubjectCreate {
	return sc.SetOwnerID(u.ID)
}

// Mutation returns the SubjectMutation object of the builder.
func (sc *SubjectCreate) Mutation() *SubjectMutation {
	return sc.mutation
}

// Save creates the Subject in the database.
func (sc *SubjectCreate) Save(ctx context.Context) (*Subject, error) {
	sc.defaults()
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubjectCreate) SaveX(ctx context.Context) *Subject {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubjectCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubjectCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubjectCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := subject.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := subject.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := subject.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubjectCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Subject.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Subject.updated_at"`)}
	}
	if _, ok := sc.mutation.Kind(); !ok {
		return &ValidationError{Name: "kind", err: errors.New(`ent: missing required field "Subject.kind"`)}
	}
	if _, ok := sc.mutation.Level(); !ok {
		return &ValidationError{Name: "level", err: errors.New(`ent: missing required field "Subject.level"`)}
	}
	if v, ok := sc.mutation.Level(); ok {
		if err := subject.LevelValidator(v); err != nil {
			return &ValidationError{Name: "level", err: fmt.Errorf(`ent: validator failed for field "Subject.level": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Subject.name"`)}
	}
	if v, ok := sc.mutation.Name(); ok {
		if err := subject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Subject.name": %w`, err)}
		}
	}
	if v, ok := sc.mutation.Value(); ok {
		if err := subject.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Subject.value": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Subject.slug"`)}
	}
	if v, ok := sc.mutation.Slug(); ok {
		if err := subject.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Subject.slug": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Subject.priority"`)}
	}
	if _, ok := sc.mutation.StudyData(); !ok {
		return &ValidationError{Name: "study_data", err: errors.New(`ent: missing required field "Subject.study_data"`)}
	}
	if _, ok := sc.mutation.DeckID(); !ok {
		return &ValidationError{Name: "deck", err: errors.New(`ent: missing required edge "Subject.deck"`)}
	}
	if _, ok := sc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Subject.owner"`)}
	}
	return nil
}

func (sc *SubjectCreate) sqlSave(ctx context.Context) (*Subject, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubjectCreate) createSpec() (*Subject, *sqlgraph.CreateSpec) {
	var (
		_node = &Subject{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subject.Table, sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(subject.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(subject.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Kind(); ok {
		_spec.SetField(subject.FieldKind, field.TypeString, value)
		_node.Kind = value
	}
	if value, ok := sc.mutation.Level(); ok {
		_spec.SetField(subject.FieldLevel, field.TypeInt32, value)
		_node.Level = value
	}
	if value, ok := sc.mutation.Name(); ok {
		_spec.SetField(subject.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := sc.mutation.Value(); ok {
		_spec.SetField(subject.FieldValue, field.TypeString, value)
		_node.Value = &value
	}
	if value, ok := sc.mutation.ValueImage(); ok {
		_spec.SetField(subject.FieldValueImage, field.TypeString, value)
		_node.ValueImage = &value
	}
	if value, ok := sc.mutation.Slug(); ok {
		_spec.SetField(subject.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := sc.mutation.Priority(); ok {
		_spec.SetField(subject.FieldPriority, field.TypeUint8, value)
		_node.Priority = value
	}
	if value, ok := sc.mutation.Resources(); ok {
		_spec.SetField(subject.FieldResources, field.TypeJSON, value)
		_node.Resources = value
	}
	if value, ok := sc.mutation.StudyData(); ok {
		_spec.SetField(subject.FieldStudyData, field.TypeJSON, value)
		_node.StudyData = value
	}
	if value, ok := sc.mutation.AdditionalStudyData(); ok {
		_spec.SetField(subject.FieldAdditionalStudyData, field.TypeJSON, value)
		_node.AdditionalStudyData = value
	}
	if nodes := sc.mutation.CardsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.CardsTable,
			Columns: []string{subject.CardsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(card.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.SimilarIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.SimilarTable,
			Columns: subject.SimilarPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DependenciesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   subject.DependenciesTable,
			Columns: subject.DependenciesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DependentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   subject.DependentsTable,
			Columns: subject.DependentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subject.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.DeckIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.DeckTable,
			Columns: []string{subject.DeckColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deck.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.deck_subjects = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subject.OwnerTable,
			Columns: []string{subject.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_subjects = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Subject.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubjectUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *SubjectCreate) OnConflict(opts ...sql.ConflictOption) *SubjectUpsertOne {
	sc.conflict = opts
	return &SubjectUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Subject.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *SubjectCreate) OnConflictColumns(columns ...string) *SubjectUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &SubjectUpsertOne{
		create: sc,
	}
}

type (
	// SubjectUpsertOne is the builder for "upsert"-ing
	//  one Subject node.
	SubjectUpsertOne struct {
		create *SubjectCreate
	}

	// SubjectUpsert is the "OnConflict" setter.
	SubjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *SubjectUpsert) SetUpdatedAt(v time.Time) *SubjectUpsert {
	u.Set(subject.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubjectUpsert) UpdateUpdatedAt() *SubjectUpsert {
	u.SetExcluded(subject.FieldUpdatedAt)
	return u
}

// SetKind sets the "kind" field.
func (u *SubjectUpsert) SetKind(v string) *SubjectUpsert {
	u.Set(subject.FieldKind, v)
	return u
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *SubjectUpsert) UpdateKind() *SubjectUpsert {
	u.SetExcluded(subject.FieldKind)
	return u
}

// SetLevel sets the "level" field.
func (u *SubjectUpsert) SetLevel(v int32) *SubjectUpsert {
	u.Set(subject.FieldLevel, v)
	return u
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SubjectUpsert) UpdateLevel() *SubjectUpsert {
	u.SetExcluded(subject.FieldLevel)
	return u
}

// AddLevel adds v to the "level" field.
func (u *SubjectUpsert) AddLevel(v int32) *SubjectUpsert {
	u.Add(subject.FieldLevel, v)
	return u
}

// SetName sets the "name" field.
func (u *SubjectUpsert) SetName(v string) *SubjectUpsert {
	u.Set(subject.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubjectUpsert) UpdateName() *SubjectUpsert {
	u.SetExcluded(subject.FieldName)
	return u
}

// SetValue sets the "value" field.
func (u *SubjectUpsert) SetValue(v string) *SubjectUpsert {
	u.Set(subject.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *SubjectUpsert) UpdateValue() *SubjectUpsert {
	u.SetExcluded(subject.FieldValue)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *SubjectUpsert) ClearValue() *SubjectUpsert {
	u.SetNull(subject.FieldValue)
	return u
}

// SetValueImage sets the "value_image" field.
func (u *SubjectUpsert) SetValueImage(v string) *SubjectUpsert {
	u.Set(subject.FieldValueImage, v)
	return u
}

// UpdateValueImage sets the "value_image" field to the value that was provided on create.
func (u *SubjectUpsert) UpdateValueImage() *SubjectUpsert {
	u.SetExcluded(subject.FieldValueImage)
	return u
}

// ClearValueImage clears the value of the "value_image" field.
func (u *SubjectUpsert) ClearValueImage() *SubjectUpsert {
	u.SetNull(subject.FieldValueImage)
	return u
}

// SetSlug sets the "slug" field.
func (u *SubjectUpsert) SetSlug(v string) *SubjectUpsert {
	u.Set(subject.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *SubjectUpsert) UpdateSlug() *SubjectUpsert {
	u.SetExcluded(subject.FieldSlug)
	return u
}

// SetPriority sets the "priority" field.
func (u *SubjectUpsert) SetPriority(v uint8) *SubjectUpsert {
	u.Set(subject.FieldPriority, v)
	return u
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *SubjectUpsert) UpdatePriority() *SubjectUpsert {
	u.SetExcluded(subject.FieldPriority)
	return u
}

// AddPriority adds v to the "priority" field.
func (u *SubjectUpsert) AddPriority(v uint8) *SubjectUpsert {
	u.Add(subject.FieldPriority, v)
	return u
}

// SetResources sets the "resources" field.
func (u *SubjectUpsert) SetResources(v []cards.Resource) *SubjectUpsert {
	u.Set(subject.FieldResources, v)
	return u
}

// UpdateResources sets the "resources" field to the value that was provided on create.
func (u *SubjectUpsert) UpdateResources() *SubjectUpsert {
	u.SetExcluded(subject.FieldResources)
	return u
}

// ClearResources clears the value of the "resources" field.
func (u *SubjectUpsert) ClearResources() *SubjectUpsert {
	u.SetNull(subject.FieldResources)
	return u
}

// SetStudyData sets the "study_data" field.
func (u *SubjectUpsert) SetStudyData(v []cards.StudyData) *SubjectUpsert {
	u.Set(subject.FieldStudyData, v)
	return u
}

// UpdateStudyData sets the "study_data" field to the value that was provided on create.
func (u *SubjectUpsert) UpdateStudyData() *SubjectUpsert {
	u.SetExcluded(subject.FieldStudyData)
	return u
}

// SetAdditionalStudyData sets the "additional_study_data" field.
func (u *SubjectUpsert) SetAdditionalStudyData(v *map[string]interface{}) *SubjectUpsert {
	u.Set(subject.FieldAdditionalStudyData, v)
	return u
}

// UpdateAdditionalStudyData sets the "additional_study_data" field to the value that was provided on create.
func (u *SubjectUpsert) UpdateAdditionalStudyData() *SubjectUpsert {
	u.SetExcluded(subject.FieldAdditionalStudyData)
	return u
}

// ClearAdditionalStudyData clears the value of the "additional_study_data" field.
func (u *SubjectUpsert) ClearAdditionalStudyData() *SubjectUpsert {
	u.SetNull(subject.FieldAdditionalStudyData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Subject.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subject.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubjectUpsertOne) UpdateNewValues() *SubjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(subject.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(subject.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Subject.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SubjectUpsertOne) Ignore() *SubjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubjectUpsertOne) DoNothing() *SubjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubjectCreate.OnConflict
// documentation for more info.
func (u *SubjectUpsertOne) Update(set func(*SubjectUpsert)) *SubjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubjectUpsertOne) SetUpdatedAt(v time.Time) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubjectUpsertOne) UpdateUpdatedAt() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetKind sets the "kind" field.
func (u *SubjectUpsertOne) SetKind(v string) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *SubjectUpsertOne) UpdateKind() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateKind()
	})
}

// SetLevel sets the "level" field.
func (u *SubjectUpsertOne) SetLevel(v int32) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *SubjectUpsertOne) AddLevel(v int32) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SubjectUpsertOne) UpdateLevel() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateLevel()
	})
}

// SetName sets the "name" field.
func (u *SubjectUpsertOne) SetName(v string) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubjectUpsertOne) UpdateName() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateName()
	})
}

// SetValue sets the "value" field.
func (u *SubjectUpsertOne) SetValue(v string) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *SubjectUpsertOne) UpdateValue() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *SubjectUpsertOne) ClearValue() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.ClearValue()
	})
}

// SetValueImage sets the "value_image" field.
func (u *SubjectUpsertOne) SetValueImage(v string) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.SetValueImage(v)
	})
}

// UpdateValueImage sets the "value_image" field to the value that was provided on create.
func (u *SubjectUpsertOne) UpdateValueImage() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateValueImage()
	})
}

// ClearValueImage clears the value of the "value_image" field.
func (u *SubjectUpsertOne) ClearValueImage() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.ClearValueImage()
	})
}

// SetSlug sets the "slug" field.
func (u *SubjectUpsertOne) SetSlug(v string) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *SubjectUpsertOne) UpdateSlug() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateSlug()
	})
}

// SetPriority sets the "priority" field.
func (u *SubjectUpsertOne) SetPriority(v uint8) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *SubjectUpsertOne) AddPriority(v uint8) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *SubjectUpsertOne) UpdatePriority() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdatePriority()
	})
}

// SetResources sets the "resources" field.
func (u *SubjectUpsertOne) SetResources(v []cards.Resource) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.SetResources(v)
	})
}

// UpdateResources sets the "resources" field to the value that was provided on create.
func (u *SubjectUpsertOne) UpdateResources() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateResources()
	})
}

// ClearResources clears the value of the "resources" field.
func (u *SubjectUpsertOne) ClearResources() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.ClearResources()
	})
}

// SetStudyData sets the "study_data" field.
func (u *SubjectUpsertOne) SetStudyData(v []cards.StudyData) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.SetStudyData(v)
	})
}

// UpdateStudyData sets the "study_data" field to the value that was provided on create.
func (u *SubjectUpsertOne) UpdateStudyData() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateStudyData()
	})
}

// SetAdditionalStudyData sets the "additional_study_data" field.
func (u *SubjectUpsertOne) SetAdditionalStudyData(v *map[string]interface{}) *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.SetAdditionalStudyData(v)
	})
}

// UpdateAdditionalStudyData sets the "additional_study_data" field to the value that was provided on create.
func (u *SubjectUpsertOne) UpdateAdditionalStudyData() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateAdditionalStudyData()
	})
}

// ClearAdditionalStudyData clears the value of the "additional_study_data" field.
func (u *SubjectUpsertOne) ClearAdditionalStudyData() *SubjectUpsertOne {
	return u.Update(func(s *SubjectUpsert) {
		s.ClearAdditionalStudyData()
	})
}

// Exec executes the query.
func (u *SubjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SubjectUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: SubjectUpsertOne.ID is not supported by MySQL driver. Use SubjectUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SubjectUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SubjectCreateBulk is the builder for creating many Subject entities in bulk.
type SubjectCreateBulk struct {
	config
	builders []*SubjectCreate
	conflict []sql.ConflictOption
}

// Save creates the Subject entities in the database.
func (scb *SubjectCreateBulk) Save(ctx context.Context) ([]*Subject, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subject, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubjectCreateBulk) SaveX(ctx context.Context) []*Subject {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubjectCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubjectCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Subject.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SubjectUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *SubjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *SubjectUpsertBulk {
	scb.conflict = opts
	return &SubjectUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Subject.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *SubjectCreateBulk) OnConflictColumns(columns ...string) *SubjectUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &SubjectUpsertBulk{
		create: scb,
	}
}

// SubjectUpsertBulk is the builder for "upsert"-ing
// a bulk of Subject nodes.
type SubjectUpsertBulk struct {
	create *SubjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Subject.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(subject.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *SubjectUpsertBulk) UpdateNewValues() *SubjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(subject.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(subject.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Subject.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SubjectUpsertBulk) Ignore() *SubjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SubjectUpsertBulk) DoNothing() *SubjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SubjectCreateBulk.OnConflict
// documentation for more info.
func (u *SubjectUpsertBulk) Update(set func(*SubjectUpsert)) *SubjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SubjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *SubjectUpsertBulk) SetUpdatedAt(v time.Time) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *SubjectUpsertBulk) UpdateUpdatedAt() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetKind sets the "kind" field.
func (u *SubjectUpsertBulk) SetKind(v string) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.SetKind(v)
	})
}

// UpdateKind sets the "kind" field to the value that was provided on create.
func (u *SubjectUpsertBulk) UpdateKind() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateKind()
	})
}

// SetLevel sets the "level" field.
func (u *SubjectUpsertBulk) SetLevel(v int32) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.SetLevel(v)
	})
}

// AddLevel adds v to the "level" field.
func (u *SubjectUpsertBulk) AddLevel(v int32) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.AddLevel(v)
	})
}

// UpdateLevel sets the "level" field to the value that was provided on create.
func (u *SubjectUpsertBulk) UpdateLevel() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateLevel()
	})
}

// SetName sets the "name" field.
func (u *SubjectUpsertBulk) SetName(v string) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SubjectUpsertBulk) UpdateName() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateName()
	})
}

// SetValue sets the "value" field.
func (u *SubjectUpsertBulk) SetValue(v string) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *SubjectUpsertBulk) UpdateValue() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *SubjectUpsertBulk) ClearValue() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.ClearValue()
	})
}

// SetValueImage sets the "value_image" field.
func (u *SubjectUpsertBulk) SetValueImage(v string) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.SetValueImage(v)
	})
}

// UpdateValueImage sets the "value_image" field to the value that was provided on create.
func (u *SubjectUpsertBulk) UpdateValueImage() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateValueImage()
	})
}

// ClearValueImage clears the value of the "value_image" field.
func (u *SubjectUpsertBulk) ClearValueImage() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.ClearValueImage()
	})
}

// SetSlug sets the "slug" field.
func (u *SubjectUpsertBulk) SetSlug(v string) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *SubjectUpsertBulk) UpdateSlug() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateSlug()
	})
}

// SetPriority sets the "priority" field.
func (u *SubjectUpsertBulk) SetPriority(v uint8) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.SetPriority(v)
	})
}

// AddPriority adds v to the "priority" field.
func (u *SubjectUpsertBulk) AddPriority(v uint8) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.AddPriority(v)
	})
}

// UpdatePriority sets the "priority" field to the value that was provided on create.
func (u *SubjectUpsertBulk) UpdatePriority() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdatePriority()
	})
}

// SetResources sets the "resources" field.
func (u *SubjectUpsertBulk) SetResources(v []cards.Resource) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.SetResources(v)
	})
}

// UpdateResources sets the "resources" field to the value that was provided on create.
func (u *SubjectUpsertBulk) UpdateResources() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateResources()
	})
}

// ClearResources clears the value of the "resources" field.
func (u *SubjectUpsertBulk) ClearResources() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.ClearResources()
	})
}

// SetStudyData sets the "study_data" field.
func (u *SubjectUpsertBulk) SetStudyData(v []cards.StudyData) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.SetStudyData(v)
	})
}

// UpdateStudyData sets the "study_data" field to the value that was provided on create.
func (u *SubjectUpsertBulk) UpdateStudyData() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateStudyData()
	})
}

// SetAdditionalStudyData sets the "additional_study_data" field.
func (u *SubjectUpsertBulk) SetAdditionalStudyData(v *map[string]interface{}) *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.SetAdditionalStudyData(v)
	})
}

// UpdateAdditionalStudyData sets the "additional_study_data" field to the value that was provided on create.
func (u *SubjectUpsertBulk) UpdateAdditionalStudyData() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.UpdateAdditionalStudyData()
	})
}

// ClearAdditionalStudyData clears the value of the "additional_study_data" field.
func (u *SubjectUpsertBulk) ClearAdditionalStudyData() *SubjectUpsertBulk {
	return u.Update(func(s *SubjectUpsert) {
		s.ClearAdditionalStudyData()
	})
}

// Exec executes the query.
func (u *SubjectUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SubjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SubjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SubjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
