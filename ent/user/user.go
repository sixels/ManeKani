// Code generated by ent, DO NOT EDIT.

package user

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPendingActions holds the string denoting the pending_actions field in the database.
	FieldPendingActions = "pending_actions"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// EdgeDecks holds the string denoting the decks edge name in mutations.
	EdgeDecks = "decks"
	// EdgeSubjects holds the string denoting the subjects edge name in mutations.
	EdgeSubjects = "subjects"
	// EdgeSubscribedDecks holds the string denoting the subscribed_decks edge name in mutations.
	EdgeSubscribedDecks = "subscribed_decks"
	// EdgeAPITokens holds the string denoting the api_tokens edge name in mutations.
	EdgeAPITokens = "api_tokens"
	// EdgeDecksProgress holds the string denoting the decks_progress edge name in mutations.
	EdgeDecksProgress = "decks_progress"
	// Table holds the table name of the user in the database.
	Table = "users"
	// DecksTable is the table that holds the decks relation/edge.
	DecksTable = "decks"
	// DecksInverseTable is the table name for the Deck entity.
	// It exists in this package in order to avoid circular dependency with the "deck" package.
	DecksInverseTable = "decks"
	// DecksColumn is the table column denoting the decks relation/edge.
	DecksColumn = "user_decks"
	// SubjectsTable is the table that holds the subjects relation/edge.
	SubjectsTable = "subjects"
	// SubjectsInverseTable is the table name for the Subject entity.
	// It exists in this package in order to avoid circular dependency with the "subject" package.
	SubjectsInverseTable = "subjects"
	// SubjectsColumn is the table column denoting the subjects relation/edge.
	SubjectsColumn = "user_subjects"
	// SubscribedDecksTable is the table that holds the subscribed_decks relation/edge. The primary key declared below.
	SubscribedDecksTable = "deck_subscribers"
	// SubscribedDecksInverseTable is the table name for the Deck entity.
	// It exists in this package in order to avoid circular dependency with the "deck" package.
	SubscribedDecksInverseTable = "decks"
	// APITokensTable is the table that holds the api_tokens relation/edge.
	APITokensTable = "api_tokens"
	// APITokensInverseTable is the table name for the ApiToken entity.
	// It exists in this package in order to avoid circular dependency with the "apitoken" package.
	APITokensInverseTable = "api_tokens"
	// APITokensColumn is the table column denoting the api_tokens relation/edge.
	APITokensColumn = "user_api_tokens"
	// DecksProgressTable is the table that holds the decks_progress relation/edge.
	DecksProgressTable = "deck_progresses"
	// DecksProgressInverseTable is the table name for the DeckProgress entity.
	// It exists in this package in order to avoid circular dependency with the "deckprogress" package.
	DecksProgressInverseTable = "deck_progresses"
	// DecksProgressColumn is the table column denoting the decks_progress relation/edge.
	DecksProgressColumn = "user_decks_progress"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldUsername,
	FieldPendingActions,
	FieldEmail,
}

var (
	// SubscribedDecksPrimaryKey and SubscribedDecksColumn2 are the table columns denoting the
	// primary key for the subscribed_decks relation (M2M).
	SubscribedDecksPrimaryKey = []string{"deck_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByDecksCount orders the results by decks count.
func ByDecksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDecksStep(), opts...)
	}
}

// ByDecks orders the results by decks terms.
func ByDecks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDecksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubjectsCount orders the results by subjects count.
func BySubjectsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubjectsStep(), opts...)
	}
}

// BySubjects orders the results by subjects terms.
func BySubjects(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubjectsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySubscribedDecksCount orders the results by subscribed_decks count.
func BySubscribedDecksCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSubscribedDecksStep(), opts...)
	}
}

// BySubscribedDecks orders the results by subscribed_decks terms.
func BySubscribedDecks(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSubscribedDecksStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAPITokensCount orders the results by api_tokens count.
func ByAPITokensCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAPITokensStep(), opts...)
	}
}

// ByAPITokens orders the results by api_tokens terms.
func ByAPITokens(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAPITokensStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDecksProgressCount orders the results by decks_progress count.
func ByDecksProgressCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDecksProgressStep(), opts...)
	}
}

// ByDecksProgress orders the results by decks_progress terms.
func ByDecksProgress(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDecksProgressStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDecksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DecksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DecksTable, DecksColumn),
	)
}
func newSubjectsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubjectsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SubjectsTable, SubjectsColumn),
	)
}
func newSubscribedDecksStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SubscribedDecksInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, SubscribedDecksTable, SubscribedDecksPrimaryKey...),
	)
}
func newAPITokensStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(APITokensInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, APITokensTable, APITokensColumn),
	)
}
func newDecksProgressStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DecksProgressInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, DecksProgressTable, DecksProgressColumn),
	)
}
