// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/sixels/manekani/ent/apitoken"
	"github.com/sixels/manekani/ent/user"
)

// ApiToken is the model entity for the ApiToken schema.
type ApiToken struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Token holds the value of the "token" field.
	Token []byte `json:"-"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ApiTokenQuery when eager-loading is set.
	Edges           ApiTokenEdges `json:"edges"`
	user_api_tokens *string
}

// ApiTokenEdges holds the relations/edges for other nodes in the graph.
type ApiTokenEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ApiTokenEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ApiToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case apitoken.FieldToken:
			values[i] = new([]byte)
		case apitoken.FieldID:
			values[i] = new(uuid.UUID)
		case apitoken.ForeignKeys[0]: // user_api_tokens
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ApiToken", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ApiToken fields.
func (at *ApiToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case apitoken.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				at.ID = *value
			}
		case apitoken.FieldToken:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value != nil {
				at.Token = *value
			}
		case apitoken.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_api_tokens", values[i])
			} else if value.Valid {
				at.user_api_tokens = new(string)
				*at.user_api_tokens = value.String
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the ApiToken entity.
func (at *ApiToken) QueryUser() *UserQuery {
	return (&ApiTokenClient{config: at.config}).QueryUser(at)
}

// Update returns a builder for updating this ApiToken.
// Note that you need to call ApiToken.Unwrap() before calling this method if this ApiToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (at *ApiToken) Update() *ApiTokenUpdateOne {
	return (&ApiTokenClient{config: at.config}).UpdateOne(at)
}

// Unwrap unwraps the ApiToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (at *ApiToken) Unwrap() *ApiToken {
	_tx, ok := at.config.driver.(*txDriver)
	if !ok {
		panic("ent: ApiToken is not a transactional entity")
	}
	at.config.driver = _tx.drv
	return at
}

// String implements the fmt.Stringer.
func (at *ApiToken) String() string {
	var builder strings.Builder
	builder.WriteString("ApiToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", at.ID))
	builder.WriteString("token=<sensitive>")
	builder.WriteByte(')')
	return builder.String()
}

// ApiTokens is a parsable slice of ApiToken.
type ApiTokens []*ApiToken

func (at ApiTokens) config(cfg config) {
	for _i := range at {
		at[_i].config = cfg
	}
}
